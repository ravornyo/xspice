/*
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.validation

import com.xtext.ravornyo.xspice.xSpice.BJT
import com.xtext.ravornyo.xspice.xSpice.CCCS
import com.xtext.ravornyo.xspice.xSpice.CCVS
import com.xtext.ravornyo.xspice.xSpice.Capacitor
import com.xtext.ravornyo.xspice.xSpice.Compilation
import com.xtext.ravornyo.xspice.xSpice.Diode
import com.xtext.ravornyo.xspice.xSpice.Entity
import com.xtext.ravornyo.xspice.xSpice.JFET
import com.xtext.ravornyo.xspice.xSpice.MOSFET
import com.xtext.ravornyo.xspice.xSpice.MutualInductance
import com.xtext.ravornyo.xspice.xSpice.Resistor
import com.xtext.ravornyo.xspice.xSpice.SubCircuitDefinition
import com.xtext.ravornyo.xspice.xSpice.VoltageSwitch
import org.eclipse.emf.ecore.EClass
import org.eclipse.xtext.validation.Check
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XSpiceValidator extends AbstractXSpiceValidator {
	
	@Check
	def checkEntityNameIsUnique(Entity entity) {
		var parent = entity.eContainer;
		if(parent !== null) {
			var entities = parent.eClass === XSpicePackage.Literals.SUB_CIRCUIT_DEFINITION? (parent as SubCircuitDefinition).entities:
				(parent as Compilation).entities
			
			for (Entity other : entities) {
				if (entity !== other && entity.name == other.name) {
		        	error("Entity names have to be unique", XSpicePackage.Literals.ENTITY__NAME);
		            return;
		    	}
			}
		}	
	}
	
	@Check 
	def checkResistor(Resistor resistor){
		if(resistor.resistance === null){
			if(!isReferencePresent(resistor, resistor.model, XSpicePackage.Literals.RESISTOR_MODEL)){
				error("Resistance value or valid model required for '" + resistor.name + "'", XSpicePackage.Literals.RESISTOR__MODEL);
			}
		}
	}
	
	@Check 
	def checkCapacitor(Capacitor capacitor){
		if(capacitor.capacitance === null){
			if(!isReferencePresent(capacitor, capacitor.model, XSpicePackage.Literals.CAPACITOR_MODEL)){
				error("Capacitance value or valid model required for '" + capacitor.name + "'", XSpicePackage.Literals.CAPACITOR__MODEL);
			}
		}
	}
	
	@Check 
	def checkMutualInductance(MutualInductance mutualInductance){
		if(!isReferencePresent(mutualInductance, mutualInductance.inductor1, XSpicePackage.Literals.INDUCTOR)){
			error("Mutual inductance '" + mutualInductance.name + "' L1 not found", XSpicePackage.Literals.MUTUAL_INDUCTANCE__INDUCTOR1);
		}
		if(!isReferencePresent(mutualInductance, mutualInductance.inductor2, XSpicePackage.Literals.INDUCTOR)){
			error("Mutual inductance '" + mutualInductance.name + "' L2 not found", XSpicePackage.Literals.MUTUAL_INDUCTANCE__INDUCTOR2);
		}
	}
	
	@Check 
	def checkCCCS(CCCS cccs){
		if(!isReferencePresent(cccs, cccs.controller, XSpicePackage.Literals.CURRENT_SOURCE)){
			error("CCCS '" + cccs.name + "' controller not found", XSpicePackage.Literals.CCCS__CONTROLLER);
		}
	}
	
	@Check 
	def checkCCVS(CCVS ccvs){
		if(!isReferencePresent(ccvs, ccvs.controller, XSpicePackage.Literals.CURRENT_SOURCE)){
			error("CCVS '" + ccvs.name + "' controller not found", XSpicePackage.Literals.CCVS__CONTROLLER);
		}
	}
	
	@Check 
	def checkVoltageSwitch(VoltageSwitch vswitch){
		if(!isReferencePresent(vswitch, vswitch.model, XSpicePackage.Literals.VOLTAGE_SWITCH_MODEL)){
			error("Voltage Switch '" + vswitch.name + "' model not found", XSpicePackage.Literals.VOLTAGE_SWITCH__MODEL);
		}
	}
	
	@Check 
	def checkCurrentSwitch(VoltageSwitch cswitch){
		if(!isReferencePresent(cswitch, cswitch.model, XSpicePackage.Literals.CURRENT_SWITCH_MODEL)){
			error("Voltage Switch '" + cswitch.name + "' model not found", XSpicePackage.Literals.CURRENT_SWITCH__MODEL);
		}
	}
	
	@Check 
	def checkDiode(Diode diode){
		if(!isReferencePresent(diode, diode.model, XSpicePackage.Literals.DIODE_MODEL)){
			error("Diode '" + diode.name + "' model not found", XSpicePackage.Literals.DIODE__MODEL);
		}
	}
	
	@Check 
	def checkBJT(BJT bjt){
		if(!isReferencePresent(bjt, bjt.model, XSpicePackage.Literals.BJT_MODEL)){
			error("BJT '" + bjt.name + "' model not found", XSpicePackage.Literals.BJT__MODEL);
		}
	}
	
	@Check 
	def checkJFET(JFET jfet){
		if(!isReferencePresent(jfet, jfet.model, XSpicePackage.Literals.JFET_MODEL)){
			error("JFET '" + jfet.name + "' model not found", XSpicePackage.Literals.JFET__MODEL);
		}
	}
	
	@Check 
	def checkMOS(MOSFET mos){
		if(!isReferencePresent(mos, mos.model, XSpicePackage.Literals.MOSFET_MODEL)){
			error("MOSFET '" + mos.name + "' model not found", XSpicePackage.Literals.MOSFET__MODEL);
		}
	}
	
	def boolean isReferencePresent(Entity referrer, String referenceName, EClass referenceClass) {
		if(referenceName === null||referenceClass === null){
			return false;
		}
		var parent = referrer.eContainer;
		if(parent !== null) {
			var entities = parent.eClass === XSpicePackage.Literals.SUB_CIRCUIT_DEFINITION? (parent as SubCircuitDefinition).entities:
				(parent as Compilation).entities
			
			for (Entity other : entities) {
				if (referrer !== other && other.name == referenceName && other.eClass == referenceClass) {
		            return true;
		    	}
			}
		}
		return false;
	}
	
}
