/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.util;

import com.xtext.ravornyo.xspice.xSpice.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.xtext.ravornyo.xspice.xSpice.XSpicePackage
 * @generated
 */
public class XSpiceSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XSpicePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XSpiceSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = XSpicePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case XSpicePackage.COMPILATION:
      {
        Compilation compilation = (Compilation)theEObject;
        T result = caseCompilation(compilation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.COMPONENT:
      {
        Component component = (Component)theEObject;
        T result = caseComponent(component);
        if (result == null) result = caseEntity(component);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.SUB_CIRCUIT_DEFINITION:
      {
        SubCircuitDefinition subCircuitDefinition = (SubCircuitDefinition)theEObject;
        T result = caseSubCircuitDefinition(subCircuitDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.SUB_CIRCUIT:
      {
        SubCircuit subCircuit = (SubCircuit)theEObject;
        T result = caseSubCircuit(subCircuit);
        if (result == null) result = caseEntity(subCircuit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.RESISTOR:
      {
        Resistor resistor = (Resistor)theEObject;
        T result = caseResistor(resistor);
        if (result == null) result = caseComponent(resistor);
        if (result == null) result = caseEntity(resistor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.RESISTOR_MODEL:
      {
        ResistorModel resistorModel = (ResistorModel)theEObject;
        T result = caseResistorModel(resistorModel);
        if (result == null) result = caseEntity(resistorModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CAPACITOR:
      {
        Capacitor capacitor = (Capacitor)theEObject;
        T result = caseCapacitor(capacitor);
        if (result == null) result = caseComponent(capacitor);
        if (result == null) result = caseEntity(capacitor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CAPACITOR_MODEL:
      {
        CapacitorModel capacitorModel = (CapacitorModel)theEObject;
        T result = caseCapacitorModel(capacitorModel);
        if (result == null) result = caseEntity(capacitorModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.INDUCTOR:
      {
        Inductor inductor = (Inductor)theEObject;
        T result = caseInductor(inductor);
        if (result == null) result = caseComponent(inductor);
        if (result == null) result = caseEntity(inductor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.MUTUAL_INDUCTANCE:
      {
        MutualInductance mutualInductance = (MutualInductance)theEObject;
        T result = caseMutualInductance(mutualInductance);
        if (result == null) result = caseEntity(mutualInductance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.VOLTAGE_SWITCH:
      {
        VoltageSwitch voltageSwitch = (VoltageSwitch)theEObject;
        T result = caseVoltageSwitch(voltageSwitch);
        if (result == null) result = caseComponent(voltageSwitch);
        if (result == null) result = caseEntity(voltageSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.VOLTAGE_SWITCH_MODEL:
      {
        VoltageSwitchModel voltageSwitchModel = (VoltageSwitchModel)theEObject;
        T result = caseVoltageSwitchModel(voltageSwitchModel);
        if (result == null) result = caseEntity(voltageSwitchModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CURRENT_SWITCH:
      {
        CurrentSwitch currentSwitch = (CurrentSwitch)theEObject;
        T result = caseCurrentSwitch(currentSwitch);
        if (result == null) result = caseComponent(currentSwitch);
        if (result == null) result = caseEntity(currentSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CURRENT_SWITCH_MODEL:
      {
        CurrentSwitchModel currentSwitchModel = (CurrentSwitchModel)theEObject;
        T result = caseCurrentSwitchModel(currentSwitchModel);
        if (result == null) result = caseEntity(currentSwitchModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.DIODE:
      {
        Diode diode = (Diode)theEObject;
        T result = caseDiode(diode);
        if (result == null) result = caseComponent(diode);
        if (result == null) result = caseEntity(diode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.DIODE_MODEL:
      {
        DiodeModel diodeModel = (DiodeModel)theEObject;
        T result = caseDiodeModel(diodeModel);
        if (result == null) result = caseEntity(diodeModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.MOSFET:
      {
        MOSFET mosfet = (MOSFET)theEObject;
        T result = caseMOSFET(mosfet);
        if (result == null) result = caseComponent(mosfet);
        if (result == null) result = caseEntity(mosfet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.MOSFET_MODEL:
      {
        MOSFETModel mosfetModel = (MOSFETModel)theEObject;
        T result = caseMOSFETModel(mosfetModel);
        if (result == null) result = caseEntity(mosfetModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.BJT:
      {
        BJT bjt = (BJT)theEObject;
        T result = caseBJT(bjt);
        if (result == null) result = caseComponent(bjt);
        if (result == null) result = caseEntity(bjt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.BJT_MODEL:
      {
        BJTModel bjtModel = (BJTModel)theEObject;
        T result = caseBJTModel(bjtModel);
        if (result == null) result = caseEntity(bjtModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.JFET:
      {
        JFET jfet = (JFET)theEObject;
        T result = caseJFET(jfet);
        if (result == null) result = caseComponent(jfet);
        if (result == null) result = caseEntity(jfet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.JFET_MODEL:
      {
        JFETModel jfetModel = (JFETModel)theEObject;
        T result = caseJFETModel(jfetModel);
        if (result == null) result = caseEntity(jfetModel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.VSOURCE:
      {
        VSource vSource = (VSource)theEObject;
        T result = caseVSource(vSource);
        if (result == null) result = caseComponent(vSource);
        if (result == null) result = caseEntity(vSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CURRENT_SOURCE:
      {
        CurrentSource currentSource = (CurrentSource)theEObject;
        T result = caseCurrentSource(currentSource);
        if (result == null) result = caseComponent(currentSource);
        if (result == null) result = caseEntity(currentSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.VCVS:
      {
        VCVS vcvs = (VCVS)theEObject;
        T result = caseVCVS(vcvs);
        if (result == null) result = caseComponent(vcvs);
        if (result == null) result = caseEntity(vcvs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.VCCS:
      {
        VCCS vccs = (VCCS)theEObject;
        T result = caseVCCS(vccs);
        if (result == null) result = caseComponent(vccs);
        if (result == null) result = caseEntity(vccs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CCCS:
      {
        CCCS cccs = (CCCS)theEObject;
        T result = caseCCCS(cccs);
        if (result == null) result = caseComponent(cccs);
        if (result == null) result = caseEntity(cccs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CCVS:
      {
        CCVS ccvs = (CCVS)theEObject;
        T result = caseCCVS(ccvs);
        if (result == null) result = caseComponent(ccvs);
        if (result == null) result = caseEntity(ccvs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.GEOMETERIC_SWEEP:
      {
        GeometericSweep geometericSweep = (GeometericSweep)theEObject;
        T result = caseGeometericSweep(geometericSweep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.LINEAR_SWEEP:
      {
        LinearSweep linearSweep = (LinearSweep)theEObject;
        T result = caseLinearSweep(linearSweep);
        if (result == null) result = caseGeometericSweep(linearSweep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.OCTAVE_SWEEP:
      {
        OctaveSweep octaveSweep = (OctaveSweep)theEObject;
        T result = caseOctaveSweep(octaveSweep);
        if (result == null) result = caseGeometericSweep(octaveSweep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.DECADE_SWEEP:
      {
        DecadeSweep decadeSweep = (DecadeSweep)theEObject;
        T result = caseDecadeSweep(decadeSweep);
        if (result == null) result = caseGeometericSweep(decadeSweep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.PARAMETER_SWEEP:
      {
        ParameterSweep parameterSweep = (ParameterSweep)theEObject;
        T result = caseParameterSweep(parameterSweep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.SIMULATION:
      {
        Simulation simulation = (Simulation)theEObject;
        T result = caseSimulation(simulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.AC_SIMULATION:
      {
        ACSimulation acSimulation = (ACSimulation)theEObject;
        T result = caseACSimulation(acSimulation);
        if (result == null) result = caseSimulation(acSimulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.DC_SIMULATION:
      {
        DCSimulation dcSimulation = (DCSimulation)theEObject;
        T result = caseDCSimulation(dcSimulation);
        if (result == null) result = caseSimulation(dcSimulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.NOISE_SIMULATION:
      {
        NoiseSimulation noiseSimulation = (NoiseSimulation)theEObject;
        T result = caseNoiseSimulation(noiseSimulation);
        if (result == null) result = caseSimulation(noiseSimulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.TRANSIENT_SIMULATION:
      {
        TransientSimulation transientSimulation = (TransientSimulation)theEObject;
        T result = caseTransientSimulation(transientSimulation);
        if (result == null) result = caseSimulation(transientSimulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.OUTPUT:
      {
        Output output = (Output)theEObject;
        T result = caseOutput(output);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.PRINT:
      {
        Print print = (Print)theEObject;
        T result = casePrint(print);
        if (result == null) result = caseOutput(print);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.PLOT:
      {
        Plot plot = (Plot)theEObject;
        T result = casePlot(plot);
        if (result == null) result = caseOutput(plot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.EXPORT:
      {
        Export export = (Export)theEObject;
        T result = caseExport(export);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.VOLTAGE_EXPORT:
      {
        VoltageExport voltageExport = (VoltageExport)theEObject;
        T result = caseVoltageExport(voltageExport);
        if (result == null) result = caseExport(voltageExport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.CURRENT_EXPORT:
      {
        CurrentExport currentExport = (CurrentExport)theEObject;
        T result = caseCurrentExport(currentExport);
        if (result == null) result = caseExport(currentExport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.WAVEFORM:
      {
        Waveform waveform = (Waveform)theEObject;
        T result = caseWaveform(waveform);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.EXP:
      {
        Exp exp = (Exp)theEObject;
        T result = caseExp(exp);
        if (result == null) result = caseWaveform(exp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.SINE:
      {
        Sine sine = (Sine)theEObject;
        T result = caseSine(sine);
        if (result == null) result = caseWaveform(sine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.PULSE:
      {
        Pulse pulse = (Pulse)theEObject;
        T result = casePulse(pulse);
        if (result == null) result = caseWaveform(pulse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.PWL:
      {
        PWL pwl = (PWL)theEObject;
        T result = casePWL(pwl);
        if (result == null) result = caseWaveform(pwl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.SFFM:
      {
        SFFM sffm = (SFFM)theEObject;
        T result = caseSFFM(sffm);
        if (result == null) result = caseWaveform(sffm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.AM:
      {
        AM am = (AM)theEObject;
        T result = caseAM(am);
        if (result == null) result = caseWaveform(am);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.OPTIONS:
      {
        Options options = (Options)theEObject;
        T result = caseOptions(options);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.NODE_SET:
      {
        NodeSet nodeSet = (NodeSet)theEObject;
        T result = caseNodeSet(nodeSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.INITIAL_CONDITION:
      {
        InitialCondition initialCondition = (InitialCondition)theEObject;
        T result = caseInitialCondition(initialCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XSpicePackage.NODE_SET_ENTRY:
      {
        NodeSetEntry nodeSetEntry = (NodeSetEntry)theEObject;
        T result = caseNodeSetEntry(nodeSetEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compilation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compilation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompilation(Compilation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponent(Component object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Circuit Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Circuit Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubCircuitDefinition(SubCircuitDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Circuit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Circuit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubCircuit(SubCircuit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resistor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resistor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResistor(Resistor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Resistor Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Resistor Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseResistorModel(ResistorModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Capacitor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Capacitor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCapacitor(Capacitor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Capacitor Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Capacitor Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCapacitorModel(CapacitorModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inductor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inductor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInductor(Inductor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mutual Inductance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mutual Inductance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMutualInductance(MutualInductance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Voltage Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Voltage Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVoltageSwitch(VoltageSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Voltage Switch Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Voltage Switch Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVoltageSwitchModel(VoltageSwitchModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentSwitch(CurrentSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Switch Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Switch Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentSwitchModel(CurrentSwitchModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Diode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Diode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiode(Diode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Diode Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Diode Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiodeModel(DiodeModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MOSFET</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MOSFET</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMOSFET(MOSFET object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MOSFET Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MOSFET Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMOSFETModel(MOSFETModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BJT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BJT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBJT(BJT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BJT Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BJT Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBJTModel(BJTModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JFET</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JFET</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJFET(JFET object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JFET Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JFET Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJFETModel(JFETModel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VSource</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VSource</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVSource(VSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentSource(CurrentSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VCVS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VCVS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVCVS(VCVS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VCCS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VCCS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVCCS(VCCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CCCS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CCCS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCCCS(CCCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CCVS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CCVS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCCVS(CCVS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Geometeric Sweep</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Geometeric Sweep</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeometericSweep(GeometericSweep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Linear Sweep</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Linear Sweep</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinearSweep(LinearSweep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Octave Sweep</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Octave Sweep</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOctaveSweep(OctaveSweep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decade Sweep</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decade Sweep</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecadeSweep(DecadeSweep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Sweep</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Sweep</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterSweep(ParameterSweep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimulation(Simulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AC Simulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AC Simulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseACSimulation(ACSimulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DC Simulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DC Simulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDCSimulation(DCSimulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Noise Simulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Noise Simulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoiseSimulation(NoiseSimulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transient Simulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transient Simulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransientSimulation(TransientSimulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutput(Output object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrint(Print object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plot</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plot</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlot(Plot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExport(Export object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Voltage Export</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Voltage Export</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVoltageExport(VoltageExport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Current Export</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Current Export</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurrentExport(CurrentExport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Waveform</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Waveform</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWaveform(Waveform object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExp(Exp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSine(Sine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pulse</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pulse</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePulse(Pulse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PWL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PWL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePWL(PWL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SFFM</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SFFM</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSFFM(SFFM object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AM</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AM</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAM(AM object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptions(Options object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeSet(NodeSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initial Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initial Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialCondition(InitialCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Set Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Set Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeSetEntry(NodeSetEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //XSpiceSwitch
