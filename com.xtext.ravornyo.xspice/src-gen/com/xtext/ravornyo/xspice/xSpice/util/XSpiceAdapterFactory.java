/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.util;

import com.xtext.ravornyo.xspice.xSpice.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.xtext.ravornyo.xspice.xSpice.XSpicePackage
 * @generated
 */
public class XSpiceAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XSpicePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XSpiceAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XSpicePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XSpiceSwitch<Adapter> modelSwitch =
    new XSpiceSwitch<Adapter>()
    {
      @Override
      public Adapter caseCompilation(Compilation object)
      {
        return createCompilationAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseSubCircuitDefinition(SubCircuitDefinition object)
      {
        return createSubCircuitDefinitionAdapter();
      }
      @Override
      public Adapter caseSubCircuit(SubCircuit object)
      {
        return createSubCircuitAdapter();
      }
      @Override
      public Adapter caseResistor(Resistor object)
      {
        return createResistorAdapter();
      }
      @Override
      public Adapter caseResistorModel(ResistorModel object)
      {
        return createResistorModelAdapter();
      }
      @Override
      public Adapter caseCapacitor(Capacitor object)
      {
        return createCapacitorAdapter();
      }
      @Override
      public Adapter caseCapacitorModel(CapacitorModel object)
      {
        return createCapacitorModelAdapter();
      }
      @Override
      public Adapter caseInductor(Inductor object)
      {
        return createInductorAdapter();
      }
      @Override
      public Adapter caseMutualInductance(MutualInductance object)
      {
        return createMutualInductanceAdapter();
      }
      @Override
      public Adapter caseVoltageSwitch(VoltageSwitch object)
      {
        return createVoltageSwitchAdapter();
      }
      @Override
      public Adapter caseVoltageSwitchModel(VoltageSwitchModel object)
      {
        return createVoltageSwitchModelAdapter();
      }
      @Override
      public Adapter caseCurrentSwitch(CurrentSwitch object)
      {
        return createCurrentSwitchAdapter();
      }
      @Override
      public Adapter caseCurrentSwitchModel(CurrentSwitchModel object)
      {
        return createCurrentSwitchModelAdapter();
      }
      @Override
      public Adapter caseDiode(Diode object)
      {
        return createDiodeAdapter();
      }
      @Override
      public Adapter caseDiodeModel(DiodeModel object)
      {
        return createDiodeModelAdapter();
      }
      @Override
      public Adapter caseMOSFET(MOSFET object)
      {
        return createMOSFETAdapter();
      }
      @Override
      public Adapter caseMOSFETModel(MOSFETModel object)
      {
        return createMOSFETModelAdapter();
      }
      @Override
      public Adapter caseBJT(BJT object)
      {
        return createBJTAdapter();
      }
      @Override
      public Adapter caseBJTModel(BJTModel object)
      {
        return createBJTModelAdapter();
      }
      @Override
      public Adapter caseJFET(JFET object)
      {
        return createJFETAdapter();
      }
      @Override
      public Adapter caseJFETModel(JFETModel object)
      {
        return createJFETModelAdapter();
      }
      @Override
      public Adapter caseVSource(VSource object)
      {
        return createVSourceAdapter();
      }
      @Override
      public Adapter caseCurrentSource(CurrentSource object)
      {
        return createCurrentSourceAdapter();
      }
      @Override
      public Adapter caseVCVS(VCVS object)
      {
        return createVCVSAdapter();
      }
      @Override
      public Adapter caseVCCS(VCCS object)
      {
        return createVCCSAdapter();
      }
      @Override
      public Adapter caseCCCS(CCCS object)
      {
        return createCCCSAdapter();
      }
      @Override
      public Adapter caseCCVS(CCVS object)
      {
        return createCCVSAdapter();
      }
      @Override
      public Adapter caseGeometericSweep(GeometericSweep object)
      {
        return createGeometericSweepAdapter();
      }
      @Override
      public Adapter caseLinearSweep(LinearSweep object)
      {
        return createLinearSweepAdapter();
      }
      @Override
      public Adapter caseOctaveSweep(OctaveSweep object)
      {
        return createOctaveSweepAdapter();
      }
      @Override
      public Adapter caseDecadeSweep(DecadeSweep object)
      {
        return createDecadeSweepAdapter();
      }
      @Override
      public Adapter caseParameterSweep(ParameterSweep object)
      {
        return createParameterSweepAdapter();
      }
      @Override
      public Adapter caseSimulation(Simulation object)
      {
        return createSimulationAdapter();
      }
      @Override
      public Adapter caseACSimulation(ACSimulation object)
      {
        return createACSimulationAdapter();
      }
      @Override
      public Adapter caseDCSimulation(DCSimulation object)
      {
        return createDCSimulationAdapter();
      }
      @Override
      public Adapter caseNoiseSimulation(NoiseSimulation object)
      {
        return createNoiseSimulationAdapter();
      }
      @Override
      public Adapter caseTransientSimulation(TransientSimulation object)
      {
        return createTransientSimulationAdapter();
      }
      @Override
      public Adapter caseOutput(Output object)
      {
        return createOutputAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter casePlot(Plot object)
      {
        return createPlotAdapter();
      }
      @Override
      public Adapter caseExport(Export object)
      {
        return createExportAdapter();
      }
      @Override
      public Adapter caseVoltageExport(VoltageExport object)
      {
        return createVoltageExportAdapter();
      }
      @Override
      public Adapter caseCurrentExport(CurrentExport object)
      {
        return createCurrentExportAdapter();
      }
      @Override
      public Adapter caseWaveform(Waveform object)
      {
        return createWaveformAdapter();
      }
      @Override
      public Adapter caseExp(Exp object)
      {
        return createExpAdapter();
      }
      @Override
      public Adapter caseSine(Sine object)
      {
        return createSineAdapter();
      }
      @Override
      public Adapter casePulse(Pulse object)
      {
        return createPulseAdapter();
      }
      @Override
      public Adapter casePWL(PWL object)
      {
        return createPWLAdapter();
      }
      @Override
      public Adapter caseSFFM(SFFM object)
      {
        return createSFFMAdapter();
      }
      @Override
      public Adapter caseAM(AM object)
      {
        return createAMAdapter();
      }
      @Override
      public Adapter caseOptions(Options object)
      {
        return createOptionsAdapter();
      }
      @Override
      public Adapter caseNodeSet(NodeSet object)
      {
        return createNodeSetAdapter();
      }
      @Override
      public Adapter caseInitialCondition(InitialCondition object)
      {
        return createInitialConditionAdapter();
      }
      @Override
      public Adapter caseNodeSetEntry(NodeSetEntry object)
      {
        return createNodeSetEntryAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Compilation <em>Compilation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Compilation
   * @generated
   */
  public Adapter createCompilationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.SubCircuitDefinition <em>Sub Circuit Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.SubCircuitDefinition
   * @generated
   */
  public Adapter createSubCircuitDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.SubCircuit <em>Sub Circuit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.SubCircuit
   * @generated
   */
  public Adapter createSubCircuitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Resistor <em>Resistor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Resistor
   * @generated
   */
  public Adapter createResistorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.ResistorModel <em>Resistor Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.ResistorModel
   * @generated
   */
  public Adapter createResistorModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Capacitor <em>Capacitor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Capacitor
   * @generated
   */
  public Adapter createCapacitorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CapacitorModel <em>Capacitor Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CapacitorModel
   * @generated
   */
  public Adapter createCapacitorModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Inductor <em>Inductor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Inductor
   * @generated
   */
  public Adapter createInductorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.MutualInductance <em>Mutual Inductance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.MutualInductance
   * @generated
   */
  public Adapter createMutualInductanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.VoltageSwitch <em>Voltage Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.VoltageSwitch
   * @generated
   */
  public Adapter createVoltageSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.VoltageSwitchModel <em>Voltage Switch Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.VoltageSwitchModel
   * @generated
   */
  public Adapter createVoltageSwitchModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CurrentSwitch <em>Current Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CurrentSwitch
   * @generated
   */
  public Adapter createCurrentSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CurrentSwitchModel <em>Current Switch Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CurrentSwitchModel
   * @generated
   */
  public Adapter createCurrentSwitchModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Diode <em>Diode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Diode
   * @generated
   */
  public Adapter createDiodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.DiodeModel <em>Diode Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.DiodeModel
   * @generated
   */
  public Adapter createDiodeModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.MOSFET <em>MOSFET</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.MOSFET
   * @generated
   */
  public Adapter createMOSFETAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.MOSFETModel <em>MOSFET Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.MOSFETModel
   * @generated
   */
  public Adapter createMOSFETModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.BJT <em>BJT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.BJT
   * @generated
   */
  public Adapter createBJTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.BJTModel <em>BJT Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.BJTModel
   * @generated
   */
  public Adapter createBJTModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.JFET <em>JFET</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.JFET
   * @generated
   */
  public Adapter createJFETAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.JFETModel <em>JFET Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.JFETModel
   * @generated
   */
  public Adapter createJFETModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.VSource <em>VSource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.VSource
   * @generated
   */
  public Adapter createVSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CurrentSource <em>Current Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CurrentSource
   * @generated
   */
  public Adapter createCurrentSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.VCVS <em>VCVS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.VCVS
   * @generated
   */
  public Adapter createVCVSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.VCCS <em>VCCS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.VCCS
   * @generated
   */
  public Adapter createVCCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CCCS <em>CCCS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CCCS
   * @generated
   */
  public Adapter createCCCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CCVS <em>CCVS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CCVS
   * @generated
   */
  public Adapter createCCVSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.GeometericSweep <em>Geometeric Sweep</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.GeometericSweep
   * @generated
   */
  public Adapter createGeometericSweepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.LinearSweep <em>Linear Sweep</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.LinearSweep
   * @generated
   */
  public Adapter createLinearSweepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.OctaveSweep <em>Octave Sweep</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.OctaveSweep
   * @generated
   */
  public Adapter createOctaveSweepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.DecadeSweep <em>Decade Sweep</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.DecadeSweep
   * @generated
   */
  public Adapter createDecadeSweepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.ParameterSweep <em>Parameter Sweep</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.ParameterSweep
   * @generated
   */
  public Adapter createParameterSweepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Simulation <em>Simulation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Simulation
   * @generated
   */
  public Adapter createSimulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.ACSimulation <em>AC Simulation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.ACSimulation
   * @generated
   */
  public Adapter createACSimulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.DCSimulation <em>DC Simulation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.DCSimulation
   * @generated
   */
  public Adapter createDCSimulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.NoiseSimulation <em>Noise Simulation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.NoiseSimulation
   * @generated
   */
  public Adapter createNoiseSimulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.TransientSimulation <em>Transient Simulation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.TransientSimulation
   * @generated
   */
  public Adapter createTransientSimulationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Output
   * @generated
   */
  public Adapter createOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Plot <em>Plot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Plot
   * @generated
   */
  public Adapter createPlotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Export <em>Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Export
   * @generated
   */
  public Adapter createExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.VoltageExport <em>Voltage Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.VoltageExport
   * @generated
   */
  public Adapter createVoltageExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.CurrentExport <em>Current Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.CurrentExport
   * @generated
   */
  public Adapter createCurrentExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Waveform <em>Waveform</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Waveform
   * @generated
   */
  public Adapter createWaveformAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Exp <em>Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Exp
   * @generated
   */
  public Adapter createExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Sine <em>Sine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Sine
   * @generated
   */
  public Adapter createSineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Pulse <em>Pulse</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Pulse
   * @generated
   */
  public Adapter createPulseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.PWL <em>PWL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.PWL
   * @generated
   */
  public Adapter createPWLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.SFFM <em>SFFM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.SFFM
   * @generated
   */
  public Adapter createSFFMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.AM <em>AM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.AM
   * @generated
   */
  public Adapter createAMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.Options <em>Options</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.Options
   * @generated
   */
  public Adapter createOptionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.NodeSet <em>Node Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.NodeSet
   * @generated
   */
  public Adapter createNodeSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.InitialCondition <em>Initial Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.InitialCondition
   * @generated
   */
  public Adapter createInitialConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.xtext.ravornyo.xspice.xSpice.NodeSetEntry <em>Node Set Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.xtext.ravornyo.xspice.xSpice.NodeSetEntry
   * @generated
   */
  public Adapter createNodeSetEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XSpiceAdapterFactory
