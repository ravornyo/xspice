/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.CCVS;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CCVS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CCVSImpl#getController <em>Controller</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CCVSImpl#getTransresistance <em>Transresistance</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CCVSImpl extends ComponentImpl implements CCVS
{
  /**
   * The default value of the '{@link #getController() <em>Controller</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getController()
   * @generated
   * @ordered
   */
  protected static final String CONTROLLER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getController() <em>Controller</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getController()
   * @generated
   * @ordered
   */
  protected String controller = CONTROLLER_EDEFAULT;

  /**
   * The default value of the '{@link #getTransresistance() <em>Transresistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransresistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSRESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransresistance() <em>Transresistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransresistance()
   * @generated
   * @ordered
   */
  protected BigDecimal transresistance = TRANSRESISTANCE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CCVSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.CCVS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getController()
  {
    return controller;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setController(String newController)
  {
    String oldController = controller;
    controller = newController;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CCVS__CONTROLLER, oldController, controller));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransresistance()
  {
    return transresistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransresistance(BigDecimal newTransresistance)
  {
    BigDecimal oldTransresistance = transresistance;
    transresistance = newTransresistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CCVS__TRANSRESISTANCE, oldTransresistance, transresistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.CCVS__CONTROLLER:
        return getController();
      case XSpicePackage.CCVS__TRANSRESISTANCE:
        return getTransresistance();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.CCVS__CONTROLLER:
        setController((String)newValue);
        return;
      case XSpicePackage.CCVS__TRANSRESISTANCE:
        setTransresistance((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.CCVS__CONTROLLER:
        setController(CONTROLLER_EDEFAULT);
        return;
      case XSpicePackage.CCVS__TRANSRESISTANCE:
        setTransresistance(TRANSRESISTANCE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.CCVS__CONTROLLER:
        return CONTROLLER_EDEFAULT == null ? controller != null : !CONTROLLER_EDEFAULT.equals(controller);
      case XSpicePackage.CCVS__TRANSRESISTANCE:
        return TRANSRESISTANCE_EDEFAULT == null ? transresistance != null : !TRANSRESISTANCE_EDEFAULT.equals(transresistance);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (controller: ");
    result.append(controller);
    result.append(", transresistance: ");
    result.append(transresistance);
    result.append(')');
    return result.toString();
  }

} //CCVSImpl
