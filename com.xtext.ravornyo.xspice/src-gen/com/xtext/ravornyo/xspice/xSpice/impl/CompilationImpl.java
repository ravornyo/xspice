/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.Compilation;
import com.xtext.ravornyo.xspice.xSpice.Entity;
import com.xtext.ravornyo.xspice.xSpice.InitialCondition;
import com.xtext.ravornyo.xspice.xSpice.NodeSet;
import com.xtext.ravornyo.xspice.xSpice.Options;
import com.xtext.ravornyo.xspice.xSpice.Output;
import com.xtext.ravornyo.xspice.xSpice.Simulation;
import com.xtext.ravornyo.xspice.xSpice.SubCircuitDefinition;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Compilation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getDefinitions <em>Definitions</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getEntities <em>Entities</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getSimulations <em>Simulations</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getOutputs <em>Outputs</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getOptions <em>Options</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getIc <em>Ic</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CompilationImpl#getNodeset <em>Nodeset</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompilationImpl extends MinimalEObjectImpl.Container implements Compilation
{
  /**
   * The cached value of the '{@link #getDefinitions() <em>Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinitions()
   * @generated
   * @ordered
   */
  protected EList<SubCircuitDefinition> definitions;

  /**
   * The cached value of the '{@link #getEntities() <em>Entities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntities()
   * @generated
   * @ordered
   */
  protected EList<Entity> entities;

  /**
   * The cached value of the '{@link #getSimulations() <em>Simulations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimulations()
   * @generated
   * @ordered
   */
  protected EList<Simulation> simulations;

  /**
   * The cached value of the '{@link #getOutputs() <em>Outputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputs()
   * @generated
   * @ordered
   */
  protected EList<Output> outputs;

  /**
   * The cached value of the '{@link #getOptions() <em>Options</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptions()
   * @generated
   * @ordered
   */
  protected EList<Options> options;

  /**
   * The cached value of the '{@link #getIc() <em>Ic</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIc()
   * @generated
   * @ordered
   */
  protected EList<InitialCondition> ic;

  /**
   * The cached value of the '{@link #getNodeset() <em>Nodeset</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeset()
   * @generated
   * @ordered
   */
  protected EList<NodeSet> nodeset;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompilationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.COMPILATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SubCircuitDefinition> getDefinitions()
  {
    if (definitions == null)
    {
      definitions = new EObjectContainmentEList<SubCircuitDefinition>(SubCircuitDefinition.class, this, XSpicePackage.COMPILATION__DEFINITIONS);
    }
    return definitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Entity> getEntities()
  {
    if (entities == null)
    {
      entities = new EObjectContainmentEList<Entity>(Entity.class, this, XSpicePackage.COMPILATION__ENTITIES);
    }
    return entities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Simulation> getSimulations()
  {
    if (simulations == null)
    {
      simulations = new EObjectContainmentEList<Simulation>(Simulation.class, this, XSpicePackage.COMPILATION__SIMULATIONS);
    }
    return simulations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Output> getOutputs()
  {
    if (outputs == null)
    {
      outputs = new EObjectContainmentEList<Output>(Output.class, this, XSpicePackage.COMPILATION__OUTPUTS);
    }
    return outputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Options> getOptions()
  {
    if (options == null)
    {
      options = new EObjectContainmentEList<Options>(Options.class, this, XSpicePackage.COMPILATION__OPTIONS);
    }
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<InitialCondition> getIc()
  {
    if (ic == null)
    {
      ic = new EObjectContainmentEList<InitialCondition>(InitialCondition.class, this, XSpicePackage.COMPILATION__IC);
    }
    return ic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NodeSet> getNodeset()
  {
    if (nodeset == null)
    {
      nodeset = new EObjectContainmentEList<NodeSet>(NodeSet.class, this, XSpicePackage.COMPILATION__NODESET);
    }
    return nodeset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XSpicePackage.COMPILATION__DEFINITIONS:
        return ((InternalEList<?>)getDefinitions()).basicRemove(otherEnd, msgs);
      case XSpicePackage.COMPILATION__ENTITIES:
        return ((InternalEList<?>)getEntities()).basicRemove(otherEnd, msgs);
      case XSpicePackage.COMPILATION__SIMULATIONS:
        return ((InternalEList<?>)getSimulations()).basicRemove(otherEnd, msgs);
      case XSpicePackage.COMPILATION__OUTPUTS:
        return ((InternalEList<?>)getOutputs()).basicRemove(otherEnd, msgs);
      case XSpicePackage.COMPILATION__OPTIONS:
        return ((InternalEList<?>)getOptions()).basicRemove(otherEnd, msgs);
      case XSpicePackage.COMPILATION__IC:
        return ((InternalEList<?>)getIc()).basicRemove(otherEnd, msgs);
      case XSpicePackage.COMPILATION__NODESET:
        return ((InternalEList<?>)getNodeset()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.COMPILATION__DEFINITIONS:
        return getDefinitions();
      case XSpicePackage.COMPILATION__ENTITIES:
        return getEntities();
      case XSpicePackage.COMPILATION__SIMULATIONS:
        return getSimulations();
      case XSpicePackage.COMPILATION__OUTPUTS:
        return getOutputs();
      case XSpicePackage.COMPILATION__OPTIONS:
        return getOptions();
      case XSpicePackage.COMPILATION__IC:
        return getIc();
      case XSpicePackage.COMPILATION__NODESET:
        return getNodeset();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.COMPILATION__DEFINITIONS:
        getDefinitions().clear();
        getDefinitions().addAll((Collection<? extends SubCircuitDefinition>)newValue);
        return;
      case XSpicePackage.COMPILATION__ENTITIES:
        getEntities().clear();
        getEntities().addAll((Collection<? extends Entity>)newValue);
        return;
      case XSpicePackage.COMPILATION__SIMULATIONS:
        getSimulations().clear();
        getSimulations().addAll((Collection<? extends Simulation>)newValue);
        return;
      case XSpicePackage.COMPILATION__OUTPUTS:
        getOutputs().clear();
        getOutputs().addAll((Collection<? extends Output>)newValue);
        return;
      case XSpicePackage.COMPILATION__OPTIONS:
        getOptions().clear();
        getOptions().addAll((Collection<? extends Options>)newValue);
        return;
      case XSpicePackage.COMPILATION__IC:
        getIc().clear();
        getIc().addAll((Collection<? extends InitialCondition>)newValue);
        return;
      case XSpicePackage.COMPILATION__NODESET:
        getNodeset().clear();
        getNodeset().addAll((Collection<? extends NodeSet>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.COMPILATION__DEFINITIONS:
        getDefinitions().clear();
        return;
      case XSpicePackage.COMPILATION__ENTITIES:
        getEntities().clear();
        return;
      case XSpicePackage.COMPILATION__SIMULATIONS:
        getSimulations().clear();
        return;
      case XSpicePackage.COMPILATION__OUTPUTS:
        getOutputs().clear();
        return;
      case XSpicePackage.COMPILATION__OPTIONS:
        getOptions().clear();
        return;
      case XSpicePackage.COMPILATION__IC:
        getIc().clear();
        return;
      case XSpicePackage.COMPILATION__NODESET:
        getNodeset().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.COMPILATION__DEFINITIONS:
        return definitions != null && !definitions.isEmpty();
      case XSpicePackage.COMPILATION__ENTITIES:
        return entities != null && !entities.isEmpty();
      case XSpicePackage.COMPILATION__SIMULATIONS:
        return simulations != null && !simulations.isEmpty();
      case XSpicePackage.COMPILATION__OUTPUTS:
        return outputs != null && !outputs.isEmpty();
      case XSpicePackage.COMPILATION__OPTIONS:
        return options != null && !options.isEmpty();
      case XSpicePackage.COMPILATION__IC:
        return ic != null && !ic.isEmpty();
      case XSpicePackage.COMPILATION__NODESET:
        return nodeset != null && !nodeset.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CompilationImpl
