/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XSpiceFactoryImpl extends EFactoryImpl implements XSpiceFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XSpiceFactory init()
  {
    try
    {
      XSpiceFactory theXSpiceFactory = (XSpiceFactory)EPackage.Registry.INSTANCE.getEFactory(XSpicePackage.eNS_URI);
      if (theXSpiceFactory != null)
      {
        return theXSpiceFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XSpiceFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XSpiceFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XSpicePackage.COMPILATION: return createCompilation();
      case XSpicePackage.ENTITY: return createEntity();
      case XSpicePackage.COMPONENT: return createComponent();
      case XSpicePackage.SUB_CIRCUIT_DEFINITION: return createSubCircuitDefinition();
      case XSpicePackage.SUB_CIRCUIT: return createSubCircuit();
      case XSpicePackage.RESISTOR: return createResistor();
      case XSpicePackage.RESISTOR_MODEL: return createResistorModel();
      case XSpicePackage.CAPACITOR: return createCapacitor();
      case XSpicePackage.CAPACITOR_MODEL: return createCapacitorModel();
      case XSpicePackage.INDUCTOR: return createInductor();
      case XSpicePackage.MUTUAL_INDUCTANCE: return createMutualInductance();
      case XSpicePackage.VOLTAGE_SWITCH: return createVoltageSwitch();
      case XSpicePackage.VOLTAGE_SWITCH_MODEL: return createVoltageSwitchModel();
      case XSpicePackage.CURRENT_SWITCH: return createCurrentSwitch();
      case XSpicePackage.CURRENT_SWITCH_MODEL: return createCurrentSwitchModel();
      case XSpicePackage.DIODE: return createDiode();
      case XSpicePackage.DIODE_MODEL: return createDiodeModel();
      case XSpicePackage.MOSFET: return createMOSFET();
      case XSpicePackage.MOSFET_MODEL: return createMOSFETModel();
      case XSpicePackage.BJT: return createBJT();
      case XSpicePackage.BJT_MODEL: return createBJTModel();
      case XSpicePackage.JFET: return createJFET();
      case XSpicePackage.JFET_MODEL: return createJFETModel();
      case XSpicePackage.VSOURCE: return createVSource();
      case XSpicePackage.CURRENT_SOURCE: return createCurrentSource();
      case XSpicePackage.VCVS: return createVCVS();
      case XSpicePackage.VCCS: return createVCCS();
      case XSpicePackage.CCCS: return createCCCS();
      case XSpicePackage.CCVS: return createCCVS();
      case XSpicePackage.GEOMETERIC_SWEEP: return createGeometericSweep();
      case XSpicePackage.LINEAR_SWEEP: return createLinearSweep();
      case XSpicePackage.OCTAVE_SWEEP: return createOctaveSweep();
      case XSpicePackage.DECADE_SWEEP: return createDecadeSweep();
      case XSpicePackage.PARAMETER_SWEEP: return createParameterSweep();
      case XSpicePackage.SIMULATION: return createSimulation();
      case XSpicePackage.AC_SIMULATION: return createACSimulation();
      case XSpicePackage.DC_SIMULATION: return createDCSimulation();
      case XSpicePackage.NOISE_SIMULATION: return createNoiseSimulation();
      case XSpicePackage.TRANSIENT_SIMULATION: return createTransientSimulation();
      case XSpicePackage.OUTPUT: return createOutput();
      case XSpicePackage.PRINT: return createPrint();
      case XSpicePackage.PLOT: return createPlot();
      case XSpicePackage.EXPORT: return createExport();
      case XSpicePackage.VOLTAGE_EXPORT: return createVoltageExport();
      case XSpicePackage.CURRENT_EXPORT: return createCurrentExport();
      case XSpicePackage.WAVEFORM: return createWaveform();
      case XSpicePackage.EXP: return createExp();
      case XSpicePackage.SINE: return createSine();
      case XSpicePackage.PULSE: return createPulse();
      case XSpicePackage.PWL: return createPWL();
      case XSpicePackage.SFFM: return createSFFM();
      case XSpicePackage.AM: return createAM();
      case XSpicePackage.OPTIONS: return createOptions();
      case XSpicePackage.NODE_SET: return createNodeSet();
      case XSpicePackage.INITIAL_CONDITION: return createInitialCondition();
      case XSpicePackage.NODE_SET_ENTRY: return createNodeSetEntry();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XSpicePackage.PRTYPE:
        return createPRTYPEFromString(eDataType, initialValue);
      case XSpicePackage.INTEGRATION_METHOD:
        return createIntegrationMethodFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XSpicePackage.PRTYPE:
        return convertPRTYPEToString(eDataType, instanceValue);
      case XSpicePackage.INTEGRATION_METHOD:
        return convertIntegrationMethodToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Compilation createCompilation()
  {
    CompilationImpl compilation = new CompilationImpl();
    return compilation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubCircuitDefinition createSubCircuitDefinition()
  {
    SubCircuitDefinitionImpl subCircuitDefinition = new SubCircuitDefinitionImpl();
    return subCircuitDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubCircuit createSubCircuit()
  {
    SubCircuitImpl subCircuit = new SubCircuitImpl();
    return subCircuit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Resistor createResistor()
  {
    ResistorImpl resistor = new ResistorImpl();
    return resistor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResistorModel createResistorModel()
  {
    ResistorModelImpl resistorModel = new ResistorModelImpl();
    return resistorModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Capacitor createCapacitor()
  {
    CapacitorImpl capacitor = new CapacitorImpl();
    return capacitor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CapacitorModel createCapacitorModel()
  {
    CapacitorModelImpl capacitorModel = new CapacitorModelImpl();
    return capacitorModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Inductor createInductor()
  {
    InductorImpl inductor = new InductorImpl();
    return inductor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MutualInductance createMutualInductance()
  {
    MutualInductanceImpl mutualInductance = new MutualInductanceImpl();
    return mutualInductance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoltageSwitch createVoltageSwitch()
  {
    VoltageSwitchImpl voltageSwitch = new VoltageSwitchImpl();
    return voltageSwitch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoltageSwitchModel createVoltageSwitchModel()
  {
    VoltageSwitchModelImpl voltageSwitchModel = new VoltageSwitchModelImpl();
    return voltageSwitchModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CurrentSwitch createCurrentSwitch()
  {
    CurrentSwitchImpl currentSwitch = new CurrentSwitchImpl();
    return currentSwitch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CurrentSwitchModel createCurrentSwitchModel()
  {
    CurrentSwitchModelImpl currentSwitchModel = new CurrentSwitchModelImpl();
    return currentSwitchModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Diode createDiode()
  {
    DiodeImpl diode = new DiodeImpl();
    return diode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DiodeModel createDiodeModel()
  {
    DiodeModelImpl diodeModel = new DiodeModelImpl();
    return diodeModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MOSFET createMOSFET()
  {
    MOSFETImpl mosfet = new MOSFETImpl();
    return mosfet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MOSFETModel createMOSFETModel()
  {
    MOSFETModelImpl mosfetModel = new MOSFETModelImpl();
    return mosfetModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BJT createBJT()
  {
    BJTImpl bjt = new BJTImpl();
    return bjt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BJTModel createBJTModel()
  {
    BJTModelImpl bjtModel = new BJTModelImpl();
    return bjtModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JFET createJFET()
  {
    JFETImpl jfet = new JFETImpl();
    return jfet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JFETModel createJFETModel()
  {
    JFETModelImpl jfetModel = new JFETModelImpl();
    return jfetModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VSource createVSource()
  {
    VSourceImpl vSource = new VSourceImpl();
    return vSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CurrentSource createCurrentSource()
  {
    CurrentSourceImpl currentSource = new CurrentSourceImpl();
    return currentSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VCVS createVCVS()
  {
    VCVSImpl vcvs = new VCVSImpl();
    return vcvs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VCCS createVCCS()
  {
    VCCSImpl vccs = new VCCSImpl();
    return vccs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CCCS createCCCS()
  {
    CCCSImpl cccs = new CCCSImpl();
    return cccs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CCVS createCCVS()
  {
    CCVSImpl ccvs = new CCVSImpl();
    return ccvs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeometericSweep createGeometericSweep()
  {
    GeometericSweepImpl geometericSweep = new GeometericSweepImpl();
    return geometericSweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LinearSweep createLinearSweep()
  {
    LinearSweepImpl linearSweep = new LinearSweepImpl();
    return linearSweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OctaveSweep createOctaveSweep()
  {
    OctaveSweepImpl octaveSweep = new OctaveSweepImpl();
    return octaveSweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecadeSweep createDecadeSweep()
  {
    DecadeSweepImpl decadeSweep = new DecadeSweepImpl();
    return decadeSweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterSweep createParameterSweep()
  {
    ParameterSweepImpl parameterSweep = new ParameterSweepImpl();
    return parameterSweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Simulation createSimulation()
  {
    SimulationImpl simulation = new SimulationImpl();
    return simulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ACSimulation createACSimulation()
  {
    ACSimulationImpl acSimulation = new ACSimulationImpl();
    return acSimulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DCSimulation createDCSimulation()
  {
    DCSimulationImpl dcSimulation = new DCSimulationImpl();
    return dcSimulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NoiseSimulation createNoiseSimulation()
  {
    NoiseSimulationImpl noiseSimulation = new NoiseSimulationImpl();
    return noiseSimulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransientSimulation createTransientSimulation()
  {
    TransientSimulationImpl transientSimulation = new TransientSimulationImpl();
    return transientSimulation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plot createPlot()
  {
    PlotImpl plot = new PlotImpl();
    return plot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Export createExport()
  {
    ExportImpl export = new ExportImpl();
    return export;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VoltageExport createVoltageExport()
  {
    VoltageExportImpl voltageExport = new VoltageExportImpl();
    return voltageExport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CurrentExport createCurrentExport()
  {
    CurrentExportImpl currentExport = new CurrentExportImpl();
    return currentExport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Waveform createWaveform()
  {
    WaveformImpl waveform = new WaveformImpl();
    return waveform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sine createSine()
  {
    SineImpl sine = new SineImpl();
    return sine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pulse createPulse()
  {
    PulseImpl pulse = new PulseImpl();
    return pulse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PWL createPWL()
  {
    PWLImpl pwl = new PWLImpl();
    return pwl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SFFM createSFFM()
  {
    SFFMImpl sffm = new SFFMImpl();
    return sffm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AM createAM()
  {
    AMImpl am = new AMImpl();
    return am;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Options createOptions()
  {
    OptionsImpl options = new OptionsImpl();
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeSet createNodeSet()
  {
    NodeSetImpl nodeSet = new NodeSetImpl();
    return nodeSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialCondition createInitialCondition()
  {
    InitialConditionImpl initialCondition = new InitialConditionImpl();
    return initialCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeSetEntry createNodeSetEntry()
  {
    NodeSetEntryImpl nodeSetEntry = new NodeSetEntryImpl();
    return nodeSetEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PRTYPE createPRTYPEFromString(EDataType eDataType, String initialValue)
  {
    PRTYPE result = PRTYPE.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPRTYPEToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegrationMethod createIntegrationMethodFromString(EDataType eDataType, String initialValue)
  {
    IntegrationMethod result = IntegrationMethod.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIntegrationMethodToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSpicePackage getXSpicePackage()
  {
    return (XSpicePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XSpicePackage getPackage()
  {
    return XSpicePackage.eINSTANCE;
  }

} //XSpiceFactoryImpl
