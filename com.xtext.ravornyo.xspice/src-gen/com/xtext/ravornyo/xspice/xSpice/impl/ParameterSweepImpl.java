/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.GeometericSweep;
import com.xtext.ravornyo.xspice.xSpice.ParameterSweep;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parameter Sweep</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.ParameterSweepImpl#getSource <em>Source</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.ParameterSweepImpl#getSweep <em>Sweep</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParameterSweepImpl extends MinimalEObjectImpl.Container implements ParameterSweep
{
  /**
   * The default value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected static final String SOURCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected String source = SOURCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSweep() <em>Sweep</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSweep()
   * @generated
   * @ordered
   */
  protected GeometericSweep sweep;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterSweepImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.PARAMETER_SWEEP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(String newSource)
  {
    String oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.PARAMETER_SWEEP__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeometericSweep getSweep()
  {
    return sweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSweep(GeometericSweep newSweep, NotificationChain msgs)
  {
    GeometericSweep oldSweep = sweep;
    sweep = newSweep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XSpicePackage.PARAMETER_SWEEP__SWEEP, oldSweep, newSweep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSweep(GeometericSweep newSweep)
  {
    if (newSweep != sweep)
    {
      NotificationChain msgs = null;
      if (sweep != null)
        msgs = ((InternalEObject)sweep).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XSpicePackage.PARAMETER_SWEEP__SWEEP, null, msgs);
      if (newSweep != null)
        msgs = ((InternalEObject)newSweep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XSpicePackage.PARAMETER_SWEEP__SWEEP, null, msgs);
      msgs = basicSetSweep(newSweep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.PARAMETER_SWEEP__SWEEP, newSweep, newSweep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XSpicePackage.PARAMETER_SWEEP__SWEEP:
        return basicSetSweep(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.PARAMETER_SWEEP__SOURCE:
        return getSource();
      case XSpicePackage.PARAMETER_SWEEP__SWEEP:
        return getSweep();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.PARAMETER_SWEEP__SOURCE:
        setSource((String)newValue);
        return;
      case XSpicePackage.PARAMETER_SWEEP__SWEEP:
        setSweep((GeometericSweep)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.PARAMETER_SWEEP__SOURCE:
        setSource(SOURCE_EDEFAULT);
        return;
      case XSpicePackage.PARAMETER_SWEEP__SWEEP:
        setSweep((GeometericSweep)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.PARAMETER_SWEEP__SOURCE:
        return SOURCE_EDEFAULT == null ? source != null : !SOURCE_EDEFAULT.equals(source);
      case XSpicePackage.PARAMETER_SWEEP__SWEEP:
        return sweep != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (source: ");
    result.append(source);
    result.append(')');
    return result.toString();
  }

} //ParameterSweepImpl
