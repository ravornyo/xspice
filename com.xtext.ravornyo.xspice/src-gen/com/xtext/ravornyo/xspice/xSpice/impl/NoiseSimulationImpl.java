/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.Export;
import com.xtext.ravornyo.xspice.xSpice.GeometericSweep;
import com.xtext.ravornyo.xspice.xSpice.NoiseSimulation;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Noise Simulation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.NoiseSimulationImpl#getOutput <em>Output</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.NoiseSimulationImpl#getInputSource <em>Input Source</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.NoiseSimulationImpl#getIsweep <em>Isweep</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NoiseSimulationImpl extends SimulationImpl implements NoiseSimulation
{
  /**
   * The cached value of the '{@link #getOutput() <em>Output</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected EList<Export> output;

  /**
   * The default value of the '{@link #getInputSource() <em>Input Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputSource()
   * @generated
   * @ordered
   */
  protected static final String INPUT_SOURCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInputSource() <em>Input Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputSource()
   * @generated
   * @ordered
   */
  protected String inputSource = INPUT_SOURCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getIsweep() <em>Isweep</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsweep()
   * @generated
   * @ordered
   */
  protected GeometericSweep isweep;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NoiseSimulationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.NOISE_SIMULATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Export> getOutput()
  {
    if (output == null)
    {
      output = new EObjectContainmentEList<Export>(Export.class, this, XSpicePackage.NOISE_SIMULATION__OUTPUT);
    }
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInputSource()
  {
    return inputSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInputSource(String newInputSource)
  {
    String oldInputSource = inputSource;
    inputSource = newInputSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.NOISE_SIMULATION__INPUT_SOURCE, oldInputSource, inputSource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeometericSweep getIsweep()
  {
    return isweep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIsweep(GeometericSweep newIsweep, NotificationChain msgs)
  {
    GeometericSweep oldIsweep = isweep;
    isweep = newIsweep;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XSpicePackage.NOISE_SIMULATION__ISWEEP, oldIsweep, newIsweep);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsweep(GeometericSweep newIsweep)
  {
    if (newIsweep != isweep)
    {
      NotificationChain msgs = null;
      if (isweep != null)
        msgs = ((InternalEObject)isweep).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XSpicePackage.NOISE_SIMULATION__ISWEEP, null, msgs);
      if (newIsweep != null)
        msgs = ((InternalEObject)newIsweep).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XSpicePackage.NOISE_SIMULATION__ISWEEP, null, msgs);
      msgs = basicSetIsweep(newIsweep, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.NOISE_SIMULATION__ISWEEP, newIsweep, newIsweep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XSpicePackage.NOISE_SIMULATION__OUTPUT:
        return ((InternalEList<?>)getOutput()).basicRemove(otherEnd, msgs);
      case XSpicePackage.NOISE_SIMULATION__ISWEEP:
        return basicSetIsweep(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.NOISE_SIMULATION__OUTPUT:
        return getOutput();
      case XSpicePackage.NOISE_SIMULATION__INPUT_SOURCE:
        return getInputSource();
      case XSpicePackage.NOISE_SIMULATION__ISWEEP:
        return getIsweep();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.NOISE_SIMULATION__OUTPUT:
        getOutput().clear();
        getOutput().addAll((Collection<? extends Export>)newValue);
        return;
      case XSpicePackage.NOISE_SIMULATION__INPUT_SOURCE:
        setInputSource((String)newValue);
        return;
      case XSpicePackage.NOISE_SIMULATION__ISWEEP:
        setIsweep((GeometericSweep)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.NOISE_SIMULATION__OUTPUT:
        getOutput().clear();
        return;
      case XSpicePackage.NOISE_SIMULATION__INPUT_SOURCE:
        setInputSource(INPUT_SOURCE_EDEFAULT);
        return;
      case XSpicePackage.NOISE_SIMULATION__ISWEEP:
        setIsweep((GeometericSweep)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.NOISE_SIMULATION__OUTPUT:
        return output != null && !output.isEmpty();
      case XSpicePackage.NOISE_SIMULATION__INPUT_SOURCE:
        return INPUT_SOURCE_EDEFAULT == null ? inputSource != null : !INPUT_SOURCE_EDEFAULT.equals(inputSource);
      case XSpicePackage.NOISE_SIMULATION__ISWEEP:
        return isweep != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inputSource: ");
    result.append(inputSource);
    result.append(')');
    return result.toString();
  }

} //NoiseSimulationImpl
