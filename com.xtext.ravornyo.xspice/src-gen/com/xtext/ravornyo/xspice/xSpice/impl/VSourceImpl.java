/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.VSource;
import com.xtext.ravornyo.xspice.xSpice.Waveform;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>VSource</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.VSourceImpl#getDc <em>Dc</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.VSourceImpl#getAc <em>Ac</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.VSourceImpl#getWaveform <em>Waveform</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VSourceImpl extends ComponentImpl implements VSource
{
  /**
   * The default value of the '{@link #getDc() <em>Dc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDc()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDc() <em>Dc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDc()
   * @generated
   * @ordered
   */
  protected BigDecimal dc = DC_EDEFAULT;

  /**
   * The cached value of the '{@link #getAc() <em>Ac</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAc()
   * @generated
   * @ordered
   */
  protected EList<BigDecimal> ac;

  /**
   * The cached value of the '{@link #getWaveform() <em>Waveform</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWaveform()
   * @generated
   * @ordered
   */
  protected Waveform waveform;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VSourceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.VSOURCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDc()
  {
    return dc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDc(BigDecimal newDc)
  {
    BigDecimal oldDc = dc;
    dc = newDc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.VSOURCE__DC, oldDc, dc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BigDecimal> getAc()
  {
    if (ac == null)
    {
      ac = new EDataTypeEList<BigDecimal>(BigDecimal.class, this, XSpicePackage.VSOURCE__AC);
    }
    return ac;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Waveform getWaveform()
  {
    return waveform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWaveform(Waveform newWaveform, NotificationChain msgs)
  {
    Waveform oldWaveform = waveform;
    waveform = newWaveform;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XSpicePackage.VSOURCE__WAVEFORM, oldWaveform, newWaveform);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWaveform(Waveform newWaveform)
  {
    if (newWaveform != waveform)
    {
      NotificationChain msgs = null;
      if (waveform != null)
        msgs = ((InternalEObject)waveform).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XSpicePackage.VSOURCE__WAVEFORM, null, msgs);
      if (newWaveform != null)
        msgs = ((InternalEObject)newWaveform).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XSpicePackage.VSOURCE__WAVEFORM, null, msgs);
      msgs = basicSetWaveform(newWaveform, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.VSOURCE__WAVEFORM, newWaveform, newWaveform));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XSpicePackage.VSOURCE__WAVEFORM:
        return basicSetWaveform(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.VSOURCE__DC:
        return getDc();
      case XSpicePackage.VSOURCE__AC:
        return getAc();
      case XSpicePackage.VSOURCE__WAVEFORM:
        return getWaveform();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.VSOURCE__DC:
        setDc((BigDecimal)newValue);
        return;
      case XSpicePackage.VSOURCE__AC:
        getAc().clear();
        getAc().addAll((Collection<? extends BigDecimal>)newValue);
        return;
      case XSpicePackage.VSOURCE__WAVEFORM:
        setWaveform((Waveform)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.VSOURCE__DC:
        setDc(DC_EDEFAULT);
        return;
      case XSpicePackage.VSOURCE__AC:
        getAc().clear();
        return;
      case XSpicePackage.VSOURCE__WAVEFORM:
        setWaveform((Waveform)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.VSOURCE__DC:
        return DC_EDEFAULT == null ? dc != null : !DC_EDEFAULT.equals(dc);
      case XSpicePackage.VSOURCE__AC:
        return ac != null && !ac.isEmpty();
      case XSpicePackage.VSOURCE__WAVEFORM:
        return waveform != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dc: ");
    result.append(dc);
    result.append(", ac: ");
    result.append(ac);
    result.append(')');
    return result.toString();
  }

} //VSourceImpl
