/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.JFETModel;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>JFET Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getThreshold <em>Threshold</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getBeta <em>Beta</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getLambda <em>Lambda</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getDrainResistance <em>Drain Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getSourceResistance <em>Source Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getCapGs <em>Cap Gs</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getCapGd <em>Cap Gd</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getGatePotential <em>Gate Potential</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getGateSaturationCurrent <em>Gate Saturation Current</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getB <em>B</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getFlickerNoiseCoefficient <em>Flicker Noise Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getFlickerNoiseExponent <em>Flicker Noise Exponent</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getDepletionCapCoefficient <em>Depletion Cap Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.JFETModelImpl#getNominalTemperature <em>Nominal Temperature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JFETModelImpl extends EntityImpl implements JFETModel
{
  /**
   * The default value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThreshold()
   * @generated
   * @ordered
   */
  protected static final BigDecimal THRESHOLD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThreshold()
   * @generated
   * @ordered
   */
  protected BigDecimal threshold = THRESHOLD_EDEFAULT;

  /**
   * The default value of the '{@link #getBeta() <em>Beta</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeta()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BETA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBeta() <em>Beta</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeta()
   * @generated
   * @ordered
   */
  protected BigDecimal beta = BETA_EDEFAULT;

  /**
   * The default value of the '{@link #getLambda() <em>Lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLambda()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LAMBDA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLambda() <em>Lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLambda()
   * @generated
   * @ordered
   */
  protected BigDecimal lambda = LAMBDA_EDEFAULT;

  /**
   * The default value of the '{@link #getDrainResistance() <em>Drain Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrainResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DRAIN_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDrainResistance() <em>Drain Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrainResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal drainResistance = DRAIN_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getSourceResistance() <em>Source Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SOURCE_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSourceResistance() <em>Source Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal sourceResistance = SOURCE_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getCapGs() <em>Cap Gs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapGs()
   * @generated
   * @ordered
   */
  protected static final BigDecimal CAP_GS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCapGs() <em>Cap Gs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapGs()
   * @generated
   * @ordered
   */
  protected BigDecimal capGs = CAP_GS_EDEFAULT;

  /**
   * The default value of the '{@link #getCapGd() <em>Cap Gd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapGd()
   * @generated
   * @ordered
   */
  protected static final BigDecimal CAP_GD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCapGd() <em>Cap Gd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapGd()
   * @generated
   * @ordered
   */
  protected BigDecimal capGd = CAP_GD_EDEFAULT;

  /**
   * The default value of the '{@link #getGatePotential() <em>Gate Potential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGatePotential()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GATE_POTENTIAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGatePotential() <em>Gate Potential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGatePotential()
   * @generated
   * @ordered
   */
  protected BigDecimal gatePotential = GATE_POTENTIAL_EDEFAULT;

  /**
   * The default value of the '{@link #getGateSaturationCurrent() <em>Gate Saturation Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateSaturationCurrent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GATE_SATURATION_CURRENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGateSaturationCurrent() <em>Gate Saturation Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateSaturationCurrent()
   * @generated
   * @ordered
   */
  protected BigDecimal gateSaturationCurrent = GATE_SATURATION_CURRENT_EDEFAULT;

  /**
   * The default value of the '{@link #getB() <em>B</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getB()
   * @generated
   * @ordered
   */
  protected static final BigDecimal B_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getB() <em>B</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getB()
   * @generated
   * @ordered
   */
  protected BigDecimal b = B_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseCoefficient = FLICKER_NOISE_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_EXPONENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseExponent = FLICKER_NOISE_EXPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getDepletionCapCoefficient() <em>Depletion Cap Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DEPLETION_CAP_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDepletionCapCoefficient() <em>Depletion Cap Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal depletionCapCoefficient = DEPLETION_CAP_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NOMINAL_TEMPERATURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected BigDecimal nominalTemperature = NOMINAL_TEMPERATURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JFETModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.JFET_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getThreshold()
  {
    return threshold;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThreshold(BigDecimal newThreshold)
  {
    BigDecimal oldThreshold = threshold;
    threshold = newThreshold;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__THRESHOLD, oldThreshold, threshold));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBeta()
  {
    return beta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBeta(BigDecimal newBeta)
  {
    BigDecimal oldBeta = beta;
    beta = newBeta;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__BETA, oldBeta, beta));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLambda()
  {
    return lambda;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLambda(BigDecimal newLambda)
  {
    BigDecimal oldLambda = lambda;
    lambda = newLambda;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__LAMBDA, oldLambda, lambda));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDrainResistance()
  {
    return drainResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDrainResistance(BigDecimal newDrainResistance)
  {
    BigDecimal oldDrainResistance = drainResistance;
    drainResistance = newDrainResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__DRAIN_RESISTANCE, oldDrainResistance, drainResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSourceResistance()
  {
    return sourceResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSourceResistance(BigDecimal newSourceResistance)
  {
    BigDecimal oldSourceResistance = sourceResistance;
    sourceResistance = newSourceResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__SOURCE_RESISTANCE, oldSourceResistance, sourceResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getCapGs()
  {
    return capGs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapGs(BigDecimal newCapGs)
  {
    BigDecimal oldCapGs = capGs;
    capGs = newCapGs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__CAP_GS, oldCapGs, capGs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getCapGd()
  {
    return capGd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapGd(BigDecimal newCapGd)
  {
    BigDecimal oldCapGd = capGd;
    capGd = newCapGd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__CAP_GD, oldCapGd, capGd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGatePotential()
  {
    return gatePotential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGatePotential(BigDecimal newGatePotential)
  {
    BigDecimal oldGatePotential = gatePotential;
    gatePotential = newGatePotential;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__GATE_POTENTIAL, oldGatePotential, gatePotential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGateSaturationCurrent()
  {
    return gateSaturationCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateSaturationCurrent(BigDecimal newGateSaturationCurrent)
  {
    BigDecimal oldGateSaturationCurrent = gateSaturationCurrent;
    gateSaturationCurrent = newGateSaturationCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__GATE_SATURATION_CURRENT, oldGateSaturationCurrent, gateSaturationCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getB()
  {
    return b;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setB(BigDecimal newB)
  {
    BigDecimal oldB = b;
    b = newB;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__B, oldB, b));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseCoefficient()
  {
    return flickerNoiseCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseCoefficient(BigDecimal newFlickerNoiseCoefficient)
  {
    BigDecimal oldFlickerNoiseCoefficient = flickerNoiseCoefficient;
    flickerNoiseCoefficient = newFlickerNoiseCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__FLICKER_NOISE_COEFFICIENT, oldFlickerNoiseCoefficient, flickerNoiseCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseExponent()
  {
    return flickerNoiseExponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseExponent(BigDecimal newFlickerNoiseExponent)
  {
    BigDecimal oldFlickerNoiseExponent = flickerNoiseExponent;
    flickerNoiseExponent = newFlickerNoiseExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__FLICKER_NOISE_EXPONENT, oldFlickerNoiseExponent, flickerNoiseExponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDepletionCapCoefficient()
  {
    return depletionCapCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDepletionCapCoefficient(BigDecimal newDepletionCapCoefficient)
  {
    BigDecimal oldDepletionCapCoefficient = depletionCapCoefficient;
    depletionCapCoefficient = newDepletionCapCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__DEPLETION_CAP_COEFFICIENT, oldDepletionCapCoefficient, depletionCapCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNominalTemperature()
  {
    return nominalTemperature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNominalTemperature(BigDecimal newNominalTemperature)
  {
    BigDecimal oldNominalTemperature = nominalTemperature;
    nominalTemperature = newNominalTemperature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.JFET_MODEL__NOMINAL_TEMPERATURE, oldNominalTemperature, nominalTemperature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.JFET_MODEL__THRESHOLD:
        return getThreshold();
      case XSpicePackage.JFET_MODEL__BETA:
        return getBeta();
      case XSpicePackage.JFET_MODEL__LAMBDA:
        return getLambda();
      case XSpicePackage.JFET_MODEL__DRAIN_RESISTANCE:
        return getDrainResistance();
      case XSpicePackage.JFET_MODEL__SOURCE_RESISTANCE:
        return getSourceResistance();
      case XSpicePackage.JFET_MODEL__CAP_GS:
        return getCapGs();
      case XSpicePackage.JFET_MODEL__CAP_GD:
        return getCapGd();
      case XSpicePackage.JFET_MODEL__GATE_POTENTIAL:
        return getGatePotential();
      case XSpicePackage.JFET_MODEL__GATE_SATURATION_CURRENT:
        return getGateSaturationCurrent();
      case XSpicePackage.JFET_MODEL__B:
        return getB();
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        return getFlickerNoiseCoefficient();
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_EXPONENT:
        return getFlickerNoiseExponent();
      case XSpicePackage.JFET_MODEL__DEPLETION_CAP_COEFFICIENT:
        return getDepletionCapCoefficient();
      case XSpicePackage.JFET_MODEL__NOMINAL_TEMPERATURE:
        return getNominalTemperature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.JFET_MODEL__THRESHOLD:
        setThreshold((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__BETA:
        setBeta((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__LAMBDA:
        setLambda((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__DRAIN_RESISTANCE:
        setDrainResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__SOURCE_RESISTANCE:
        setSourceResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__CAP_GS:
        setCapGs((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__CAP_GD:
        setCapGd((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__GATE_POTENTIAL:
        setGatePotential((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__GATE_SATURATION_CURRENT:
        setGateSaturationCurrent((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__B:
        setB((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__DEPLETION_CAP_COEFFICIENT:
        setDepletionCapCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.JFET_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.JFET_MODEL__THRESHOLD:
        setThreshold(THRESHOLD_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__BETA:
        setBeta(BETA_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__LAMBDA:
        setLambda(LAMBDA_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__DRAIN_RESISTANCE:
        setDrainResistance(DRAIN_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__SOURCE_RESISTANCE:
        setSourceResistance(SOURCE_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__CAP_GS:
        setCapGs(CAP_GS_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__CAP_GD:
        setCapGd(CAP_GD_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__GATE_POTENTIAL:
        setGatePotential(GATE_POTENTIAL_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__GATE_SATURATION_CURRENT:
        setGateSaturationCurrent(GATE_SATURATION_CURRENT_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__B:
        setB(B_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient(FLICKER_NOISE_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent(FLICKER_NOISE_EXPONENT_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__DEPLETION_CAP_COEFFICIENT:
        setDepletionCapCoefficient(DEPLETION_CAP_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.JFET_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature(NOMINAL_TEMPERATURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.JFET_MODEL__THRESHOLD:
        return THRESHOLD_EDEFAULT == null ? threshold != null : !THRESHOLD_EDEFAULT.equals(threshold);
      case XSpicePackage.JFET_MODEL__BETA:
        return BETA_EDEFAULT == null ? beta != null : !BETA_EDEFAULT.equals(beta);
      case XSpicePackage.JFET_MODEL__LAMBDA:
        return LAMBDA_EDEFAULT == null ? lambda != null : !LAMBDA_EDEFAULT.equals(lambda);
      case XSpicePackage.JFET_MODEL__DRAIN_RESISTANCE:
        return DRAIN_RESISTANCE_EDEFAULT == null ? drainResistance != null : !DRAIN_RESISTANCE_EDEFAULT.equals(drainResistance);
      case XSpicePackage.JFET_MODEL__SOURCE_RESISTANCE:
        return SOURCE_RESISTANCE_EDEFAULT == null ? sourceResistance != null : !SOURCE_RESISTANCE_EDEFAULT.equals(sourceResistance);
      case XSpicePackage.JFET_MODEL__CAP_GS:
        return CAP_GS_EDEFAULT == null ? capGs != null : !CAP_GS_EDEFAULT.equals(capGs);
      case XSpicePackage.JFET_MODEL__CAP_GD:
        return CAP_GD_EDEFAULT == null ? capGd != null : !CAP_GD_EDEFAULT.equals(capGd);
      case XSpicePackage.JFET_MODEL__GATE_POTENTIAL:
        return GATE_POTENTIAL_EDEFAULT == null ? gatePotential != null : !GATE_POTENTIAL_EDEFAULT.equals(gatePotential);
      case XSpicePackage.JFET_MODEL__GATE_SATURATION_CURRENT:
        return GATE_SATURATION_CURRENT_EDEFAULT == null ? gateSaturationCurrent != null : !GATE_SATURATION_CURRENT_EDEFAULT.equals(gateSaturationCurrent);
      case XSpicePackage.JFET_MODEL__B:
        return B_EDEFAULT == null ? b != null : !B_EDEFAULT.equals(b);
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        return FLICKER_NOISE_COEFFICIENT_EDEFAULT == null ? flickerNoiseCoefficient != null : !FLICKER_NOISE_COEFFICIENT_EDEFAULT.equals(flickerNoiseCoefficient);
      case XSpicePackage.JFET_MODEL__FLICKER_NOISE_EXPONENT:
        return FLICKER_NOISE_EXPONENT_EDEFAULT == null ? flickerNoiseExponent != null : !FLICKER_NOISE_EXPONENT_EDEFAULT.equals(flickerNoiseExponent);
      case XSpicePackage.JFET_MODEL__DEPLETION_CAP_COEFFICIENT:
        return DEPLETION_CAP_COEFFICIENT_EDEFAULT == null ? depletionCapCoefficient != null : !DEPLETION_CAP_COEFFICIENT_EDEFAULT.equals(depletionCapCoefficient);
      case XSpicePackage.JFET_MODEL__NOMINAL_TEMPERATURE:
        return NOMINAL_TEMPERATURE_EDEFAULT == null ? nominalTemperature != null : !NOMINAL_TEMPERATURE_EDEFAULT.equals(nominalTemperature);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (threshold: ");
    result.append(threshold);
    result.append(", beta: ");
    result.append(beta);
    result.append(", lambda: ");
    result.append(lambda);
    result.append(", drainResistance: ");
    result.append(drainResistance);
    result.append(", sourceResistance: ");
    result.append(sourceResistance);
    result.append(", capGs: ");
    result.append(capGs);
    result.append(", capGd: ");
    result.append(capGd);
    result.append(", gatePotential: ");
    result.append(gatePotential);
    result.append(", gateSaturationCurrent: ");
    result.append(gateSaturationCurrent);
    result.append(", b: ");
    result.append(b);
    result.append(", flickerNoiseCoefficient: ");
    result.append(flickerNoiseCoefficient);
    result.append(", flickerNoiseExponent: ");
    result.append(flickerNoiseExponent);
    result.append(", depletionCapCoefficient: ");
    result.append(depletionCapCoefficient);
    result.append(", nominalTemperature: ");
    result.append(nominalTemperature);
    result.append(')');
    return result.toString();
  }

} //JFETModelImpl
