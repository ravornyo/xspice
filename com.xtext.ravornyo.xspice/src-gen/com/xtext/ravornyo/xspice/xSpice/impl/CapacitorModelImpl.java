/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.CapacitorModel;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Capacitor Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getJunctionCap <em>Junction Cap</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getJunctionCapSidewall <em>Junction Cap Sidewall</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getDefaultWidth <em>Default Width</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getNarrow <em>Narrow</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getTemperatureCoefficient1 <em>Temperature Coefficient1</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getTemperatureCoefficient2 <em>Temperature Coefficient2</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.CapacitorModelImpl#getNominalTemperature <em>Nominal Temperature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CapacitorModelImpl extends EntityImpl implements CapacitorModel
{
  /**
   * The default value of the '{@link #getJunctionCap() <em>Junction Cap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionCap()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_CAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionCap() <em>Junction Cap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionCap()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionCap = JUNCTION_CAP_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionCapSidewall() <em>Junction Cap Sidewall</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionCapSidewall()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_CAP_SIDEWALL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionCapSidewall() <em>Junction Cap Sidewall</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionCapSidewall()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionCapSidewall = JUNCTION_CAP_SIDEWALL_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultWidth() <em>Default Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultWidth()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DEFAULT_WIDTH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefaultWidth() <em>Default Width</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultWidth()
   * @generated
   * @ordered
   */
  protected BigDecimal defaultWidth = DEFAULT_WIDTH_EDEFAULT;

  /**
   * The default value of the '{@link #getNarrow() <em>Narrow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNarrow()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NARROW_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNarrow() <em>Narrow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNarrow()
   * @generated
   * @ordered
   */
  protected BigDecimal narrow = NARROW_EDEFAULT;

  /**
   * The default value of the '{@link #getTemperatureCoefficient1() <em>Temperature Coefficient1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemperatureCoefficient1()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TEMPERATURE_COEFFICIENT1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTemperatureCoefficient1() <em>Temperature Coefficient1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemperatureCoefficient1()
   * @generated
   * @ordered
   */
  protected BigDecimal temperatureCoefficient1 = TEMPERATURE_COEFFICIENT1_EDEFAULT;

  /**
   * The default value of the '{@link #getTemperatureCoefficient2() <em>Temperature Coefficient2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemperatureCoefficient2()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TEMPERATURE_COEFFICIENT2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTemperatureCoefficient2() <em>Temperature Coefficient2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemperatureCoefficient2()
   * @generated
   * @ordered
   */
  protected BigDecimal temperatureCoefficient2 = TEMPERATURE_COEFFICIENT2_EDEFAULT;

  /**
   * The default value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NOMINAL_TEMPERATURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected BigDecimal nominalTemperature = NOMINAL_TEMPERATURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CapacitorModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.CAPACITOR_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionCap()
  {
    return junctionCap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionCap(BigDecimal newJunctionCap)
  {
    BigDecimal oldJunctionCap = junctionCap;
    junctionCap = newJunctionCap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP, oldJunctionCap, junctionCap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionCapSidewall()
  {
    return junctionCapSidewall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionCapSidewall(BigDecimal newJunctionCapSidewall)
  {
    BigDecimal oldJunctionCapSidewall = junctionCapSidewall;
    junctionCapSidewall = newJunctionCapSidewall;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP_SIDEWALL, oldJunctionCapSidewall, junctionCapSidewall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDefaultWidth()
  {
    return defaultWidth;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultWidth(BigDecimal newDefaultWidth)
  {
    BigDecimal oldDefaultWidth = defaultWidth;
    defaultWidth = newDefaultWidth;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__DEFAULT_WIDTH, oldDefaultWidth, defaultWidth));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNarrow()
  {
    return narrow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNarrow(BigDecimal newNarrow)
  {
    BigDecimal oldNarrow = narrow;
    narrow = newNarrow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__NARROW, oldNarrow, narrow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTemperatureCoefficient1()
  {
    return temperatureCoefficient1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTemperatureCoefficient1(BigDecimal newTemperatureCoefficient1)
  {
    BigDecimal oldTemperatureCoefficient1 = temperatureCoefficient1;
    temperatureCoefficient1 = newTemperatureCoefficient1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT1, oldTemperatureCoefficient1, temperatureCoefficient1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTemperatureCoefficient2()
  {
    return temperatureCoefficient2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTemperatureCoefficient2(BigDecimal newTemperatureCoefficient2)
  {
    BigDecimal oldTemperatureCoefficient2 = temperatureCoefficient2;
    temperatureCoefficient2 = newTemperatureCoefficient2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT2, oldTemperatureCoefficient2, temperatureCoefficient2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNominalTemperature()
  {
    return nominalTemperature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNominalTemperature(BigDecimal newNominalTemperature)
  {
    BigDecimal oldNominalTemperature = nominalTemperature;
    nominalTemperature = newNominalTemperature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.CAPACITOR_MODEL__NOMINAL_TEMPERATURE, oldNominalTemperature, nominalTemperature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP:
        return getJunctionCap();
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP_SIDEWALL:
        return getJunctionCapSidewall();
      case XSpicePackage.CAPACITOR_MODEL__DEFAULT_WIDTH:
        return getDefaultWidth();
      case XSpicePackage.CAPACITOR_MODEL__NARROW:
        return getNarrow();
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT1:
        return getTemperatureCoefficient1();
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT2:
        return getTemperatureCoefficient2();
      case XSpicePackage.CAPACITOR_MODEL__NOMINAL_TEMPERATURE:
        return getNominalTemperature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP:
        setJunctionCap((BigDecimal)newValue);
        return;
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP_SIDEWALL:
        setJunctionCapSidewall((BigDecimal)newValue);
        return;
      case XSpicePackage.CAPACITOR_MODEL__DEFAULT_WIDTH:
        setDefaultWidth((BigDecimal)newValue);
        return;
      case XSpicePackage.CAPACITOR_MODEL__NARROW:
        setNarrow((BigDecimal)newValue);
        return;
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT1:
        setTemperatureCoefficient1((BigDecimal)newValue);
        return;
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT2:
        setTemperatureCoefficient2((BigDecimal)newValue);
        return;
      case XSpicePackage.CAPACITOR_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP:
        setJunctionCap(JUNCTION_CAP_EDEFAULT);
        return;
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP_SIDEWALL:
        setJunctionCapSidewall(JUNCTION_CAP_SIDEWALL_EDEFAULT);
        return;
      case XSpicePackage.CAPACITOR_MODEL__DEFAULT_WIDTH:
        setDefaultWidth(DEFAULT_WIDTH_EDEFAULT);
        return;
      case XSpicePackage.CAPACITOR_MODEL__NARROW:
        setNarrow(NARROW_EDEFAULT);
        return;
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT1:
        setTemperatureCoefficient1(TEMPERATURE_COEFFICIENT1_EDEFAULT);
        return;
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT2:
        setTemperatureCoefficient2(TEMPERATURE_COEFFICIENT2_EDEFAULT);
        return;
      case XSpicePackage.CAPACITOR_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature(NOMINAL_TEMPERATURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP:
        return JUNCTION_CAP_EDEFAULT == null ? junctionCap != null : !JUNCTION_CAP_EDEFAULT.equals(junctionCap);
      case XSpicePackage.CAPACITOR_MODEL__JUNCTION_CAP_SIDEWALL:
        return JUNCTION_CAP_SIDEWALL_EDEFAULT == null ? junctionCapSidewall != null : !JUNCTION_CAP_SIDEWALL_EDEFAULT.equals(junctionCapSidewall);
      case XSpicePackage.CAPACITOR_MODEL__DEFAULT_WIDTH:
        return DEFAULT_WIDTH_EDEFAULT == null ? defaultWidth != null : !DEFAULT_WIDTH_EDEFAULT.equals(defaultWidth);
      case XSpicePackage.CAPACITOR_MODEL__NARROW:
        return NARROW_EDEFAULT == null ? narrow != null : !NARROW_EDEFAULT.equals(narrow);
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT1:
        return TEMPERATURE_COEFFICIENT1_EDEFAULT == null ? temperatureCoefficient1 != null : !TEMPERATURE_COEFFICIENT1_EDEFAULT.equals(temperatureCoefficient1);
      case XSpicePackage.CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT2:
        return TEMPERATURE_COEFFICIENT2_EDEFAULT == null ? temperatureCoefficient2 != null : !TEMPERATURE_COEFFICIENT2_EDEFAULT.equals(temperatureCoefficient2);
      case XSpicePackage.CAPACITOR_MODEL__NOMINAL_TEMPERATURE:
        return NOMINAL_TEMPERATURE_EDEFAULT == null ? nominalTemperature != null : !NOMINAL_TEMPERATURE_EDEFAULT.equals(nominalTemperature);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (junctionCap: ");
    result.append(junctionCap);
    result.append(", junctionCapSidewall: ");
    result.append(junctionCapSidewall);
    result.append(", defaultWidth: ");
    result.append(defaultWidth);
    result.append(", narrow: ");
    result.append(narrow);
    result.append(", temperatureCoefficient1: ");
    result.append(temperatureCoefficient1);
    result.append(", temperatureCoefficient2: ");
    result.append(temperatureCoefficient2);
    result.append(", nominalTemperature: ");
    result.append(nominalTemperature);
    result.append(')');
    return result.toString();
  }

} //CapacitorModelImpl
