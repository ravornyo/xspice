/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.Inductor;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inductor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.InductorImpl#getInductance <em>Inductance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.InductorImpl#getInitialCondition <em>Initial Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InductorImpl extends ComponentImpl implements Inductor
{
  /**
   * The default value of the '{@link #getInductance() <em>Inductance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInductance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal INDUCTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInductance() <em>Inductance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInductance()
   * @generated
   * @ordered
   */
  protected BigDecimal inductance = INDUCTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getInitialCondition() <em>Initial Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitialCondition()
   * @generated
   * @ordered
   */
  protected static final BigDecimal INITIAL_CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInitialCondition() <em>Initial Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitialCondition()
   * @generated
   * @ordered
   */
  protected BigDecimal initialCondition = INITIAL_CONDITION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InductorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.INDUCTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getInductance()
  {
    return inductance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInductance(BigDecimal newInductance)
  {
    BigDecimal oldInductance = inductance;
    inductance = newInductance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.INDUCTOR__INDUCTANCE, oldInductance, inductance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getInitialCondition()
  {
    return initialCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitialCondition(BigDecimal newInitialCondition)
  {
    BigDecimal oldInitialCondition = initialCondition;
    initialCondition = newInitialCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.INDUCTOR__INITIAL_CONDITION, oldInitialCondition, initialCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.INDUCTOR__INDUCTANCE:
        return getInductance();
      case XSpicePackage.INDUCTOR__INITIAL_CONDITION:
        return getInitialCondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.INDUCTOR__INDUCTANCE:
        setInductance((BigDecimal)newValue);
        return;
      case XSpicePackage.INDUCTOR__INITIAL_CONDITION:
        setInitialCondition((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.INDUCTOR__INDUCTANCE:
        setInductance(INDUCTANCE_EDEFAULT);
        return;
      case XSpicePackage.INDUCTOR__INITIAL_CONDITION:
        setInitialCondition(INITIAL_CONDITION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.INDUCTOR__INDUCTANCE:
        return INDUCTANCE_EDEFAULT == null ? inductance != null : !INDUCTANCE_EDEFAULT.equals(inductance);
      case XSpicePackage.INDUCTOR__INITIAL_CONDITION:
        return INITIAL_CONDITION_EDEFAULT == null ? initialCondition != null : !INITIAL_CONDITION_EDEFAULT.equals(initialCondition);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inductance: ");
    result.append(inductance);
    result.append(", initialCondition: ");
    result.append(initialCondition);
    result.append(')');
    return result.toString();
  }

} //InductorImpl
