/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.MOSFETModel;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>MOSFET Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getLevel <em>Level</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getVt0 <em>Vt0</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getTransconductance <em>Transconductance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getGamma <em>Gamma</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getPhi <em>Phi</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getLambda <em>Lambda</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getDrainResistance <em>Drain Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getSourceResistance <em>Source Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getCapBd <em>Cap Bd</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getCapBs <em>Cap Bs</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getJunctionSatCur <em>Junction Sat Cur</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getBulkJunctionPotential <em>Bulk Junction Potential</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getGateSourceOverlapCapFactor <em>Gate Source Overlap Cap Factor</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getGateDrainOverlapCapFactor <em>Gate Drain Overlap Cap Factor</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getGateBulkOverlapCapFactor <em>Gate Bulk Overlap Cap Factor</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getSheetResistance <em>Sheet Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getBulkCapFactor <em>Bulk Cap Factor</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getBulkJunctionBotGradingCoefficient <em>Bulk Junction Bot Grading Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getSidewallCapFactor <em>Sidewall Cap Factor</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getBulkJunctionSideGradingCoefficient <em>Bulk Junction Side Grading Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getJunctionSatCurDensity <em>Junction Sat Cur Density</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getOxideThickness <em>Oxide Thickness</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getSubstrateDoping <em>Substrate Doping</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getSurfaceStateDensity <em>Surface State Density</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getNfs <em>Nfs</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getGateType <em>Gate Type</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getXj <em>Xj</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getLateralDiffusion <em>Lateral Diffusion</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getSurfaceMobility <em>Surface Mobility</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getFlickerNoiseCoefficient <em>Flicker Noise Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getFlickerNoiseExponent <em>Flicker Noise Exponent</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getForwardCapDepletionCoefficient <em>Forward Cap Depletion Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.MOSFETModelImpl#getNominalTemperature <em>Nominal Temperature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MOSFETModelImpl extends EntityImpl implements MOSFETModel
{
  /**
   * The default value of the '{@link #getLevel() <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected static final int LEVEL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLevel() <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected int level = LEVEL_EDEFAULT;

  /**
   * The default value of the '{@link #getVt0() <em>Vt0</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVt0()
   * @generated
   * @ordered
   */
  protected static final BigDecimal VT0_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVt0() <em>Vt0</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVt0()
   * @generated
   * @ordered
   */
  protected BigDecimal vt0 = VT0_EDEFAULT;

  /**
   * The default value of the '{@link #getTransconductance() <em>Transconductance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransconductance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSCONDUCTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransconductance() <em>Transconductance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransconductance()
   * @generated
   * @ordered
   */
  protected BigDecimal transconductance = TRANSCONDUCTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getGamma() <em>Gamma</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGamma()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GAMMA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGamma() <em>Gamma</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGamma()
   * @generated
   * @ordered
   */
  protected BigDecimal gamma = GAMMA_EDEFAULT;

  /**
   * The default value of the '{@link #getPhi() <em>Phi</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhi()
   * @generated
   * @ordered
   */
  protected static final BigDecimal PHI_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPhi() <em>Phi</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhi()
   * @generated
   * @ordered
   */
  protected BigDecimal phi = PHI_EDEFAULT;

  /**
   * The default value of the '{@link #getLambda() <em>Lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLambda()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LAMBDA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLambda() <em>Lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLambda()
   * @generated
   * @ordered
   */
  protected BigDecimal lambda = LAMBDA_EDEFAULT;

  /**
   * The default value of the '{@link #getDrainResistance() <em>Drain Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrainResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DRAIN_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDrainResistance() <em>Drain Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrainResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal drainResistance = DRAIN_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getSourceResistance() <em>Source Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SOURCE_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSourceResistance() <em>Source Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal sourceResistance = SOURCE_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getCapBd() <em>Cap Bd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapBd()
   * @generated
   * @ordered
   */
  protected static final BigDecimal CAP_BD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCapBd() <em>Cap Bd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapBd()
   * @generated
   * @ordered
   */
  protected BigDecimal capBd = CAP_BD_EDEFAULT;

  /**
   * The default value of the '{@link #getCapBs() <em>Cap Bs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapBs()
   * @generated
   * @ordered
   */
  protected static final BigDecimal CAP_BS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCapBs() <em>Cap Bs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapBs()
   * @generated
   * @ordered
   */
  protected BigDecimal capBs = CAP_BS_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionSatCur() <em>Junction Sat Cur</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionSatCur()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_SAT_CUR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionSatCur() <em>Junction Sat Cur</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionSatCur()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionSatCur = JUNCTION_SAT_CUR_EDEFAULT;

  /**
   * The default value of the '{@link #getBulkJunctionPotential() <em>Bulk Junction Potential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkJunctionPotential()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BULK_JUNCTION_POTENTIAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBulkJunctionPotential() <em>Bulk Junction Potential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkJunctionPotential()
   * @generated
   * @ordered
   */
  protected BigDecimal bulkJunctionPotential = BULK_JUNCTION_POTENTIAL_EDEFAULT;

  /**
   * The default value of the '{@link #getGateSourceOverlapCapFactor() <em>Gate Source Overlap Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateSourceOverlapCapFactor()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GATE_SOURCE_OVERLAP_CAP_FACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGateSourceOverlapCapFactor() <em>Gate Source Overlap Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateSourceOverlapCapFactor()
   * @generated
   * @ordered
   */
  protected BigDecimal gateSourceOverlapCapFactor = GATE_SOURCE_OVERLAP_CAP_FACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getGateDrainOverlapCapFactor() <em>Gate Drain Overlap Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateDrainOverlapCapFactor()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GATE_DRAIN_OVERLAP_CAP_FACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGateDrainOverlapCapFactor() <em>Gate Drain Overlap Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateDrainOverlapCapFactor()
   * @generated
   * @ordered
   */
  protected BigDecimal gateDrainOverlapCapFactor = GATE_DRAIN_OVERLAP_CAP_FACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getGateBulkOverlapCapFactor() <em>Gate Bulk Overlap Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateBulkOverlapCapFactor()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GATE_BULK_OVERLAP_CAP_FACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGateBulkOverlapCapFactor() <em>Gate Bulk Overlap Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateBulkOverlapCapFactor()
   * @generated
   * @ordered
   */
  protected BigDecimal gateBulkOverlapCapFactor = GATE_BULK_OVERLAP_CAP_FACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getSheetResistance() <em>Sheet Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSheetResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SHEET_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSheetResistance() <em>Sheet Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSheetResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal sheetResistance = SHEET_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getBulkCapFactor() <em>Bulk Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkCapFactor()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BULK_CAP_FACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBulkCapFactor() <em>Bulk Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkCapFactor()
   * @generated
   * @ordered
   */
  protected BigDecimal bulkCapFactor = BULK_CAP_FACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getBulkJunctionBotGradingCoefficient() <em>Bulk Junction Bot Grading Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkJunctionBotGradingCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BULK_JUNCTION_BOT_GRADING_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBulkJunctionBotGradingCoefficient() <em>Bulk Junction Bot Grading Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkJunctionBotGradingCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal bulkJunctionBotGradingCoefficient = BULK_JUNCTION_BOT_GRADING_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getSidewallCapFactor() <em>Sidewall Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSidewallCapFactor()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SIDEWALL_CAP_FACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSidewallCapFactor() <em>Sidewall Cap Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSidewallCapFactor()
   * @generated
   * @ordered
   */
  protected BigDecimal sidewallCapFactor = SIDEWALL_CAP_FACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getBulkJunctionSideGradingCoefficient() <em>Bulk Junction Side Grading Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkJunctionSideGradingCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BULK_JUNCTION_SIDE_GRADING_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBulkJunctionSideGradingCoefficient() <em>Bulk Junction Side Grading Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBulkJunctionSideGradingCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal bulkJunctionSideGradingCoefficient = BULK_JUNCTION_SIDE_GRADING_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionSatCurDensity() <em>Junction Sat Cur Density</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionSatCurDensity()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_SAT_CUR_DENSITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionSatCurDensity() <em>Junction Sat Cur Density</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionSatCurDensity()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionSatCurDensity = JUNCTION_SAT_CUR_DENSITY_EDEFAULT;

  /**
   * The default value of the '{@link #getOxideThickness() <em>Oxide Thickness</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOxideThickness()
   * @generated
   * @ordered
   */
  protected static final BigDecimal OXIDE_THICKNESS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOxideThickness() <em>Oxide Thickness</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOxideThickness()
   * @generated
   * @ordered
   */
  protected BigDecimal oxideThickness = OXIDE_THICKNESS_EDEFAULT;

  /**
   * The default value of the '{@link #getSubstrateDoping() <em>Substrate Doping</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubstrateDoping()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SUBSTRATE_DOPING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSubstrateDoping() <em>Substrate Doping</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubstrateDoping()
   * @generated
   * @ordered
   */
  protected BigDecimal substrateDoping = SUBSTRATE_DOPING_EDEFAULT;

  /**
   * The default value of the '{@link #getSurfaceStateDensity() <em>Surface State Density</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSurfaceStateDensity()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SURFACE_STATE_DENSITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSurfaceStateDensity() <em>Surface State Density</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSurfaceStateDensity()
   * @generated
   * @ordered
   */
  protected BigDecimal surfaceStateDensity = SURFACE_STATE_DENSITY_EDEFAULT;

  /**
   * The default value of the '{@link #getNfs() <em>Nfs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNfs()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NFS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNfs() <em>Nfs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNfs()
   * @generated
   * @ordered
   */
  protected BigDecimal nfs = NFS_EDEFAULT;

  /**
   * The default value of the '{@link #getGateType() <em>Gate Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateType()
   * @generated
   * @ordered
   */
  protected static final String GATE_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGateType() <em>Gate Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGateType()
   * @generated
   * @ordered
   */
  protected String gateType = GATE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getXj() <em>Xj</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXj()
   * @generated
   * @ordered
   */
  protected static final BigDecimal XJ_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getXj() <em>Xj</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXj()
   * @generated
   * @ordered
   */
  protected BigDecimal xj = XJ_EDEFAULT;

  /**
   * The default value of the '{@link #getLateralDiffusion() <em>Lateral Diffusion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLateralDiffusion()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LATERAL_DIFFUSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLateralDiffusion() <em>Lateral Diffusion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLateralDiffusion()
   * @generated
   * @ordered
   */
  protected BigDecimal lateralDiffusion = LATERAL_DIFFUSION_EDEFAULT;

  /**
   * The default value of the '{@link #getSurfaceMobility() <em>Surface Mobility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSurfaceMobility()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SURFACE_MOBILITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSurfaceMobility() <em>Surface Mobility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSurfaceMobility()
   * @generated
   * @ordered
   */
  protected BigDecimal surfaceMobility = SURFACE_MOBILITY_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseCoefficient = FLICKER_NOISE_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_EXPONENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseExponent = FLICKER_NOISE_EXPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getForwardCapDepletionCoefficient() <em>Forward Cap Depletion Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForwardCapDepletionCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FORWARD_CAP_DEPLETION_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getForwardCapDepletionCoefficient() <em>Forward Cap Depletion Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForwardCapDepletionCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal forwardCapDepletionCoefficient = FORWARD_CAP_DEPLETION_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NOMINAL_TEMPERATURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected BigDecimal nominalTemperature = NOMINAL_TEMPERATURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MOSFETModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.MOSFET_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getLevel()
  {
    return level;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLevel(int newLevel)
  {
    int oldLevel = level;
    level = newLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__LEVEL, oldLevel, level));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getVt0()
  {
    return vt0;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVt0(BigDecimal newVt0)
  {
    BigDecimal oldVt0 = vt0;
    vt0 = newVt0;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__VT0, oldVt0, vt0));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransconductance()
  {
    return transconductance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransconductance(BigDecimal newTransconductance)
  {
    BigDecimal oldTransconductance = transconductance;
    transconductance = newTransconductance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__TRANSCONDUCTANCE, oldTransconductance, transconductance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGamma()
  {
    return gamma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGamma(BigDecimal newGamma)
  {
    BigDecimal oldGamma = gamma;
    gamma = newGamma;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__GAMMA, oldGamma, gamma));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getPhi()
  {
    return phi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPhi(BigDecimal newPhi)
  {
    BigDecimal oldPhi = phi;
    phi = newPhi;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__PHI, oldPhi, phi));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLambda()
  {
    return lambda;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLambda(BigDecimal newLambda)
  {
    BigDecimal oldLambda = lambda;
    lambda = newLambda;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__LAMBDA, oldLambda, lambda));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDrainResistance()
  {
    return drainResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDrainResistance(BigDecimal newDrainResistance)
  {
    BigDecimal oldDrainResistance = drainResistance;
    drainResistance = newDrainResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__DRAIN_RESISTANCE, oldDrainResistance, drainResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSourceResistance()
  {
    return sourceResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSourceResistance(BigDecimal newSourceResistance)
  {
    BigDecimal oldSourceResistance = sourceResistance;
    sourceResistance = newSourceResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__SOURCE_RESISTANCE, oldSourceResistance, sourceResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getCapBd()
  {
    return capBd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapBd(BigDecimal newCapBd)
  {
    BigDecimal oldCapBd = capBd;
    capBd = newCapBd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__CAP_BD, oldCapBd, capBd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getCapBs()
  {
    return capBs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapBs(BigDecimal newCapBs)
  {
    BigDecimal oldCapBs = capBs;
    capBs = newCapBs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__CAP_BS, oldCapBs, capBs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionSatCur()
  {
    return junctionSatCur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionSatCur(BigDecimal newJunctionSatCur)
  {
    BigDecimal oldJunctionSatCur = junctionSatCur;
    junctionSatCur = newJunctionSatCur;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR, oldJunctionSatCur, junctionSatCur));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBulkJunctionPotential()
  {
    return bulkJunctionPotential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBulkJunctionPotential(BigDecimal newBulkJunctionPotential)
  {
    BigDecimal oldBulkJunctionPotential = bulkJunctionPotential;
    bulkJunctionPotential = newBulkJunctionPotential;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_POTENTIAL, oldBulkJunctionPotential, bulkJunctionPotential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGateSourceOverlapCapFactor()
  {
    return gateSourceOverlapCapFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateSourceOverlapCapFactor(BigDecimal newGateSourceOverlapCapFactor)
  {
    BigDecimal oldGateSourceOverlapCapFactor = gateSourceOverlapCapFactor;
    gateSourceOverlapCapFactor = newGateSourceOverlapCapFactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__GATE_SOURCE_OVERLAP_CAP_FACTOR, oldGateSourceOverlapCapFactor, gateSourceOverlapCapFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGateDrainOverlapCapFactor()
  {
    return gateDrainOverlapCapFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateDrainOverlapCapFactor(BigDecimal newGateDrainOverlapCapFactor)
  {
    BigDecimal oldGateDrainOverlapCapFactor = gateDrainOverlapCapFactor;
    gateDrainOverlapCapFactor = newGateDrainOverlapCapFactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__GATE_DRAIN_OVERLAP_CAP_FACTOR, oldGateDrainOverlapCapFactor, gateDrainOverlapCapFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGateBulkOverlapCapFactor()
  {
    return gateBulkOverlapCapFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateBulkOverlapCapFactor(BigDecimal newGateBulkOverlapCapFactor)
  {
    BigDecimal oldGateBulkOverlapCapFactor = gateBulkOverlapCapFactor;
    gateBulkOverlapCapFactor = newGateBulkOverlapCapFactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__GATE_BULK_OVERLAP_CAP_FACTOR, oldGateBulkOverlapCapFactor, gateBulkOverlapCapFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSheetResistance()
  {
    return sheetResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSheetResistance(BigDecimal newSheetResistance)
  {
    BigDecimal oldSheetResistance = sheetResistance;
    sheetResistance = newSheetResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__SHEET_RESISTANCE, oldSheetResistance, sheetResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBulkCapFactor()
  {
    return bulkCapFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBulkCapFactor(BigDecimal newBulkCapFactor)
  {
    BigDecimal oldBulkCapFactor = bulkCapFactor;
    bulkCapFactor = newBulkCapFactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__BULK_CAP_FACTOR, oldBulkCapFactor, bulkCapFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBulkJunctionBotGradingCoefficient()
  {
    return bulkJunctionBotGradingCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBulkJunctionBotGradingCoefficient(BigDecimal newBulkJunctionBotGradingCoefficient)
  {
    BigDecimal oldBulkJunctionBotGradingCoefficient = bulkJunctionBotGradingCoefficient;
    bulkJunctionBotGradingCoefficient = newBulkJunctionBotGradingCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_BOT_GRADING_COEFFICIENT, oldBulkJunctionBotGradingCoefficient, bulkJunctionBotGradingCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSidewallCapFactor()
  {
    return sidewallCapFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSidewallCapFactor(BigDecimal newSidewallCapFactor)
  {
    BigDecimal oldSidewallCapFactor = sidewallCapFactor;
    sidewallCapFactor = newSidewallCapFactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__SIDEWALL_CAP_FACTOR, oldSidewallCapFactor, sidewallCapFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBulkJunctionSideGradingCoefficient()
  {
    return bulkJunctionSideGradingCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBulkJunctionSideGradingCoefficient(BigDecimal newBulkJunctionSideGradingCoefficient)
  {
    BigDecimal oldBulkJunctionSideGradingCoefficient = bulkJunctionSideGradingCoefficient;
    bulkJunctionSideGradingCoefficient = newBulkJunctionSideGradingCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_SIDE_GRADING_COEFFICIENT, oldBulkJunctionSideGradingCoefficient, bulkJunctionSideGradingCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionSatCurDensity()
  {
    return junctionSatCurDensity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionSatCurDensity(BigDecimal newJunctionSatCurDensity)
  {
    BigDecimal oldJunctionSatCurDensity = junctionSatCurDensity;
    junctionSatCurDensity = newJunctionSatCurDensity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR_DENSITY, oldJunctionSatCurDensity, junctionSatCurDensity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getOxideThickness()
  {
    return oxideThickness;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOxideThickness(BigDecimal newOxideThickness)
  {
    BigDecimal oldOxideThickness = oxideThickness;
    oxideThickness = newOxideThickness;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__OXIDE_THICKNESS, oldOxideThickness, oxideThickness));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSubstrateDoping()
  {
    return substrateDoping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubstrateDoping(BigDecimal newSubstrateDoping)
  {
    BigDecimal oldSubstrateDoping = substrateDoping;
    substrateDoping = newSubstrateDoping;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__SUBSTRATE_DOPING, oldSubstrateDoping, substrateDoping));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSurfaceStateDensity()
  {
    return surfaceStateDensity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSurfaceStateDensity(BigDecimal newSurfaceStateDensity)
  {
    BigDecimal oldSurfaceStateDensity = surfaceStateDensity;
    surfaceStateDensity = newSurfaceStateDensity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__SURFACE_STATE_DENSITY, oldSurfaceStateDensity, surfaceStateDensity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNfs()
  {
    return nfs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNfs(BigDecimal newNfs)
  {
    BigDecimal oldNfs = nfs;
    nfs = newNfs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__NFS, oldNfs, nfs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGateType()
  {
    return gateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGateType(String newGateType)
  {
    String oldGateType = gateType;
    gateType = newGateType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__GATE_TYPE, oldGateType, gateType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getXj()
  {
    return xj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXj(BigDecimal newXj)
  {
    BigDecimal oldXj = xj;
    xj = newXj;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__XJ, oldXj, xj));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLateralDiffusion()
  {
    return lateralDiffusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLateralDiffusion(BigDecimal newLateralDiffusion)
  {
    BigDecimal oldLateralDiffusion = lateralDiffusion;
    lateralDiffusion = newLateralDiffusion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__LATERAL_DIFFUSION, oldLateralDiffusion, lateralDiffusion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSurfaceMobility()
  {
    return surfaceMobility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSurfaceMobility(BigDecimal newSurfaceMobility)
  {
    BigDecimal oldSurfaceMobility = surfaceMobility;
    surfaceMobility = newSurfaceMobility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__SURFACE_MOBILITY, oldSurfaceMobility, surfaceMobility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseCoefficient()
  {
    return flickerNoiseCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseCoefficient(BigDecimal newFlickerNoiseCoefficient)
  {
    BigDecimal oldFlickerNoiseCoefficient = flickerNoiseCoefficient;
    flickerNoiseCoefficient = newFlickerNoiseCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_COEFFICIENT, oldFlickerNoiseCoefficient, flickerNoiseCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseExponent()
  {
    return flickerNoiseExponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseExponent(BigDecimal newFlickerNoiseExponent)
  {
    BigDecimal oldFlickerNoiseExponent = flickerNoiseExponent;
    flickerNoiseExponent = newFlickerNoiseExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_EXPONENT, oldFlickerNoiseExponent, flickerNoiseExponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getForwardCapDepletionCoefficient()
  {
    return forwardCapDepletionCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForwardCapDepletionCoefficient(BigDecimal newForwardCapDepletionCoefficient)
  {
    BigDecimal oldForwardCapDepletionCoefficient = forwardCapDepletionCoefficient;
    forwardCapDepletionCoefficient = newForwardCapDepletionCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__FORWARD_CAP_DEPLETION_COEFFICIENT, oldForwardCapDepletionCoefficient, forwardCapDepletionCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNominalTemperature()
  {
    return nominalTemperature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNominalTemperature(BigDecimal newNominalTemperature)
  {
    BigDecimal oldNominalTemperature = nominalTemperature;
    nominalTemperature = newNominalTemperature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.MOSFET_MODEL__NOMINAL_TEMPERATURE, oldNominalTemperature, nominalTemperature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.MOSFET_MODEL__LEVEL:
        return getLevel();
      case XSpicePackage.MOSFET_MODEL__VT0:
        return getVt0();
      case XSpicePackage.MOSFET_MODEL__TRANSCONDUCTANCE:
        return getTransconductance();
      case XSpicePackage.MOSFET_MODEL__GAMMA:
        return getGamma();
      case XSpicePackage.MOSFET_MODEL__PHI:
        return getPhi();
      case XSpicePackage.MOSFET_MODEL__LAMBDA:
        return getLambda();
      case XSpicePackage.MOSFET_MODEL__DRAIN_RESISTANCE:
        return getDrainResistance();
      case XSpicePackage.MOSFET_MODEL__SOURCE_RESISTANCE:
        return getSourceResistance();
      case XSpicePackage.MOSFET_MODEL__CAP_BD:
        return getCapBd();
      case XSpicePackage.MOSFET_MODEL__CAP_BS:
        return getCapBs();
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR:
        return getJunctionSatCur();
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_POTENTIAL:
        return getBulkJunctionPotential();
      case XSpicePackage.MOSFET_MODEL__GATE_SOURCE_OVERLAP_CAP_FACTOR:
        return getGateSourceOverlapCapFactor();
      case XSpicePackage.MOSFET_MODEL__GATE_DRAIN_OVERLAP_CAP_FACTOR:
        return getGateDrainOverlapCapFactor();
      case XSpicePackage.MOSFET_MODEL__GATE_BULK_OVERLAP_CAP_FACTOR:
        return getGateBulkOverlapCapFactor();
      case XSpicePackage.MOSFET_MODEL__SHEET_RESISTANCE:
        return getSheetResistance();
      case XSpicePackage.MOSFET_MODEL__BULK_CAP_FACTOR:
        return getBulkCapFactor();
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_BOT_GRADING_COEFFICIENT:
        return getBulkJunctionBotGradingCoefficient();
      case XSpicePackage.MOSFET_MODEL__SIDEWALL_CAP_FACTOR:
        return getSidewallCapFactor();
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_SIDE_GRADING_COEFFICIENT:
        return getBulkJunctionSideGradingCoefficient();
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR_DENSITY:
        return getJunctionSatCurDensity();
      case XSpicePackage.MOSFET_MODEL__OXIDE_THICKNESS:
        return getOxideThickness();
      case XSpicePackage.MOSFET_MODEL__SUBSTRATE_DOPING:
        return getSubstrateDoping();
      case XSpicePackage.MOSFET_MODEL__SURFACE_STATE_DENSITY:
        return getSurfaceStateDensity();
      case XSpicePackage.MOSFET_MODEL__NFS:
        return getNfs();
      case XSpicePackage.MOSFET_MODEL__GATE_TYPE:
        return getGateType();
      case XSpicePackage.MOSFET_MODEL__XJ:
        return getXj();
      case XSpicePackage.MOSFET_MODEL__LATERAL_DIFFUSION:
        return getLateralDiffusion();
      case XSpicePackage.MOSFET_MODEL__SURFACE_MOBILITY:
        return getSurfaceMobility();
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        return getFlickerNoiseCoefficient();
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_EXPONENT:
        return getFlickerNoiseExponent();
      case XSpicePackage.MOSFET_MODEL__FORWARD_CAP_DEPLETION_COEFFICIENT:
        return getForwardCapDepletionCoefficient();
      case XSpicePackage.MOSFET_MODEL__NOMINAL_TEMPERATURE:
        return getNominalTemperature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.MOSFET_MODEL__LEVEL:
        setLevel((Integer)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__VT0:
        setVt0((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__TRANSCONDUCTANCE:
        setTransconductance((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__GAMMA:
        setGamma((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__PHI:
        setPhi((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__LAMBDA:
        setLambda((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__DRAIN_RESISTANCE:
        setDrainResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__SOURCE_RESISTANCE:
        setSourceResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__CAP_BD:
        setCapBd((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__CAP_BS:
        setCapBs((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR:
        setJunctionSatCur((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_POTENTIAL:
        setBulkJunctionPotential((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_SOURCE_OVERLAP_CAP_FACTOR:
        setGateSourceOverlapCapFactor((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_DRAIN_OVERLAP_CAP_FACTOR:
        setGateDrainOverlapCapFactor((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_BULK_OVERLAP_CAP_FACTOR:
        setGateBulkOverlapCapFactor((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__SHEET_RESISTANCE:
        setSheetResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_CAP_FACTOR:
        setBulkCapFactor((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_BOT_GRADING_COEFFICIENT:
        setBulkJunctionBotGradingCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__SIDEWALL_CAP_FACTOR:
        setSidewallCapFactor((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_SIDE_GRADING_COEFFICIENT:
        setBulkJunctionSideGradingCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR_DENSITY:
        setJunctionSatCurDensity((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__OXIDE_THICKNESS:
        setOxideThickness((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__SUBSTRATE_DOPING:
        setSubstrateDoping((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__SURFACE_STATE_DENSITY:
        setSurfaceStateDensity((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__NFS:
        setNfs((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_TYPE:
        setGateType((String)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__XJ:
        setXj((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__LATERAL_DIFFUSION:
        setLateralDiffusion((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__SURFACE_MOBILITY:
        setSurfaceMobility((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__FORWARD_CAP_DEPLETION_COEFFICIENT:
        setForwardCapDepletionCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.MOSFET_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.MOSFET_MODEL__LEVEL:
        setLevel(LEVEL_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__VT0:
        setVt0(VT0_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__TRANSCONDUCTANCE:
        setTransconductance(TRANSCONDUCTANCE_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__GAMMA:
        setGamma(GAMMA_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__PHI:
        setPhi(PHI_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__LAMBDA:
        setLambda(LAMBDA_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__DRAIN_RESISTANCE:
        setDrainResistance(DRAIN_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__SOURCE_RESISTANCE:
        setSourceResistance(SOURCE_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__CAP_BD:
        setCapBd(CAP_BD_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__CAP_BS:
        setCapBs(CAP_BS_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR:
        setJunctionSatCur(JUNCTION_SAT_CUR_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_POTENTIAL:
        setBulkJunctionPotential(BULK_JUNCTION_POTENTIAL_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_SOURCE_OVERLAP_CAP_FACTOR:
        setGateSourceOverlapCapFactor(GATE_SOURCE_OVERLAP_CAP_FACTOR_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_DRAIN_OVERLAP_CAP_FACTOR:
        setGateDrainOverlapCapFactor(GATE_DRAIN_OVERLAP_CAP_FACTOR_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_BULK_OVERLAP_CAP_FACTOR:
        setGateBulkOverlapCapFactor(GATE_BULK_OVERLAP_CAP_FACTOR_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__SHEET_RESISTANCE:
        setSheetResistance(SHEET_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_CAP_FACTOR:
        setBulkCapFactor(BULK_CAP_FACTOR_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_BOT_GRADING_COEFFICIENT:
        setBulkJunctionBotGradingCoefficient(BULK_JUNCTION_BOT_GRADING_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__SIDEWALL_CAP_FACTOR:
        setSidewallCapFactor(SIDEWALL_CAP_FACTOR_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_SIDE_GRADING_COEFFICIENT:
        setBulkJunctionSideGradingCoefficient(BULK_JUNCTION_SIDE_GRADING_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR_DENSITY:
        setJunctionSatCurDensity(JUNCTION_SAT_CUR_DENSITY_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__OXIDE_THICKNESS:
        setOxideThickness(OXIDE_THICKNESS_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__SUBSTRATE_DOPING:
        setSubstrateDoping(SUBSTRATE_DOPING_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__SURFACE_STATE_DENSITY:
        setSurfaceStateDensity(SURFACE_STATE_DENSITY_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__NFS:
        setNfs(NFS_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__GATE_TYPE:
        setGateType(GATE_TYPE_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__XJ:
        setXj(XJ_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__LATERAL_DIFFUSION:
        setLateralDiffusion(LATERAL_DIFFUSION_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__SURFACE_MOBILITY:
        setSurfaceMobility(SURFACE_MOBILITY_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient(FLICKER_NOISE_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent(FLICKER_NOISE_EXPONENT_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__FORWARD_CAP_DEPLETION_COEFFICIENT:
        setForwardCapDepletionCoefficient(FORWARD_CAP_DEPLETION_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.MOSFET_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature(NOMINAL_TEMPERATURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.MOSFET_MODEL__LEVEL:
        return level != LEVEL_EDEFAULT;
      case XSpicePackage.MOSFET_MODEL__VT0:
        return VT0_EDEFAULT == null ? vt0 != null : !VT0_EDEFAULT.equals(vt0);
      case XSpicePackage.MOSFET_MODEL__TRANSCONDUCTANCE:
        return TRANSCONDUCTANCE_EDEFAULT == null ? transconductance != null : !TRANSCONDUCTANCE_EDEFAULT.equals(transconductance);
      case XSpicePackage.MOSFET_MODEL__GAMMA:
        return GAMMA_EDEFAULT == null ? gamma != null : !GAMMA_EDEFAULT.equals(gamma);
      case XSpicePackage.MOSFET_MODEL__PHI:
        return PHI_EDEFAULT == null ? phi != null : !PHI_EDEFAULT.equals(phi);
      case XSpicePackage.MOSFET_MODEL__LAMBDA:
        return LAMBDA_EDEFAULT == null ? lambda != null : !LAMBDA_EDEFAULT.equals(lambda);
      case XSpicePackage.MOSFET_MODEL__DRAIN_RESISTANCE:
        return DRAIN_RESISTANCE_EDEFAULT == null ? drainResistance != null : !DRAIN_RESISTANCE_EDEFAULT.equals(drainResistance);
      case XSpicePackage.MOSFET_MODEL__SOURCE_RESISTANCE:
        return SOURCE_RESISTANCE_EDEFAULT == null ? sourceResistance != null : !SOURCE_RESISTANCE_EDEFAULT.equals(sourceResistance);
      case XSpicePackage.MOSFET_MODEL__CAP_BD:
        return CAP_BD_EDEFAULT == null ? capBd != null : !CAP_BD_EDEFAULT.equals(capBd);
      case XSpicePackage.MOSFET_MODEL__CAP_BS:
        return CAP_BS_EDEFAULT == null ? capBs != null : !CAP_BS_EDEFAULT.equals(capBs);
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR:
        return JUNCTION_SAT_CUR_EDEFAULT == null ? junctionSatCur != null : !JUNCTION_SAT_CUR_EDEFAULT.equals(junctionSatCur);
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_POTENTIAL:
        return BULK_JUNCTION_POTENTIAL_EDEFAULT == null ? bulkJunctionPotential != null : !BULK_JUNCTION_POTENTIAL_EDEFAULT.equals(bulkJunctionPotential);
      case XSpicePackage.MOSFET_MODEL__GATE_SOURCE_OVERLAP_CAP_FACTOR:
        return GATE_SOURCE_OVERLAP_CAP_FACTOR_EDEFAULT == null ? gateSourceOverlapCapFactor != null : !GATE_SOURCE_OVERLAP_CAP_FACTOR_EDEFAULT.equals(gateSourceOverlapCapFactor);
      case XSpicePackage.MOSFET_MODEL__GATE_DRAIN_OVERLAP_CAP_FACTOR:
        return GATE_DRAIN_OVERLAP_CAP_FACTOR_EDEFAULT == null ? gateDrainOverlapCapFactor != null : !GATE_DRAIN_OVERLAP_CAP_FACTOR_EDEFAULT.equals(gateDrainOverlapCapFactor);
      case XSpicePackage.MOSFET_MODEL__GATE_BULK_OVERLAP_CAP_FACTOR:
        return GATE_BULK_OVERLAP_CAP_FACTOR_EDEFAULT == null ? gateBulkOverlapCapFactor != null : !GATE_BULK_OVERLAP_CAP_FACTOR_EDEFAULT.equals(gateBulkOverlapCapFactor);
      case XSpicePackage.MOSFET_MODEL__SHEET_RESISTANCE:
        return SHEET_RESISTANCE_EDEFAULT == null ? sheetResistance != null : !SHEET_RESISTANCE_EDEFAULT.equals(sheetResistance);
      case XSpicePackage.MOSFET_MODEL__BULK_CAP_FACTOR:
        return BULK_CAP_FACTOR_EDEFAULT == null ? bulkCapFactor != null : !BULK_CAP_FACTOR_EDEFAULT.equals(bulkCapFactor);
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_BOT_GRADING_COEFFICIENT:
        return BULK_JUNCTION_BOT_GRADING_COEFFICIENT_EDEFAULT == null ? bulkJunctionBotGradingCoefficient != null : !BULK_JUNCTION_BOT_GRADING_COEFFICIENT_EDEFAULT.equals(bulkJunctionBotGradingCoefficient);
      case XSpicePackage.MOSFET_MODEL__SIDEWALL_CAP_FACTOR:
        return SIDEWALL_CAP_FACTOR_EDEFAULT == null ? sidewallCapFactor != null : !SIDEWALL_CAP_FACTOR_EDEFAULT.equals(sidewallCapFactor);
      case XSpicePackage.MOSFET_MODEL__BULK_JUNCTION_SIDE_GRADING_COEFFICIENT:
        return BULK_JUNCTION_SIDE_GRADING_COEFFICIENT_EDEFAULT == null ? bulkJunctionSideGradingCoefficient != null : !BULK_JUNCTION_SIDE_GRADING_COEFFICIENT_EDEFAULT.equals(bulkJunctionSideGradingCoefficient);
      case XSpicePackage.MOSFET_MODEL__JUNCTION_SAT_CUR_DENSITY:
        return JUNCTION_SAT_CUR_DENSITY_EDEFAULT == null ? junctionSatCurDensity != null : !JUNCTION_SAT_CUR_DENSITY_EDEFAULT.equals(junctionSatCurDensity);
      case XSpicePackage.MOSFET_MODEL__OXIDE_THICKNESS:
        return OXIDE_THICKNESS_EDEFAULT == null ? oxideThickness != null : !OXIDE_THICKNESS_EDEFAULT.equals(oxideThickness);
      case XSpicePackage.MOSFET_MODEL__SUBSTRATE_DOPING:
        return SUBSTRATE_DOPING_EDEFAULT == null ? substrateDoping != null : !SUBSTRATE_DOPING_EDEFAULT.equals(substrateDoping);
      case XSpicePackage.MOSFET_MODEL__SURFACE_STATE_DENSITY:
        return SURFACE_STATE_DENSITY_EDEFAULT == null ? surfaceStateDensity != null : !SURFACE_STATE_DENSITY_EDEFAULT.equals(surfaceStateDensity);
      case XSpicePackage.MOSFET_MODEL__NFS:
        return NFS_EDEFAULT == null ? nfs != null : !NFS_EDEFAULT.equals(nfs);
      case XSpicePackage.MOSFET_MODEL__GATE_TYPE:
        return GATE_TYPE_EDEFAULT == null ? gateType != null : !GATE_TYPE_EDEFAULT.equals(gateType);
      case XSpicePackage.MOSFET_MODEL__XJ:
        return XJ_EDEFAULT == null ? xj != null : !XJ_EDEFAULT.equals(xj);
      case XSpicePackage.MOSFET_MODEL__LATERAL_DIFFUSION:
        return LATERAL_DIFFUSION_EDEFAULT == null ? lateralDiffusion != null : !LATERAL_DIFFUSION_EDEFAULT.equals(lateralDiffusion);
      case XSpicePackage.MOSFET_MODEL__SURFACE_MOBILITY:
        return SURFACE_MOBILITY_EDEFAULT == null ? surfaceMobility != null : !SURFACE_MOBILITY_EDEFAULT.equals(surfaceMobility);
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_COEFFICIENT:
        return FLICKER_NOISE_COEFFICIENT_EDEFAULT == null ? flickerNoiseCoefficient != null : !FLICKER_NOISE_COEFFICIENT_EDEFAULT.equals(flickerNoiseCoefficient);
      case XSpicePackage.MOSFET_MODEL__FLICKER_NOISE_EXPONENT:
        return FLICKER_NOISE_EXPONENT_EDEFAULT == null ? flickerNoiseExponent != null : !FLICKER_NOISE_EXPONENT_EDEFAULT.equals(flickerNoiseExponent);
      case XSpicePackage.MOSFET_MODEL__FORWARD_CAP_DEPLETION_COEFFICIENT:
        return FORWARD_CAP_DEPLETION_COEFFICIENT_EDEFAULT == null ? forwardCapDepletionCoefficient != null : !FORWARD_CAP_DEPLETION_COEFFICIENT_EDEFAULT.equals(forwardCapDepletionCoefficient);
      case XSpicePackage.MOSFET_MODEL__NOMINAL_TEMPERATURE:
        return NOMINAL_TEMPERATURE_EDEFAULT == null ? nominalTemperature != null : !NOMINAL_TEMPERATURE_EDEFAULT.equals(nominalTemperature);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (level: ");
    result.append(level);
    result.append(", vt0: ");
    result.append(vt0);
    result.append(", transconductance: ");
    result.append(transconductance);
    result.append(", gamma: ");
    result.append(gamma);
    result.append(", phi: ");
    result.append(phi);
    result.append(", lambda: ");
    result.append(lambda);
    result.append(", drainResistance: ");
    result.append(drainResistance);
    result.append(", sourceResistance: ");
    result.append(sourceResistance);
    result.append(", capBd: ");
    result.append(capBd);
    result.append(", capBs: ");
    result.append(capBs);
    result.append(", junctionSatCur: ");
    result.append(junctionSatCur);
    result.append(", bulkJunctionPotential: ");
    result.append(bulkJunctionPotential);
    result.append(", gateSourceOverlapCapFactor: ");
    result.append(gateSourceOverlapCapFactor);
    result.append(", gateDrainOverlapCapFactor: ");
    result.append(gateDrainOverlapCapFactor);
    result.append(", gateBulkOverlapCapFactor: ");
    result.append(gateBulkOverlapCapFactor);
    result.append(", sheetResistance: ");
    result.append(sheetResistance);
    result.append(", bulkCapFactor: ");
    result.append(bulkCapFactor);
    result.append(", bulkJunctionBotGradingCoefficient: ");
    result.append(bulkJunctionBotGradingCoefficient);
    result.append(", sidewallCapFactor: ");
    result.append(sidewallCapFactor);
    result.append(", bulkJunctionSideGradingCoefficient: ");
    result.append(bulkJunctionSideGradingCoefficient);
    result.append(", junctionSatCurDensity: ");
    result.append(junctionSatCurDensity);
    result.append(", oxideThickness: ");
    result.append(oxideThickness);
    result.append(", substrateDoping: ");
    result.append(substrateDoping);
    result.append(", surfaceStateDensity: ");
    result.append(surfaceStateDensity);
    result.append(", nfs: ");
    result.append(nfs);
    result.append(", gateType: ");
    result.append(gateType);
    result.append(", xj: ");
    result.append(xj);
    result.append(", lateralDiffusion: ");
    result.append(lateralDiffusion);
    result.append(", surfaceMobility: ");
    result.append(surfaceMobility);
    result.append(", flickerNoiseCoefficient: ");
    result.append(flickerNoiseCoefficient);
    result.append(", flickerNoiseExponent: ");
    result.append(flickerNoiseExponent);
    result.append(", forwardCapDepletionCoefficient: ");
    result.append(forwardCapDepletionCoefficient);
    result.append(", nominalTemperature: ");
    result.append(nominalTemperature);
    result.append(')');
    return result.toString();
  }

} //MOSFETModelImpl
