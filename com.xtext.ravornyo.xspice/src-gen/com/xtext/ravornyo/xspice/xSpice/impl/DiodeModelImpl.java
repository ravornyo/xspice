/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.DiodeModel;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Diode Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getSaturationCurrent <em>Saturation Current</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getResistance <em>Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getEmissionCoefficient <em>Emission Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getTransitTime <em>Transit Time</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getJunctionCap <em>Junction Cap</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getJunctionPotential <em>Junction Potential</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getGradingCoefficient <em>Grading Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getActivationEnergy <em>Activation Energy</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getSaturationCurrentExp <em>Saturation Current Exp</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getFlickerNoiseCoefficient <em>Flicker Noise Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getFlickerNoiseExponent <em>Flicker Noise Exponent</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getDepletionCapCoefficient <em>Depletion Cap Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getBreakdownVoltage <em>Breakdown Voltage</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getBreakdownCurrent <em>Breakdown Current</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.DiodeModelImpl#getNominalTemperature <em>Nominal Temperature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiodeModelImpl extends EntityImpl implements DiodeModel
{
  /**
   * The default value of the '{@link #getSaturationCurrent() <em>Saturation Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaturationCurrent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SATURATION_CURRENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSaturationCurrent() <em>Saturation Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaturationCurrent()
   * @generated
   * @ordered
   */
  protected BigDecimal saturationCurrent = SATURATION_CURRENT_EDEFAULT;

  /**
   * The default value of the '{@link #getResistance() <em>Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getResistance() <em>Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal resistance = RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getEmissionCoefficient() <em>Emission Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissionCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EMISSION_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEmissionCoefficient() <em>Emission Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissionCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal emissionCoefficient = EMISSION_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getTransitTime() <em>Transit Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTime()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSIT_TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransitTime() <em>Transit Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTime()
   * @generated
   * @ordered
   */
  protected BigDecimal transitTime = TRANSIT_TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionCap() <em>Junction Cap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionCap()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_CAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionCap() <em>Junction Cap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionCap()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionCap = JUNCTION_CAP_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionPotential() <em>Junction Potential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionPotential()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_POTENTIAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionPotential() <em>Junction Potential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionPotential()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionPotential = JUNCTION_POTENTIAL_EDEFAULT;

  /**
   * The default value of the '{@link #getGradingCoefficient() <em>Grading Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGradingCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal GRADING_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGradingCoefficient() <em>Grading Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGradingCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal gradingCoefficient = GRADING_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getActivationEnergy() <em>Activation Energy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivationEnergy()
   * @generated
   * @ordered
   */
  protected static final BigDecimal ACTIVATION_ENERGY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getActivationEnergy() <em>Activation Energy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivationEnergy()
   * @generated
   * @ordered
   */
  protected BigDecimal activationEnergy = ACTIVATION_ENERGY_EDEFAULT;

  /**
   * The default value of the '{@link #getSaturationCurrentExp() <em>Saturation Current Exp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaturationCurrentExp()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SATURATION_CURRENT_EXP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSaturationCurrentExp() <em>Saturation Current Exp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaturationCurrentExp()
   * @generated
   * @ordered
   */
  protected BigDecimal saturationCurrentExp = SATURATION_CURRENT_EXP_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseCoefficient = FLICKER_NOISE_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_EXPONENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseExponent = FLICKER_NOISE_EXPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getDepletionCapCoefficient() <em>Depletion Cap Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DEPLETION_CAP_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDepletionCapCoefficient() <em>Depletion Cap Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal depletionCapCoefficient = DEPLETION_CAP_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getBreakdownVoltage() <em>Breakdown Voltage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakdownVoltage()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BREAKDOWN_VOLTAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBreakdownVoltage() <em>Breakdown Voltage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakdownVoltage()
   * @generated
   * @ordered
   */
  protected BigDecimal breakdownVoltage = BREAKDOWN_VOLTAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getBreakdownCurrent() <em>Breakdown Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakdownCurrent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BREAKDOWN_CURRENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBreakdownCurrent() <em>Breakdown Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakdownCurrent()
   * @generated
   * @ordered
   */
  protected BigDecimal breakdownCurrent = BREAKDOWN_CURRENT_EDEFAULT;

  /**
   * The default value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NOMINAL_TEMPERATURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected BigDecimal nominalTemperature = NOMINAL_TEMPERATURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiodeModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.DIODE_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSaturationCurrent()
  {
    return saturationCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSaturationCurrent(BigDecimal newSaturationCurrent)
  {
    BigDecimal oldSaturationCurrent = saturationCurrent;
    saturationCurrent = newSaturationCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__SATURATION_CURRENT, oldSaturationCurrent, saturationCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getResistance()
  {
    return resistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResistance(BigDecimal newResistance)
  {
    BigDecimal oldResistance = resistance;
    resistance = newResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__RESISTANCE, oldResistance, resistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEmissionCoefficient()
  {
    return emissionCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmissionCoefficient(BigDecimal newEmissionCoefficient)
  {
    BigDecimal oldEmissionCoefficient = emissionCoefficient;
    emissionCoefficient = newEmissionCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__EMISSION_COEFFICIENT, oldEmissionCoefficient, emissionCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransitTime()
  {
    return transitTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitTime(BigDecimal newTransitTime)
  {
    BigDecimal oldTransitTime = transitTime;
    transitTime = newTransitTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__TRANSIT_TIME, oldTransitTime, transitTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionCap()
  {
    return junctionCap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionCap(BigDecimal newJunctionCap)
  {
    BigDecimal oldJunctionCap = junctionCap;
    junctionCap = newJunctionCap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__JUNCTION_CAP, oldJunctionCap, junctionCap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionPotential()
  {
    return junctionPotential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionPotential(BigDecimal newJunctionPotential)
  {
    BigDecimal oldJunctionPotential = junctionPotential;
    junctionPotential = newJunctionPotential;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__JUNCTION_POTENTIAL, oldJunctionPotential, junctionPotential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getGradingCoefficient()
  {
    return gradingCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGradingCoefficient(BigDecimal newGradingCoefficient)
  {
    BigDecimal oldGradingCoefficient = gradingCoefficient;
    gradingCoefficient = newGradingCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__GRADING_COEFFICIENT, oldGradingCoefficient, gradingCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getActivationEnergy()
  {
    return activationEnergy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActivationEnergy(BigDecimal newActivationEnergy)
  {
    BigDecimal oldActivationEnergy = activationEnergy;
    activationEnergy = newActivationEnergy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__ACTIVATION_ENERGY, oldActivationEnergy, activationEnergy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSaturationCurrentExp()
  {
    return saturationCurrentExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSaturationCurrentExp(BigDecimal newSaturationCurrentExp)
  {
    BigDecimal oldSaturationCurrentExp = saturationCurrentExp;
    saturationCurrentExp = newSaturationCurrentExp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__SATURATION_CURRENT_EXP, oldSaturationCurrentExp, saturationCurrentExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseCoefficient()
  {
    return flickerNoiseCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseCoefficient(BigDecimal newFlickerNoiseCoefficient)
  {
    BigDecimal oldFlickerNoiseCoefficient = flickerNoiseCoefficient;
    flickerNoiseCoefficient = newFlickerNoiseCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__FLICKER_NOISE_COEFFICIENT, oldFlickerNoiseCoefficient, flickerNoiseCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseExponent()
  {
    return flickerNoiseExponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseExponent(BigDecimal newFlickerNoiseExponent)
  {
    BigDecimal oldFlickerNoiseExponent = flickerNoiseExponent;
    flickerNoiseExponent = newFlickerNoiseExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__FLICKER_NOISE_EXPONENT, oldFlickerNoiseExponent, flickerNoiseExponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDepletionCapCoefficient()
  {
    return depletionCapCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDepletionCapCoefficient(BigDecimal newDepletionCapCoefficient)
  {
    BigDecimal oldDepletionCapCoefficient = depletionCapCoefficient;
    depletionCapCoefficient = newDepletionCapCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__DEPLETION_CAP_COEFFICIENT, oldDepletionCapCoefficient, depletionCapCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBreakdownVoltage()
  {
    return breakdownVoltage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBreakdownVoltage(BigDecimal newBreakdownVoltage)
  {
    BigDecimal oldBreakdownVoltage = breakdownVoltage;
    breakdownVoltage = newBreakdownVoltage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__BREAKDOWN_VOLTAGE, oldBreakdownVoltage, breakdownVoltage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBreakdownCurrent()
  {
    return breakdownCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBreakdownCurrent(BigDecimal newBreakdownCurrent)
  {
    BigDecimal oldBreakdownCurrent = breakdownCurrent;
    breakdownCurrent = newBreakdownCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__BREAKDOWN_CURRENT, oldBreakdownCurrent, breakdownCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNominalTemperature()
  {
    return nominalTemperature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNominalTemperature(BigDecimal newNominalTemperature)
  {
    BigDecimal oldNominalTemperature = nominalTemperature;
    nominalTemperature = newNominalTemperature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.DIODE_MODEL__NOMINAL_TEMPERATURE, oldNominalTemperature, nominalTemperature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT:
        return getSaturationCurrent();
      case XSpicePackage.DIODE_MODEL__RESISTANCE:
        return getResistance();
      case XSpicePackage.DIODE_MODEL__EMISSION_COEFFICIENT:
        return getEmissionCoefficient();
      case XSpicePackage.DIODE_MODEL__TRANSIT_TIME:
        return getTransitTime();
      case XSpicePackage.DIODE_MODEL__JUNCTION_CAP:
        return getJunctionCap();
      case XSpicePackage.DIODE_MODEL__JUNCTION_POTENTIAL:
        return getJunctionPotential();
      case XSpicePackage.DIODE_MODEL__GRADING_COEFFICIENT:
        return getGradingCoefficient();
      case XSpicePackage.DIODE_MODEL__ACTIVATION_ENERGY:
        return getActivationEnergy();
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT_EXP:
        return getSaturationCurrentExp();
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_COEFFICIENT:
        return getFlickerNoiseCoefficient();
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_EXPONENT:
        return getFlickerNoiseExponent();
      case XSpicePackage.DIODE_MODEL__DEPLETION_CAP_COEFFICIENT:
        return getDepletionCapCoefficient();
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_VOLTAGE:
        return getBreakdownVoltage();
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_CURRENT:
        return getBreakdownCurrent();
      case XSpicePackage.DIODE_MODEL__NOMINAL_TEMPERATURE:
        return getNominalTemperature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT:
        setSaturationCurrent((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__RESISTANCE:
        setResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__EMISSION_COEFFICIENT:
        setEmissionCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__TRANSIT_TIME:
        setTransitTime((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__JUNCTION_CAP:
        setJunctionCap((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__JUNCTION_POTENTIAL:
        setJunctionPotential((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__GRADING_COEFFICIENT:
        setGradingCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__ACTIVATION_ENERGY:
        setActivationEnergy((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT_EXP:
        setSaturationCurrentExp((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__DEPLETION_CAP_COEFFICIENT:
        setDepletionCapCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_VOLTAGE:
        setBreakdownVoltage((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_CURRENT:
        setBreakdownCurrent((BigDecimal)newValue);
        return;
      case XSpicePackage.DIODE_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT:
        setSaturationCurrent(SATURATION_CURRENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__RESISTANCE:
        setResistance(RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__EMISSION_COEFFICIENT:
        setEmissionCoefficient(EMISSION_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__TRANSIT_TIME:
        setTransitTime(TRANSIT_TIME_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__JUNCTION_CAP:
        setJunctionCap(JUNCTION_CAP_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__JUNCTION_POTENTIAL:
        setJunctionPotential(JUNCTION_POTENTIAL_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__GRADING_COEFFICIENT:
        setGradingCoefficient(GRADING_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__ACTIVATION_ENERGY:
        setActivationEnergy(ACTIVATION_ENERGY_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT_EXP:
        setSaturationCurrentExp(SATURATION_CURRENT_EXP_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient(FLICKER_NOISE_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent(FLICKER_NOISE_EXPONENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__DEPLETION_CAP_COEFFICIENT:
        setDepletionCapCoefficient(DEPLETION_CAP_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_VOLTAGE:
        setBreakdownVoltage(BREAKDOWN_VOLTAGE_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_CURRENT:
        setBreakdownCurrent(BREAKDOWN_CURRENT_EDEFAULT);
        return;
      case XSpicePackage.DIODE_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature(NOMINAL_TEMPERATURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT:
        return SATURATION_CURRENT_EDEFAULT == null ? saturationCurrent != null : !SATURATION_CURRENT_EDEFAULT.equals(saturationCurrent);
      case XSpicePackage.DIODE_MODEL__RESISTANCE:
        return RESISTANCE_EDEFAULT == null ? resistance != null : !RESISTANCE_EDEFAULT.equals(resistance);
      case XSpicePackage.DIODE_MODEL__EMISSION_COEFFICIENT:
        return EMISSION_COEFFICIENT_EDEFAULT == null ? emissionCoefficient != null : !EMISSION_COEFFICIENT_EDEFAULT.equals(emissionCoefficient);
      case XSpicePackage.DIODE_MODEL__TRANSIT_TIME:
        return TRANSIT_TIME_EDEFAULT == null ? transitTime != null : !TRANSIT_TIME_EDEFAULT.equals(transitTime);
      case XSpicePackage.DIODE_MODEL__JUNCTION_CAP:
        return JUNCTION_CAP_EDEFAULT == null ? junctionCap != null : !JUNCTION_CAP_EDEFAULT.equals(junctionCap);
      case XSpicePackage.DIODE_MODEL__JUNCTION_POTENTIAL:
        return JUNCTION_POTENTIAL_EDEFAULT == null ? junctionPotential != null : !JUNCTION_POTENTIAL_EDEFAULT.equals(junctionPotential);
      case XSpicePackage.DIODE_MODEL__GRADING_COEFFICIENT:
        return GRADING_COEFFICIENT_EDEFAULT == null ? gradingCoefficient != null : !GRADING_COEFFICIENT_EDEFAULT.equals(gradingCoefficient);
      case XSpicePackage.DIODE_MODEL__ACTIVATION_ENERGY:
        return ACTIVATION_ENERGY_EDEFAULT == null ? activationEnergy != null : !ACTIVATION_ENERGY_EDEFAULT.equals(activationEnergy);
      case XSpicePackage.DIODE_MODEL__SATURATION_CURRENT_EXP:
        return SATURATION_CURRENT_EXP_EDEFAULT == null ? saturationCurrentExp != null : !SATURATION_CURRENT_EXP_EDEFAULT.equals(saturationCurrentExp);
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_COEFFICIENT:
        return FLICKER_NOISE_COEFFICIENT_EDEFAULT == null ? flickerNoiseCoefficient != null : !FLICKER_NOISE_COEFFICIENT_EDEFAULT.equals(flickerNoiseCoefficient);
      case XSpicePackage.DIODE_MODEL__FLICKER_NOISE_EXPONENT:
        return FLICKER_NOISE_EXPONENT_EDEFAULT == null ? flickerNoiseExponent != null : !FLICKER_NOISE_EXPONENT_EDEFAULT.equals(flickerNoiseExponent);
      case XSpicePackage.DIODE_MODEL__DEPLETION_CAP_COEFFICIENT:
        return DEPLETION_CAP_COEFFICIENT_EDEFAULT == null ? depletionCapCoefficient != null : !DEPLETION_CAP_COEFFICIENT_EDEFAULT.equals(depletionCapCoefficient);
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_VOLTAGE:
        return BREAKDOWN_VOLTAGE_EDEFAULT == null ? breakdownVoltage != null : !BREAKDOWN_VOLTAGE_EDEFAULT.equals(breakdownVoltage);
      case XSpicePackage.DIODE_MODEL__BREAKDOWN_CURRENT:
        return BREAKDOWN_CURRENT_EDEFAULT == null ? breakdownCurrent != null : !BREAKDOWN_CURRENT_EDEFAULT.equals(breakdownCurrent);
      case XSpicePackage.DIODE_MODEL__NOMINAL_TEMPERATURE:
        return NOMINAL_TEMPERATURE_EDEFAULT == null ? nominalTemperature != null : !NOMINAL_TEMPERATURE_EDEFAULT.equals(nominalTemperature);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (saturationCurrent: ");
    result.append(saturationCurrent);
    result.append(", resistance: ");
    result.append(resistance);
    result.append(", emissionCoefficient: ");
    result.append(emissionCoefficient);
    result.append(", transitTime: ");
    result.append(transitTime);
    result.append(", junctionCap: ");
    result.append(junctionCap);
    result.append(", junctionPotential: ");
    result.append(junctionPotential);
    result.append(", gradingCoefficient: ");
    result.append(gradingCoefficient);
    result.append(", activationEnergy: ");
    result.append(activationEnergy);
    result.append(", saturationCurrentExp: ");
    result.append(saturationCurrentExp);
    result.append(", flickerNoiseCoefficient: ");
    result.append(flickerNoiseCoefficient);
    result.append(", flickerNoiseExponent: ");
    result.append(flickerNoiseExponent);
    result.append(", depletionCapCoefficient: ");
    result.append(depletionCapCoefficient);
    result.append(", breakdownVoltage: ");
    result.append(breakdownVoltage);
    result.append(", breakdownCurrent: ");
    result.append(breakdownCurrent);
    result.append(", nominalTemperature: ");
    result.append(nominalTemperature);
    result.append(')');
    return result.toString();
  }

} //DiodeModelImpl
