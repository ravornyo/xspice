/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.TransientSimulation;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Transient Simulation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.TransientSimulationImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.TransientSimulationImpl#isUic <em>Uic</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TransientSimulationImpl extends SimulationImpl implements TransientSimulation
{
  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<BigDecimal> args;

  /**
   * The default value of the '{@link #isUic() <em>Uic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUic()
   * @generated
   * @ordered
   */
  protected static final boolean UIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUic() <em>Uic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUic()
   * @generated
   * @ordered
   */
  protected boolean uic = UIC_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransientSimulationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.TRANSIENT_SIMULATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BigDecimal> getArgs()
  {
    if (args == null)
    {
      args = new EDataTypeEList<BigDecimal>(BigDecimal.class, this, XSpicePackage.TRANSIENT_SIMULATION__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isUic()
  {
    return uic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUic(boolean newUic)
  {
    boolean oldUic = uic;
    uic = newUic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.TRANSIENT_SIMULATION__UIC, oldUic, uic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.TRANSIENT_SIMULATION__ARGS:
        return getArgs();
      case XSpicePackage.TRANSIENT_SIMULATION__UIC:
        return isUic();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.TRANSIENT_SIMULATION__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends BigDecimal>)newValue);
        return;
      case XSpicePackage.TRANSIENT_SIMULATION__UIC:
        setUic((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.TRANSIENT_SIMULATION__ARGS:
        getArgs().clear();
        return;
      case XSpicePackage.TRANSIENT_SIMULATION__UIC:
        setUic(UIC_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.TRANSIENT_SIMULATION__ARGS:
        return args != null && !args.isEmpty();
      case XSpicePackage.TRANSIENT_SIMULATION__UIC:
        return uic != UIC_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (args: ");
    result.append(args);
    result.append(", uic: ");
    result.append(uic);
    result.append(')');
    return result.toString();
  }

} //TransientSimulationImpl
