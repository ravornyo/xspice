/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.BJTModel;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import java.math.BigDecimal;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BJT Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getSaturationCurrent <em>Saturation Current</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getBetaF <em>Beta F</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getEmissionCoefficientForward <em>Emission Coefficient Forward</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getEarlyVoltageForward <em>Early Voltage Forward</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getRollOffForward <em>Roll Off Forward</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getLeakBeCurrent <em>Leak Be Current</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getLeakBeEmissionCoefficient <em>Leak Be Emission Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getBetaR <em>Beta R</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getEmissionCoefficientReverse <em>Emission Coefficient Reverse</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getEarlyVoltageReverse <em>Early Voltage Reverse</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getRollOffReverse <em>Roll Off Reverse</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getLeakBcCurrent <em>Leak Bc Current</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getLeakBcEmissionCoefficient <em>Leak Bc Emission Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getBaseResist <em>Base Resist</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getBaseCurrentHalfResist <em>Base Current Half Resist</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getMinimumBaseResistance <em>Minimum Base Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getEmitterResistance <em>Emitter Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getCollectorResistance <em>Collector Resistance</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getDepletionCapBe <em>Depletion Cap Be</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getPotentialBe <em>Potential Be</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getJunctionExpBe <em>Junction Exp Be</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getTransitTimeForward <em>Transit Time Forward</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getTransitTimeBiasCoefficientForward <em>Transit Time Bias Coefficient Forward</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getTransitTimeForwardVoltageBc <em>Transit Time Forward Voltage Bc</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getTransitTimeHighCurrentForward <em>Transit Time High Current Forward</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getExcessPhase <em>Excess Phase</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getDepletionCapBc <em>Depletion Cap Bc</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getPotentialBc <em>Potential Bc</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getJunctionExpBc <em>Junction Exp Bc</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getBaseFractionBcCap <em>Base Fraction Bc Cap</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getTransitTimeReverse <em>Transit Time Reverse</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getCapCs <em>Cap Cs</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getPotentialSubstrate <em>Potential Substrate</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getExponentialSubstrate <em>Exponential Substrate</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getBetaExponent <em>Beta Exponent</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getEnergyGap <em>Energy Gap</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getTempExpIs <em>Temp Exp Is</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getFlickerNoiseCoefficient <em>Flicker Noise Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getFlickerNoiseExponent <em>Flicker Noise Exponent</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getDepletionCapCoefficient <em>Depletion Cap Coefficient</em>}</li>
 *   <li>{@link com.xtext.ravornyo.xspice.xSpice.impl.BJTModelImpl#getNominalTemperature <em>Nominal Temperature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BJTModelImpl extends EntityImpl implements BJTModel
{
  /**
   * The default value of the '{@link #getSaturationCurrent() <em>Saturation Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaturationCurrent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal SATURATION_CURRENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSaturationCurrent() <em>Saturation Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaturationCurrent()
   * @generated
   * @ordered
   */
  protected BigDecimal saturationCurrent = SATURATION_CURRENT_EDEFAULT;

  /**
   * The default value of the '{@link #getBetaF() <em>Beta F</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetaF()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BETA_F_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBetaF() <em>Beta F</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetaF()
   * @generated
   * @ordered
   */
  protected BigDecimal betaF = BETA_F_EDEFAULT;

  /**
   * The default value of the '{@link #getEmissionCoefficientForward() <em>Emission Coefficient Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissionCoefficientForward()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EMISSION_COEFFICIENT_FORWARD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEmissionCoefficientForward() <em>Emission Coefficient Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissionCoefficientForward()
   * @generated
   * @ordered
   */
  protected BigDecimal emissionCoefficientForward = EMISSION_COEFFICIENT_FORWARD_EDEFAULT;

  /**
   * The default value of the '{@link #getEarlyVoltageForward() <em>Early Voltage Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEarlyVoltageForward()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EARLY_VOLTAGE_FORWARD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEarlyVoltageForward() <em>Early Voltage Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEarlyVoltageForward()
   * @generated
   * @ordered
   */
  protected BigDecimal earlyVoltageForward = EARLY_VOLTAGE_FORWARD_EDEFAULT;

  /**
   * The default value of the '{@link #getRollOffForward() <em>Roll Off Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRollOffForward()
   * @generated
   * @ordered
   */
  protected static final BigDecimal ROLL_OFF_FORWARD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRollOffForward() <em>Roll Off Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRollOffForward()
   * @generated
   * @ordered
   */
  protected BigDecimal rollOffForward = ROLL_OFF_FORWARD_EDEFAULT;

  /**
   * The default value of the '{@link #getLeakBeCurrent() <em>Leak Be Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBeCurrent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LEAK_BE_CURRENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeakBeCurrent() <em>Leak Be Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBeCurrent()
   * @generated
   * @ordered
   */
  protected BigDecimal leakBeCurrent = LEAK_BE_CURRENT_EDEFAULT;

  /**
   * The default value of the '{@link #getLeakBeEmissionCoefficient() <em>Leak Be Emission Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBeEmissionCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LEAK_BE_EMISSION_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeakBeEmissionCoefficient() <em>Leak Be Emission Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBeEmissionCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal leakBeEmissionCoefficient = LEAK_BE_EMISSION_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getBetaR() <em>Beta R</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetaR()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BETA_R_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBetaR() <em>Beta R</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetaR()
   * @generated
   * @ordered
   */
  protected BigDecimal betaR = BETA_R_EDEFAULT;

  /**
   * The default value of the '{@link #getEmissionCoefficientReverse() <em>Emission Coefficient Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissionCoefficientReverse()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EMISSION_COEFFICIENT_REVERSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEmissionCoefficientReverse() <em>Emission Coefficient Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmissionCoefficientReverse()
   * @generated
   * @ordered
   */
  protected BigDecimal emissionCoefficientReverse = EMISSION_COEFFICIENT_REVERSE_EDEFAULT;

  /**
   * The default value of the '{@link #getEarlyVoltageReverse() <em>Early Voltage Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEarlyVoltageReverse()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EARLY_VOLTAGE_REVERSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEarlyVoltageReverse() <em>Early Voltage Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEarlyVoltageReverse()
   * @generated
   * @ordered
   */
  protected BigDecimal earlyVoltageReverse = EARLY_VOLTAGE_REVERSE_EDEFAULT;

  /**
   * The default value of the '{@link #getRollOffReverse() <em>Roll Off Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRollOffReverse()
   * @generated
   * @ordered
   */
  protected static final BigDecimal ROLL_OFF_REVERSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRollOffReverse() <em>Roll Off Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRollOffReverse()
   * @generated
   * @ordered
   */
  protected BigDecimal rollOffReverse = ROLL_OFF_REVERSE_EDEFAULT;

  /**
   * The default value of the '{@link #getLeakBcCurrent() <em>Leak Bc Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBcCurrent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LEAK_BC_CURRENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeakBcCurrent() <em>Leak Bc Current</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBcCurrent()
   * @generated
   * @ordered
   */
  protected BigDecimal leakBcCurrent = LEAK_BC_CURRENT_EDEFAULT;

  /**
   * The default value of the '{@link #getLeakBcEmissionCoefficient() <em>Leak Bc Emission Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBcEmissionCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal LEAK_BC_EMISSION_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeakBcEmissionCoefficient() <em>Leak Bc Emission Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeakBcEmissionCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal leakBcEmissionCoefficient = LEAK_BC_EMISSION_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getBaseResist() <em>Base Resist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseResist()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BASE_RESIST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBaseResist() <em>Base Resist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseResist()
   * @generated
   * @ordered
   */
  protected BigDecimal baseResist = BASE_RESIST_EDEFAULT;

  /**
   * The default value of the '{@link #getBaseCurrentHalfResist() <em>Base Current Half Resist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseCurrentHalfResist()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BASE_CURRENT_HALF_RESIST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBaseCurrentHalfResist() <em>Base Current Half Resist</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseCurrentHalfResist()
   * @generated
   * @ordered
   */
  protected BigDecimal baseCurrentHalfResist = BASE_CURRENT_HALF_RESIST_EDEFAULT;

  /**
   * The default value of the '{@link #getMinimumBaseResistance() <em>Minimum Base Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinimumBaseResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal MINIMUM_BASE_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinimumBaseResistance() <em>Minimum Base Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinimumBaseResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal minimumBaseResistance = MINIMUM_BASE_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getEmitterResistance() <em>Emitter Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmitterResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EMITTER_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEmitterResistance() <em>Emitter Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmitterResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal emitterResistance = EMITTER_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getCollectorResistance() <em>Collector Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollectorResistance()
   * @generated
   * @ordered
   */
  protected static final BigDecimal COLLECTOR_RESISTANCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCollectorResistance() <em>Collector Resistance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollectorResistance()
   * @generated
   * @ordered
   */
  protected BigDecimal collectorResistance = COLLECTOR_RESISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #getDepletionCapBe() <em>Depletion Cap Be</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapBe()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DEPLETION_CAP_BE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDepletionCapBe() <em>Depletion Cap Be</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapBe()
   * @generated
   * @ordered
   */
  protected BigDecimal depletionCapBe = DEPLETION_CAP_BE_EDEFAULT;

  /**
   * The default value of the '{@link #getPotentialBe() <em>Potential Be</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotentialBe()
   * @generated
   * @ordered
   */
  protected static final BigDecimal POTENTIAL_BE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPotentialBe() <em>Potential Be</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotentialBe()
   * @generated
   * @ordered
   */
  protected BigDecimal potentialBe = POTENTIAL_BE_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionExpBe() <em>Junction Exp Be</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionExpBe()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_EXP_BE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionExpBe() <em>Junction Exp Be</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionExpBe()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionExpBe = JUNCTION_EXP_BE_EDEFAULT;

  /**
   * The default value of the '{@link #getTransitTimeForward() <em>Transit Time Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeForward()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSIT_TIME_FORWARD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransitTimeForward() <em>Transit Time Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeForward()
   * @generated
   * @ordered
   */
  protected BigDecimal transitTimeForward = TRANSIT_TIME_FORWARD_EDEFAULT;

  /**
   * The default value of the '{@link #getTransitTimeBiasCoefficientForward() <em>Transit Time Bias Coefficient Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeBiasCoefficientForward()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransitTimeBiasCoefficientForward() <em>Transit Time Bias Coefficient Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeBiasCoefficientForward()
   * @generated
   * @ordered
   */
  protected BigDecimal transitTimeBiasCoefficientForward = TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD_EDEFAULT;

  /**
   * The default value of the '{@link #getTransitTimeForwardVoltageBc() <em>Transit Time Forward Voltage Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeForwardVoltageBc()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSIT_TIME_FORWARD_VOLTAGE_BC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransitTimeForwardVoltageBc() <em>Transit Time Forward Voltage Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeForwardVoltageBc()
   * @generated
   * @ordered
   */
  protected BigDecimal transitTimeForwardVoltageBc = TRANSIT_TIME_FORWARD_VOLTAGE_BC_EDEFAULT;

  /**
   * The default value of the '{@link #getTransitTimeHighCurrentForward() <em>Transit Time High Current Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeHighCurrentForward()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSIT_TIME_HIGH_CURRENT_FORWARD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransitTimeHighCurrentForward() <em>Transit Time High Current Forward</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeHighCurrentForward()
   * @generated
   * @ordered
   */
  protected BigDecimal transitTimeHighCurrentForward = TRANSIT_TIME_HIGH_CURRENT_FORWARD_EDEFAULT;

  /**
   * The default value of the '{@link #getExcessPhase() <em>Excess Phase</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcessPhase()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EXCESS_PHASE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExcessPhase() <em>Excess Phase</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcessPhase()
   * @generated
   * @ordered
   */
  protected BigDecimal excessPhase = EXCESS_PHASE_EDEFAULT;

  /**
   * The default value of the '{@link #getDepletionCapBc() <em>Depletion Cap Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapBc()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DEPLETION_CAP_BC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDepletionCapBc() <em>Depletion Cap Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapBc()
   * @generated
   * @ordered
   */
  protected BigDecimal depletionCapBc = DEPLETION_CAP_BC_EDEFAULT;

  /**
   * The default value of the '{@link #getPotentialBc() <em>Potential Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotentialBc()
   * @generated
   * @ordered
   */
  protected static final BigDecimal POTENTIAL_BC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPotentialBc() <em>Potential Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotentialBc()
   * @generated
   * @ordered
   */
  protected BigDecimal potentialBc = POTENTIAL_BC_EDEFAULT;

  /**
   * The default value of the '{@link #getJunctionExpBc() <em>Junction Exp Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionExpBc()
   * @generated
   * @ordered
   */
  protected static final BigDecimal JUNCTION_EXP_BC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJunctionExpBc() <em>Junction Exp Bc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJunctionExpBc()
   * @generated
   * @ordered
   */
  protected BigDecimal junctionExpBc = JUNCTION_EXP_BC_EDEFAULT;

  /**
   * The default value of the '{@link #getBaseFractionBcCap() <em>Base Fraction Bc Cap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseFractionBcCap()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BASE_FRACTION_BC_CAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBaseFractionBcCap() <em>Base Fraction Bc Cap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseFractionBcCap()
   * @generated
   * @ordered
   */
  protected BigDecimal baseFractionBcCap = BASE_FRACTION_BC_CAP_EDEFAULT;

  /**
   * The default value of the '{@link #getTransitTimeReverse() <em>Transit Time Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeReverse()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TRANSIT_TIME_REVERSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransitTimeReverse() <em>Transit Time Reverse</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitTimeReverse()
   * @generated
   * @ordered
   */
  protected BigDecimal transitTimeReverse = TRANSIT_TIME_REVERSE_EDEFAULT;

  /**
   * The default value of the '{@link #getCapCs() <em>Cap Cs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapCs()
   * @generated
   * @ordered
   */
  protected static final BigDecimal CAP_CS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCapCs() <em>Cap Cs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCapCs()
   * @generated
   * @ordered
   */
  protected BigDecimal capCs = CAP_CS_EDEFAULT;

  /**
   * The default value of the '{@link #getPotentialSubstrate() <em>Potential Substrate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotentialSubstrate()
   * @generated
   * @ordered
   */
  protected static final BigDecimal POTENTIAL_SUBSTRATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPotentialSubstrate() <em>Potential Substrate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotentialSubstrate()
   * @generated
   * @ordered
   */
  protected BigDecimal potentialSubstrate = POTENTIAL_SUBSTRATE_EDEFAULT;

  /**
   * The default value of the '{@link #getExponentialSubstrate() <em>Exponential Substrate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExponentialSubstrate()
   * @generated
   * @ordered
   */
  protected static final BigDecimal EXPONENTIAL_SUBSTRATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExponentialSubstrate() <em>Exponential Substrate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExponentialSubstrate()
   * @generated
   * @ordered
   */
  protected BigDecimal exponentialSubstrate = EXPONENTIAL_SUBSTRATE_EDEFAULT;

  /**
   * The default value of the '{@link #getBetaExponent() <em>Beta Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetaExponent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal BETA_EXPONENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBetaExponent() <em>Beta Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetaExponent()
   * @generated
   * @ordered
   */
  protected BigDecimal betaExponent = BETA_EXPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getEnergyGap() <em>Energy Gap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnergyGap()
   * @generated
   * @ordered
   */
  protected static final BigDecimal ENERGY_GAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnergyGap() <em>Energy Gap</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnergyGap()
   * @generated
   * @ordered
   */
  protected BigDecimal energyGap = ENERGY_GAP_EDEFAULT;

  /**
   * The default value of the '{@link #getTempExpIs() <em>Temp Exp Is</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempExpIs()
   * @generated
   * @ordered
   */
  protected static final BigDecimal TEMP_EXP_IS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTempExpIs() <em>Temp Exp Is</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempExpIs()
   * @generated
   * @ordered
   */
  protected BigDecimal tempExpIs = TEMP_EXP_IS_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseCoefficient() <em>Flicker Noise Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseCoefficient = FLICKER_NOISE_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected static final BigDecimal FLICKER_NOISE_EXPONENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlickerNoiseExponent() <em>Flicker Noise Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlickerNoiseExponent()
   * @generated
   * @ordered
   */
  protected BigDecimal flickerNoiseExponent = FLICKER_NOISE_EXPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getDepletionCapCoefficient() <em>Depletion Cap Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapCoefficient()
   * @generated
   * @ordered
   */
  protected static final BigDecimal DEPLETION_CAP_COEFFICIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDepletionCapCoefficient() <em>Depletion Cap Coefficient</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDepletionCapCoefficient()
   * @generated
   * @ordered
   */
  protected BigDecimal depletionCapCoefficient = DEPLETION_CAP_COEFFICIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected static final BigDecimal NOMINAL_TEMPERATURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNominalTemperature() <em>Nominal Temperature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNominalTemperature()
   * @generated
   * @ordered
   */
  protected BigDecimal nominalTemperature = NOMINAL_TEMPERATURE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BJTModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XSpicePackage.Literals.BJT_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getSaturationCurrent()
  {
    return saturationCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSaturationCurrent(BigDecimal newSaturationCurrent)
  {
    BigDecimal oldSaturationCurrent = saturationCurrent;
    saturationCurrent = newSaturationCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__SATURATION_CURRENT, oldSaturationCurrent, saturationCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBetaF()
  {
    return betaF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBetaF(BigDecimal newBetaF)
  {
    BigDecimal oldBetaF = betaF;
    betaF = newBetaF;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__BETA_F, oldBetaF, betaF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEmissionCoefficientForward()
  {
    return emissionCoefficientForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmissionCoefficientForward(BigDecimal newEmissionCoefficientForward)
  {
    BigDecimal oldEmissionCoefficientForward = emissionCoefficientForward;
    emissionCoefficientForward = newEmissionCoefficientForward;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_FORWARD, oldEmissionCoefficientForward, emissionCoefficientForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEarlyVoltageForward()
  {
    return earlyVoltageForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEarlyVoltageForward(BigDecimal newEarlyVoltageForward)
  {
    BigDecimal oldEarlyVoltageForward = earlyVoltageForward;
    earlyVoltageForward = newEarlyVoltageForward;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_FORWARD, oldEarlyVoltageForward, earlyVoltageForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getRollOffForward()
  {
    return rollOffForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRollOffForward(BigDecimal newRollOffForward)
  {
    BigDecimal oldRollOffForward = rollOffForward;
    rollOffForward = newRollOffForward;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__ROLL_OFF_FORWARD, oldRollOffForward, rollOffForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLeakBeCurrent()
  {
    return leakBeCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeakBeCurrent(BigDecimal newLeakBeCurrent)
  {
    BigDecimal oldLeakBeCurrent = leakBeCurrent;
    leakBeCurrent = newLeakBeCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__LEAK_BE_CURRENT, oldLeakBeCurrent, leakBeCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLeakBeEmissionCoefficient()
  {
    return leakBeEmissionCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeakBeEmissionCoefficient(BigDecimal newLeakBeEmissionCoefficient)
  {
    BigDecimal oldLeakBeEmissionCoefficient = leakBeEmissionCoefficient;
    leakBeEmissionCoefficient = newLeakBeEmissionCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__LEAK_BE_EMISSION_COEFFICIENT, oldLeakBeEmissionCoefficient, leakBeEmissionCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBetaR()
  {
    return betaR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBetaR(BigDecimal newBetaR)
  {
    BigDecimal oldBetaR = betaR;
    betaR = newBetaR;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__BETA_R, oldBetaR, betaR));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEmissionCoefficientReverse()
  {
    return emissionCoefficientReverse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmissionCoefficientReverse(BigDecimal newEmissionCoefficientReverse)
  {
    BigDecimal oldEmissionCoefficientReverse = emissionCoefficientReverse;
    emissionCoefficientReverse = newEmissionCoefficientReverse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_REVERSE, oldEmissionCoefficientReverse, emissionCoefficientReverse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEarlyVoltageReverse()
  {
    return earlyVoltageReverse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEarlyVoltageReverse(BigDecimal newEarlyVoltageReverse)
  {
    BigDecimal oldEarlyVoltageReverse = earlyVoltageReverse;
    earlyVoltageReverse = newEarlyVoltageReverse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_REVERSE, oldEarlyVoltageReverse, earlyVoltageReverse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getRollOffReverse()
  {
    return rollOffReverse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRollOffReverse(BigDecimal newRollOffReverse)
  {
    BigDecimal oldRollOffReverse = rollOffReverse;
    rollOffReverse = newRollOffReverse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__ROLL_OFF_REVERSE, oldRollOffReverse, rollOffReverse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLeakBcCurrent()
  {
    return leakBcCurrent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeakBcCurrent(BigDecimal newLeakBcCurrent)
  {
    BigDecimal oldLeakBcCurrent = leakBcCurrent;
    leakBcCurrent = newLeakBcCurrent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__LEAK_BC_CURRENT, oldLeakBcCurrent, leakBcCurrent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getLeakBcEmissionCoefficient()
  {
    return leakBcEmissionCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeakBcEmissionCoefficient(BigDecimal newLeakBcEmissionCoefficient)
  {
    BigDecimal oldLeakBcEmissionCoefficient = leakBcEmissionCoefficient;
    leakBcEmissionCoefficient = newLeakBcEmissionCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__LEAK_BC_EMISSION_COEFFICIENT, oldLeakBcEmissionCoefficient, leakBcEmissionCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBaseResist()
  {
    return baseResist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaseResist(BigDecimal newBaseResist)
  {
    BigDecimal oldBaseResist = baseResist;
    baseResist = newBaseResist;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__BASE_RESIST, oldBaseResist, baseResist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBaseCurrentHalfResist()
  {
    return baseCurrentHalfResist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaseCurrentHalfResist(BigDecimal newBaseCurrentHalfResist)
  {
    BigDecimal oldBaseCurrentHalfResist = baseCurrentHalfResist;
    baseCurrentHalfResist = newBaseCurrentHalfResist;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__BASE_CURRENT_HALF_RESIST, oldBaseCurrentHalfResist, baseCurrentHalfResist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getMinimumBaseResistance()
  {
    return minimumBaseResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinimumBaseResistance(BigDecimal newMinimumBaseResistance)
  {
    BigDecimal oldMinimumBaseResistance = minimumBaseResistance;
    minimumBaseResistance = newMinimumBaseResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__MINIMUM_BASE_RESISTANCE, oldMinimumBaseResistance, minimumBaseResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEmitterResistance()
  {
    return emitterResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmitterResistance(BigDecimal newEmitterResistance)
  {
    BigDecimal oldEmitterResistance = emitterResistance;
    emitterResistance = newEmitterResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EMITTER_RESISTANCE, oldEmitterResistance, emitterResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getCollectorResistance()
  {
    return collectorResistance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCollectorResistance(BigDecimal newCollectorResistance)
  {
    BigDecimal oldCollectorResistance = collectorResistance;
    collectorResistance = newCollectorResistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__COLLECTOR_RESISTANCE, oldCollectorResistance, collectorResistance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDepletionCapBe()
  {
    return depletionCapBe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDepletionCapBe(BigDecimal newDepletionCapBe)
  {
    BigDecimal oldDepletionCapBe = depletionCapBe;
    depletionCapBe = newDepletionCapBe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__DEPLETION_CAP_BE, oldDepletionCapBe, depletionCapBe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getPotentialBe()
  {
    return potentialBe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPotentialBe(BigDecimal newPotentialBe)
  {
    BigDecimal oldPotentialBe = potentialBe;
    potentialBe = newPotentialBe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__POTENTIAL_BE, oldPotentialBe, potentialBe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionExpBe()
  {
    return junctionExpBe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionExpBe(BigDecimal newJunctionExpBe)
  {
    BigDecimal oldJunctionExpBe = junctionExpBe;
    junctionExpBe = newJunctionExpBe;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__JUNCTION_EXP_BE, oldJunctionExpBe, junctionExpBe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransitTimeForward()
  {
    return transitTimeForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitTimeForward(BigDecimal newTransitTimeForward)
  {
    BigDecimal oldTransitTimeForward = transitTimeForward;
    transitTimeForward = newTransitTimeForward;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD, oldTransitTimeForward, transitTimeForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransitTimeBiasCoefficientForward()
  {
    return transitTimeBiasCoefficientForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitTimeBiasCoefficientForward(BigDecimal newTransitTimeBiasCoefficientForward)
  {
    BigDecimal oldTransitTimeBiasCoefficientForward = transitTimeBiasCoefficientForward;
    transitTimeBiasCoefficientForward = newTransitTimeBiasCoefficientForward;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD, oldTransitTimeBiasCoefficientForward, transitTimeBiasCoefficientForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransitTimeForwardVoltageBc()
  {
    return transitTimeForwardVoltageBc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitTimeForwardVoltageBc(BigDecimal newTransitTimeForwardVoltageBc)
  {
    BigDecimal oldTransitTimeForwardVoltageBc = transitTimeForwardVoltageBc;
    transitTimeForwardVoltageBc = newTransitTimeForwardVoltageBc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD_VOLTAGE_BC, oldTransitTimeForwardVoltageBc, transitTimeForwardVoltageBc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransitTimeHighCurrentForward()
  {
    return transitTimeHighCurrentForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitTimeHighCurrentForward(BigDecimal newTransitTimeHighCurrentForward)
  {
    BigDecimal oldTransitTimeHighCurrentForward = transitTimeHighCurrentForward;
    transitTimeHighCurrentForward = newTransitTimeHighCurrentForward;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__TRANSIT_TIME_HIGH_CURRENT_FORWARD, oldTransitTimeHighCurrentForward, transitTimeHighCurrentForward));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getExcessPhase()
  {
    return excessPhase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExcessPhase(BigDecimal newExcessPhase)
  {
    BigDecimal oldExcessPhase = excessPhase;
    excessPhase = newExcessPhase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EXCESS_PHASE, oldExcessPhase, excessPhase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDepletionCapBc()
  {
    return depletionCapBc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDepletionCapBc(BigDecimal newDepletionCapBc)
  {
    BigDecimal oldDepletionCapBc = depletionCapBc;
    depletionCapBc = newDepletionCapBc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__DEPLETION_CAP_BC, oldDepletionCapBc, depletionCapBc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getPotentialBc()
  {
    return potentialBc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPotentialBc(BigDecimal newPotentialBc)
  {
    BigDecimal oldPotentialBc = potentialBc;
    potentialBc = newPotentialBc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__POTENTIAL_BC, oldPotentialBc, potentialBc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getJunctionExpBc()
  {
    return junctionExpBc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJunctionExpBc(BigDecimal newJunctionExpBc)
  {
    BigDecimal oldJunctionExpBc = junctionExpBc;
    junctionExpBc = newJunctionExpBc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__JUNCTION_EXP_BC, oldJunctionExpBc, junctionExpBc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBaseFractionBcCap()
  {
    return baseFractionBcCap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaseFractionBcCap(BigDecimal newBaseFractionBcCap)
  {
    BigDecimal oldBaseFractionBcCap = baseFractionBcCap;
    baseFractionBcCap = newBaseFractionBcCap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__BASE_FRACTION_BC_CAP, oldBaseFractionBcCap, baseFractionBcCap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTransitTimeReverse()
  {
    return transitTimeReverse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitTimeReverse(BigDecimal newTransitTimeReverse)
  {
    BigDecimal oldTransitTimeReverse = transitTimeReverse;
    transitTimeReverse = newTransitTimeReverse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__TRANSIT_TIME_REVERSE, oldTransitTimeReverse, transitTimeReverse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getCapCs()
  {
    return capCs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCapCs(BigDecimal newCapCs)
  {
    BigDecimal oldCapCs = capCs;
    capCs = newCapCs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__CAP_CS, oldCapCs, capCs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getPotentialSubstrate()
  {
    return potentialSubstrate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPotentialSubstrate(BigDecimal newPotentialSubstrate)
  {
    BigDecimal oldPotentialSubstrate = potentialSubstrate;
    potentialSubstrate = newPotentialSubstrate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__POTENTIAL_SUBSTRATE, oldPotentialSubstrate, potentialSubstrate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getExponentialSubstrate()
  {
    return exponentialSubstrate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExponentialSubstrate(BigDecimal newExponentialSubstrate)
  {
    BigDecimal oldExponentialSubstrate = exponentialSubstrate;
    exponentialSubstrate = newExponentialSubstrate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__EXPONENTIAL_SUBSTRATE, oldExponentialSubstrate, exponentialSubstrate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getBetaExponent()
  {
    return betaExponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBetaExponent(BigDecimal newBetaExponent)
  {
    BigDecimal oldBetaExponent = betaExponent;
    betaExponent = newBetaExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__BETA_EXPONENT, oldBetaExponent, betaExponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getEnergyGap()
  {
    return energyGap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnergyGap(BigDecimal newEnergyGap)
  {
    BigDecimal oldEnergyGap = energyGap;
    energyGap = newEnergyGap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__ENERGY_GAP, oldEnergyGap, energyGap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getTempExpIs()
  {
    return tempExpIs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTempExpIs(BigDecimal newTempExpIs)
  {
    BigDecimal oldTempExpIs = tempExpIs;
    tempExpIs = newTempExpIs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__TEMP_EXP_IS, oldTempExpIs, tempExpIs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseCoefficient()
  {
    return flickerNoiseCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseCoefficient(BigDecimal newFlickerNoiseCoefficient)
  {
    BigDecimal oldFlickerNoiseCoefficient = flickerNoiseCoefficient;
    flickerNoiseCoefficient = newFlickerNoiseCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__FLICKER_NOISE_COEFFICIENT, oldFlickerNoiseCoefficient, flickerNoiseCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getFlickerNoiseExponent()
  {
    return flickerNoiseExponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlickerNoiseExponent(BigDecimal newFlickerNoiseExponent)
  {
    BigDecimal oldFlickerNoiseExponent = flickerNoiseExponent;
    flickerNoiseExponent = newFlickerNoiseExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__FLICKER_NOISE_EXPONENT, oldFlickerNoiseExponent, flickerNoiseExponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getDepletionCapCoefficient()
  {
    return depletionCapCoefficient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDepletionCapCoefficient(BigDecimal newDepletionCapCoefficient)
  {
    BigDecimal oldDepletionCapCoefficient = depletionCapCoefficient;
    depletionCapCoefficient = newDepletionCapCoefficient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__DEPLETION_CAP_COEFFICIENT, oldDepletionCapCoefficient, depletionCapCoefficient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BigDecimal getNominalTemperature()
  {
    return nominalTemperature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNominalTemperature(BigDecimal newNominalTemperature)
  {
    BigDecimal oldNominalTemperature = nominalTemperature;
    nominalTemperature = newNominalTemperature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XSpicePackage.BJT_MODEL__NOMINAL_TEMPERATURE, oldNominalTemperature, nominalTemperature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XSpicePackage.BJT_MODEL__SATURATION_CURRENT:
        return getSaturationCurrent();
      case XSpicePackage.BJT_MODEL__BETA_F:
        return getBetaF();
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_FORWARD:
        return getEmissionCoefficientForward();
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_FORWARD:
        return getEarlyVoltageForward();
      case XSpicePackage.BJT_MODEL__ROLL_OFF_FORWARD:
        return getRollOffForward();
      case XSpicePackage.BJT_MODEL__LEAK_BE_CURRENT:
        return getLeakBeCurrent();
      case XSpicePackage.BJT_MODEL__LEAK_BE_EMISSION_COEFFICIENT:
        return getLeakBeEmissionCoefficient();
      case XSpicePackage.BJT_MODEL__BETA_R:
        return getBetaR();
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_REVERSE:
        return getEmissionCoefficientReverse();
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_REVERSE:
        return getEarlyVoltageReverse();
      case XSpicePackage.BJT_MODEL__ROLL_OFF_REVERSE:
        return getRollOffReverse();
      case XSpicePackage.BJT_MODEL__LEAK_BC_CURRENT:
        return getLeakBcCurrent();
      case XSpicePackage.BJT_MODEL__LEAK_BC_EMISSION_COEFFICIENT:
        return getLeakBcEmissionCoefficient();
      case XSpicePackage.BJT_MODEL__BASE_RESIST:
        return getBaseResist();
      case XSpicePackage.BJT_MODEL__BASE_CURRENT_HALF_RESIST:
        return getBaseCurrentHalfResist();
      case XSpicePackage.BJT_MODEL__MINIMUM_BASE_RESISTANCE:
        return getMinimumBaseResistance();
      case XSpicePackage.BJT_MODEL__EMITTER_RESISTANCE:
        return getEmitterResistance();
      case XSpicePackage.BJT_MODEL__COLLECTOR_RESISTANCE:
        return getCollectorResistance();
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BE:
        return getDepletionCapBe();
      case XSpicePackage.BJT_MODEL__POTENTIAL_BE:
        return getPotentialBe();
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BE:
        return getJunctionExpBe();
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD:
        return getTransitTimeForward();
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD:
        return getTransitTimeBiasCoefficientForward();
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD_VOLTAGE_BC:
        return getTransitTimeForwardVoltageBc();
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_HIGH_CURRENT_FORWARD:
        return getTransitTimeHighCurrentForward();
      case XSpicePackage.BJT_MODEL__EXCESS_PHASE:
        return getExcessPhase();
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BC:
        return getDepletionCapBc();
      case XSpicePackage.BJT_MODEL__POTENTIAL_BC:
        return getPotentialBc();
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BC:
        return getJunctionExpBc();
      case XSpicePackage.BJT_MODEL__BASE_FRACTION_BC_CAP:
        return getBaseFractionBcCap();
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_REVERSE:
        return getTransitTimeReverse();
      case XSpicePackage.BJT_MODEL__CAP_CS:
        return getCapCs();
      case XSpicePackage.BJT_MODEL__POTENTIAL_SUBSTRATE:
        return getPotentialSubstrate();
      case XSpicePackage.BJT_MODEL__EXPONENTIAL_SUBSTRATE:
        return getExponentialSubstrate();
      case XSpicePackage.BJT_MODEL__BETA_EXPONENT:
        return getBetaExponent();
      case XSpicePackage.BJT_MODEL__ENERGY_GAP:
        return getEnergyGap();
      case XSpicePackage.BJT_MODEL__TEMP_EXP_IS:
        return getTempExpIs();
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_COEFFICIENT:
        return getFlickerNoiseCoefficient();
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_EXPONENT:
        return getFlickerNoiseExponent();
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_COEFFICIENT:
        return getDepletionCapCoefficient();
      case XSpicePackage.BJT_MODEL__NOMINAL_TEMPERATURE:
        return getNominalTemperature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XSpicePackage.BJT_MODEL__SATURATION_CURRENT:
        setSaturationCurrent((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__BETA_F:
        setBetaF((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_FORWARD:
        setEmissionCoefficientForward((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_FORWARD:
        setEarlyVoltageForward((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__ROLL_OFF_FORWARD:
        setRollOffForward((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BE_CURRENT:
        setLeakBeCurrent((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BE_EMISSION_COEFFICIENT:
        setLeakBeEmissionCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__BETA_R:
        setBetaR((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_REVERSE:
        setEmissionCoefficientReverse((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_REVERSE:
        setEarlyVoltageReverse((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__ROLL_OFF_REVERSE:
        setRollOffReverse((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BC_CURRENT:
        setLeakBcCurrent((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BC_EMISSION_COEFFICIENT:
        setLeakBcEmissionCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__BASE_RESIST:
        setBaseResist((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__BASE_CURRENT_HALF_RESIST:
        setBaseCurrentHalfResist((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__MINIMUM_BASE_RESISTANCE:
        setMinimumBaseResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EMITTER_RESISTANCE:
        setEmitterResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__COLLECTOR_RESISTANCE:
        setCollectorResistance((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BE:
        setDepletionCapBe((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__POTENTIAL_BE:
        setPotentialBe((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BE:
        setJunctionExpBe((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD:
        setTransitTimeForward((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD:
        setTransitTimeBiasCoefficientForward((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD_VOLTAGE_BC:
        setTransitTimeForwardVoltageBc((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_HIGH_CURRENT_FORWARD:
        setTransitTimeHighCurrentForward((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EXCESS_PHASE:
        setExcessPhase((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BC:
        setDepletionCapBc((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__POTENTIAL_BC:
        setPotentialBc((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BC:
        setJunctionExpBc((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__BASE_FRACTION_BC_CAP:
        setBaseFractionBcCap((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_REVERSE:
        setTransitTimeReverse((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__CAP_CS:
        setCapCs((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__POTENTIAL_SUBSTRATE:
        setPotentialSubstrate((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__EXPONENTIAL_SUBSTRATE:
        setExponentialSubstrate((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__BETA_EXPONENT:
        setBetaExponent((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__ENERGY_GAP:
        setEnergyGap((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__TEMP_EXP_IS:
        setTempExpIs((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_COEFFICIENT:
        setDepletionCapCoefficient((BigDecimal)newValue);
        return;
      case XSpicePackage.BJT_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature((BigDecimal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.BJT_MODEL__SATURATION_CURRENT:
        setSaturationCurrent(SATURATION_CURRENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__BETA_F:
        setBetaF(BETA_F_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_FORWARD:
        setEmissionCoefficientForward(EMISSION_COEFFICIENT_FORWARD_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_FORWARD:
        setEarlyVoltageForward(EARLY_VOLTAGE_FORWARD_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__ROLL_OFF_FORWARD:
        setRollOffForward(ROLL_OFF_FORWARD_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BE_CURRENT:
        setLeakBeCurrent(LEAK_BE_CURRENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BE_EMISSION_COEFFICIENT:
        setLeakBeEmissionCoefficient(LEAK_BE_EMISSION_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__BETA_R:
        setBetaR(BETA_R_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_REVERSE:
        setEmissionCoefficientReverse(EMISSION_COEFFICIENT_REVERSE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_REVERSE:
        setEarlyVoltageReverse(EARLY_VOLTAGE_REVERSE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__ROLL_OFF_REVERSE:
        setRollOffReverse(ROLL_OFF_REVERSE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BC_CURRENT:
        setLeakBcCurrent(LEAK_BC_CURRENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__LEAK_BC_EMISSION_COEFFICIENT:
        setLeakBcEmissionCoefficient(LEAK_BC_EMISSION_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__BASE_RESIST:
        setBaseResist(BASE_RESIST_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__BASE_CURRENT_HALF_RESIST:
        setBaseCurrentHalfResist(BASE_CURRENT_HALF_RESIST_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__MINIMUM_BASE_RESISTANCE:
        setMinimumBaseResistance(MINIMUM_BASE_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EMITTER_RESISTANCE:
        setEmitterResistance(EMITTER_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__COLLECTOR_RESISTANCE:
        setCollectorResistance(COLLECTOR_RESISTANCE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BE:
        setDepletionCapBe(DEPLETION_CAP_BE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__POTENTIAL_BE:
        setPotentialBe(POTENTIAL_BE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BE:
        setJunctionExpBe(JUNCTION_EXP_BE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD:
        setTransitTimeForward(TRANSIT_TIME_FORWARD_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD:
        setTransitTimeBiasCoefficientForward(TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD_VOLTAGE_BC:
        setTransitTimeForwardVoltageBc(TRANSIT_TIME_FORWARD_VOLTAGE_BC_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_HIGH_CURRENT_FORWARD:
        setTransitTimeHighCurrentForward(TRANSIT_TIME_HIGH_CURRENT_FORWARD_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EXCESS_PHASE:
        setExcessPhase(EXCESS_PHASE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BC:
        setDepletionCapBc(DEPLETION_CAP_BC_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__POTENTIAL_BC:
        setPotentialBc(POTENTIAL_BC_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BC:
        setJunctionExpBc(JUNCTION_EXP_BC_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__BASE_FRACTION_BC_CAP:
        setBaseFractionBcCap(BASE_FRACTION_BC_CAP_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_REVERSE:
        setTransitTimeReverse(TRANSIT_TIME_REVERSE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__CAP_CS:
        setCapCs(CAP_CS_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__POTENTIAL_SUBSTRATE:
        setPotentialSubstrate(POTENTIAL_SUBSTRATE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__EXPONENTIAL_SUBSTRATE:
        setExponentialSubstrate(EXPONENTIAL_SUBSTRATE_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__BETA_EXPONENT:
        setBetaExponent(BETA_EXPONENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__ENERGY_GAP:
        setEnergyGap(ENERGY_GAP_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__TEMP_EXP_IS:
        setTempExpIs(TEMP_EXP_IS_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_COEFFICIENT:
        setFlickerNoiseCoefficient(FLICKER_NOISE_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_EXPONENT:
        setFlickerNoiseExponent(FLICKER_NOISE_EXPONENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_COEFFICIENT:
        setDepletionCapCoefficient(DEPLETION_CAP_COEFFICIENT_EDEFAULT);
        return;
      case XSpicePackage.BJT_MODEL__NOMINAL_TEMPERATURE:
        setNominalTemperature(NOMINAL_TEMPERATURE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XSpicePackage.BJT_MODEL__SATURATION_CURRENT:
        return SATURATION_CURRENT_EDEFAULT == null ? saturationCurrent != null : !SATURATION_CURRENT_EDEFAULT.equals(saturationCurrent);
      case XSpicePackage.BJT_MODEL__BETA_F:
        return BETA_F_EDEFAULT == null ? betaF != null : !BETA_F_EDEFAULT.equals(betaF);
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_FORWARD:
        return EMISSION_COEFFICIENT_FORWARD_EDEFAULT == null ? emissionCoefficientForward != null : !EMISSION_COEFFICIENT_FORWARD_EDEFAULT.equals(emissionCoefficientForward);
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_FORWARD:
        return EARLY_VOLTAGE_FORWARD_EDEFAULT == null ? earlyVoltageForward != null : !EARLY_VOLTAGE_FORWARD_EDEFAULT.equals(earlyVoltageForward);
      case XSpicePackage.BJT_MODEL__ROLL_OFF_FORWARD:
        return ROLL_OFF_FORWARD_EDEFAULT == null ? rollOffForward != null : !ROLL_OFF_FORWARD_EDEFAULT.equals(rollOffForward);
      case XSpicePackage.BJT_MODEL__LEAK_BE_CURRENT:
        return LEAK_BE_CURRENT_EDEFAULT == null ? leakBeCurrent != null : !LEAK_BE_CURRENT_EDEFAULT.equals(leakBeCurrent);
      case XSpicePackage.BJT_MODEL__LEAK_BE_EMISSION_COEFFICIENT:
        return LEAK_BE_EMISSION_COEFFICIENT_EDEFAULT == null ? leakBeEmissionCoefficient != null : !LEAK_BE_EMISSION_COEFFICIENT_EDEFAULT.equals(leakBeEmissionCoefficient);
      case XSpicePackage.BJT_MODEL__BETA_R:
        return BETA_R_EDEFAULT == null ? betaR != null : !BETA_R_EDEFAULT.equals(betaR);
      case XSpicePackage.BJT_MODEL__EMISSION_COEFFICIENT_REVERSE:
        return EMISSION_COEFFICIENT_REVERSE_EDEFAULT == null ? emissionCoefficientReverse != null : !EMISSION_COEFFICIENT_REVERSE_EDEFAULT.equals(emissionCoefficientReverse);
      case XSpicePackage.BJT_MODEL__EARLY_VOLTAGE_REVERSE:
        return EARLY_VOLTAGE_REVERSE_EDEFAULT == null ? earlyVoltageReverse != null : !EARLY_VOLTAGE_REVERSE_EDEFAULT.equals(earlyVoltageReverse);
      case XSpicePackage.BJT_MODEL__ROLL_OFF_REVERSE:
        return ROLL_OFF_REVERSE_EDEFAULT == null ? rollOffReverse != null : !ROLL_OFF_REVERSE_EDEFAULT.equals(rollOffReverse);
      case XSpicePackage.BJT_MODEL__LEAK_BC_CURRENT:
        return LEAK_BC_CURRENT_EDEFAULT == null ? leakBcCurrent != null : !LEAK_BC_CURRENT_EDEFAULT.equals(leakBcCurrent);
      case XSpicePackage.BJT_MODEL__LEAK_BC_EMISSION_COEFFICIENT:
        return LEAK_BC_EMISSION_COEFFICIENT_EDEFAULT == null ? leakBcEmissionCoefficient != null : !LEAK_BC_EMISSION_COEFFICIENT_EDEFAULT.equals(leakBcEmissionCoefficient);
      case XSpicePackage.BJT_MODEL__BASE_RESIST:
        return BASE_RESIST_EDEFAULT == null ? baseResist != null : !BASE_RESIST_EDEFAULT.equals(baseResist);
      case XSpicePackage.BJT_MODEL__BASE_CURRENT_HALF_RESIST:
        return BASE_CURRENT_HALF_RESIST_EDEFAULT == null ? baseCurrentHalfResist != null : !BASE_CURRENT_HALF_RESIST_EDEFAULT.equals(baseCurrentHalfResist);
      case XSpicePackage.BJT_MODEL__MINIMUM_BASE_RESISTANCE:
        return MINIMUM_BASE_RESISTANCE_EDEFAULT == null ? minimumBaseResistance != null : !MINIMUM_BASE_RESISTANCE_EDEFAULT.equals(minimumBaseResistance);
      case XSpicePackage.BJT_MODEL__EMITTER_RESISTANCE:
        return EMITTER_RESISTANCE_EDEFAULT == null ? emitterResistance != null : !EMITTER_RESISTANCE_EDEFAULT.equals(emitterResistance);
      case XSpicePackage.BJT_MODEL__COLLECTOR_RESISTANCE:
        return COLLECTOR_RESISTANCE_EDEFAULT == null ? collectorResistance != null : !COLLECTOR_RESISTANCE_EDEFAULT.equals(collectorResistance);
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BE:
        return DEPLETION_CAP_BE_EDEFAULT == null ? depletionCapBe != null : !DEPLETION_CAP_BE_EDEFAULT.equals(depletionCapBe);
      case XSpicePackage.BJT_MODEL__POTENTIAL_BE:
        return POTENTIAL_BE_EDEFAULT == null ? potentialBe != null : !POTENTIAL_BE_EDEFAULT.equals(potentialBe);
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BE:
        return JUNCTION_EXP_BE_EDEFAULT == null ? junctionExpBe != null : !JUNCTION_EXP_BE_EDEFAULT.equals(junctionExpBe);
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD:
        return TRANSIT_TIME_FORWARD_EDEFAULT == null ? transitTimeForward != null : !TRANSIT_TIME_FORWARD_EDEFAULT.equals(transitTimeForward);
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD:
        return TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD_EDEFAULT == null ? transitTimeBiasCoefficientForward != null : !TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD_EDEFAULT.equals(transitTimeBiasCoefficientForward);
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_FORWARD_VOLTAGE_BC:
        return TRANSIT_TIME_FORWARD_VOLTAGE_BC_EDEFAULT == null ? transitTimeForwardVoltageBc != null : !TRANSIT_TIME_FORWARD_VOLTAGE_BC_EDEFAULT.equals(transitTimeForwardVoltageBc);
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_HIGH_CURRENT_FORWARD:
        return TRANSIT_TIME_HIGH_CURRENT_FORWARD_EDEFAULT == null ? transitTimeHighCurrentForward != null : !TRANSIT_TIME_HIGH_CURRENT_FORWARD_EDEFAULT.equals(transitTimeHighCurrentForward);
      case XSpicePackage.BJT_MODEL__EXCESS_PHASE:
        return EXCESS_PHASE_EDEFAULT == null ? excessPhase != null : !EXCESS_PHASE_EDEFAULT.equals(excessPhase);
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_BC:
        return DEPLETION_CAP_BC_EDEFAULT == null ? depletionCapBc != null : !DEPLETION_CAP_BC_EDEFAULT.equals(depletionCapBc);
      case XSpicePackage.BJT_MODEL__POTENTIAL_BC:
        return POTENTIAL_BC_EDEFAULT == null ? potentialBc != null : !POTENTIAL_BC_EDEFAULT.equals(potentialBc);
      case XSpicePackage.BJT_MODEL__JUNCTION_EXP_BC:
        return JUNCTION_EXP_BC_EDEFAULT == null ? junctionExpBc != null : !JUNCTION_EXP_BC_EDEFAULT.equals(junctionExpBc);
      case XSpicePackage.BJT_MODEL__BASE_FRACTION_BC_CAP:
        return BASE_FRACTION_BC_CAP_EDEFAULT == null ? baseFractionBcCap != null : !BASE_FRACTION_BC_CAP_EDEFAULT.equals(baseFractionBcCap);
      case XSpicePackage.BJT_MODEL__TRANSIT_TIME_REVERSE:
        return TRANSIT_TIME_REVERSE_EDEFAULT == null ? transitTimeReverse != null : !TRANSIT_TIME_REVERSE_EDEFAULT.equals(transitTimeReverse);
      case XSpicePackage.BJT_MODEL__CAP_CS:
        return CAP_CS_EDEFAULT == null ? capCs != null : !CAP_CS_EDEFAULT.equals(capCs);
      case XSpicePackage.BJT_MODEL__POTENTIAL_SUBSTRATE:
        return POTENTIAL_SUBSTRATE_EDEFAULT == null ? potentialSubstrate != null : !POTENTIAL_SUBSTRATE_EDEFAULT.equals(potentialSubstrate);
      case XSpicePackage.BJT_MODEL__EXPONENTIAL_SUBSTRATE:
        return EXPONENTIAL_SUBSTRATE_EDEFAULT == null ? exponentialSubstrate != null : !EXPONENTIAL_SUBSTRATE_EDEFAULT.equals(exponentialSubstrate);
      case XSpicePackage.BJT_MODEL__BETA_EXPONENT:
        return BETA_EXPONENT_EDEFAULT == null ? betaExponent != null : !BETA_EXPONENT_EDEFAULT.equals(betaExponent);
      case XSpicePackage.BJT_MODEL__ENERGY_GAP:
        return ENERGY_GAP_EDEFAULT == null ? energyGap != null : !ENERGY_GAP_EDEFAULT.equals(energyGap);
      case XSpicePackage.BJT_MODEL__TEMP_EXP_IS:
        return TEMP_EXP_IS_EDEFAULT == null ? tempExpIs != null : !TEMP_EXP_IS_EDEFAULT.equals(tempExpIs);
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_COEFFICIENT:
        return FLICKER_NOISE_COEFFICIENT_EDEFAULT == null ? flickerNoiseCoefficient != null : !FLICKER_NOISE_COEFFICIENT_EDEFAULT.equals(flickerNoiseCoefficient);
      case XSpicePackage.BJT_MODEL__FLICKER_NOISE_EXPONENT:
        return FLICKER_NOISE_EXPONENT_EDEFAULT == null ? flickerNoiseExponent != null : !FLICKER_NOISE_EXPONENT_EDEFAULT.equals(flickerNoiseExponent);
      case XSpicePackage.BJT_MODEL__DEPLETION_CAP_COEFFICIENT:
        return DEPLETION_CAP_COEFFICIENT_EDEFAULT == null ? depletionCapCoefficient != null : !DEPLETION_CAP_COEFFICIENT_EDEFAULT.equals(depletionCapCoefficient);
      case XSpicePackage.BJT_MODEL__NOMINAL_TEMPERATURE:
        return NOMINAL_TEMPERATURE_EDEFAULT == null ? nominalTemperature != null : !NOMINAL_TEMPERATURE_EDEFAULT.equals(nominalTemperature);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (saturationCurrent: ");
    result.append(saturationCurrent);
    result.append(", betaF: ");
    result.append(betaF);
    result.append(", emissionCoefficientForward: ");
    result.append(emissionCoefficientForward);
    result.append(", earlyVoltageForward: ");
    result.append(earlyVoltageForward);
    result.append(", rollOffForward: ");
    result.append(rollOffForward);
    result.append(", leakBeCurrent: ");
    result.append(leakBeCurrent);
    result.append(", leakBeEmissionCoefficient: ");
    result.append(leakBeEmissionCoefficient);
    result.append(", betaR: ");
    result.append(betaR);
    result.append(", emissionCoefficientReverse: ");
    result.append(emissionCoefficientReverse);
    result.append(", earlyVoltageReverse: ");
    result.append(earlyVoltageReverse);
    result.append(", rollOffReverse: ");
    result.append(rollOffReverse);
    result.append(", leakBcCurrent: ");
    result.append(leakBcCurrent);
    result.append(", leakBcEmissionCoefficient: ");
    result.append(leakBcEmissionCoefficient);
    result.append(", baseResist: ");
    result.append(baseResist);
    result.append(", baseCurrentHalfResist: ");
    result.append(baseCurrentHalfResist);
    result.append(", minimumBaseResistance: ");
    result.append(minimumBaseResistance);
    result.append(", emitterResistance: ");
    result.append(emitterResistance);
    result.append(", collectorResistance: ");
    result.append(collectorResistance);
    result.append(", depletionCapBe: ");
    result.append(depletionCapBe);
    result.append(", potentialBe: ");
    result.append(potentialBe);
    result.append(", junctionExpBe: ");
    result.append(junctionExpBe);
    result.append(", transitTimeForward: ");
    result.append(transitTimeForward);
    result.append(", transitTimeBiasCoefficientForward: ");
    result.append(transitTimeBiasCoefficientForward);
    result.append(", transitTimeForwardVoltageBc: ");
    result.append(transitTimeForwardVoltageBc);
    result.append(", transitTimeHighCurrentForward: ");
    result.append(transitTimeHighCurrentForward);
    result.append(", excessPhase: ");
    result.append(excessPhase);
    result.append(", depletionCapBc: ");
    result.append(depletionCapBc);
    result.append(", potentialBc: ");
    result.append(potentialBc);
    result.append(", junctionExpBc: ");
    result.append(junctionExpBc);
    result.append(", baseFractionBcCap: ");
    result.append(baseFractionBcCap);
    result.append(", transitTimeReverse: ");
    result.append(transitTimeReverse);
    result.append(", capCs: ");
    result.append(capCs);
    result.append(", potentialSubstrate: ");
    result.append(potentialSubstrate);
    result.append(", exponentialSubstrate: ");
    result.append(exponentialSubstrate);
    result.append(", betaExponent: ");
    result.append(betaExponent);
    result.append(", energyGap: ");
    result.append(energyGap);
    result.append(", tempExpIs: ");
    result.append(tempExpIs);
    result.append(", flickerNoiseCoefficient: ");
    result.append(flickerNoiseCoefficient);
    result.append(", flickerNoiseExponent: ");
    result.append(flickerNoiseExponent);
    result.append(", depletionCapCoefficient: ");
    result.append(depletionCapCoefficient);
    result.append(", nominalTemperature: ");
    result.append(nominalTemperature);
    result.append(')');
    return result.toString();
  }

} //BJTModelImpl
