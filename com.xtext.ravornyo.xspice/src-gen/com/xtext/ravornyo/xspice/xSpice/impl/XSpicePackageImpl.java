/**
 * generated by Xtext 2.18.0.M3
 */
package com.xtext.ravornyo.xspice.xSpice.impl;

import com.xtext.ravornyo.xspice.xSpice.ACSimulation;
import com.xtext.ravornyo.xspice.xSpice.BJTModel;
import com.xtext.ravornyo.xspice.xSpice.Capacitor;
import com.xtext.ravornyo.xspice.xSpice.CapacitorModel;
import com.xtext.ravornyo.xspice.xSpice.Compilation;
import com.xtext.ravornyo.xspice.xSpice.Component;
import com.xtext.ravornyo.xspice.xSpice.CurrentExport;
import com.xtext.ravornyo.xspice.xSpice.CurrentSource;
import com.xtext.ravornyo.xspice.xSpice.CurrentSwitch;
import com.xtext.ravornyo.xspice.xSpice.CurrentSwitchModel;
import com.xtext.ravornyo.xspice.xSpice.DCSimulation;
import com.xtext.ravornyo.xspice.xSpice.DecadeSweep;
import com.xtext.ravornyo.xspice.xSpice.Diode;
import com.xtext.ravornyo.xspice.xSpice.DiodeModel;
import com.xtext.ravornyo.xspice.xSpice.Entity;
import com.xtext.ravornyo.xspice.xSpice.Exp;
import com.xtext.ravornyo.xspice.xSpice.Export;
import com.xtext.ravornyo.xspice.xSpice.GeometericSweep;
import com.xtext.ravornyo.xspice.xSpice.Inductor;
import com.xtext.ravornyo.xspice.xSpice.InitialCondition;
import com.xtext.ravornyo.xspice.xSpice.IntegrationMethod;
import com.xtext.ravornyo.xspice.xSpice.JFETModel;
import com.xtext.ravornyo.xspice.xSpice.LinearSweep;
import com.xtext.ravornyo.xspice.xSpice.MOSFETModel;
import com.xtext.ravornyo.xspice.xSpice.MutualInductance;
import com.xtext.ravornyo.xspice.xSpice.NodeSet;
import com.xtext.ravornyo.xspice.xSpice.NodeSetEntry;
import com.xtext.ravornyo.xspice.xSpice.NoiseSimulation;
import com.xtext.ravornyo.xspice.xSpice.OctaveSweep;
import com.xtext.ravornyo.xspice.xSpice.Options;
import com.xtext.ravornyo.xspice.xSpice.Output;
import com.xtext.ravornyo.xspice.xSpice.ParameterSweep;
import com.xtext.ravornyo.xspice.xSpice.Plot;
import com.xtext.ravornyo.xspice.xSpice.Print;
import com.xtext.ravornyo.xspice.xSpice.Pulse;
import com.xtext.ravornyo.xspice.xSpice.Resistor;
import com.xtext.ravornyo.xspice.xSpice.ResistorModel;
import com.xtext.ravornyo.xspice.xSpice.Simulation;
import com.xtext.ravornyo.xspice.xSpice.Sine;
import com.xtext.ravornyo.xspice.xSpice.SubCircuit;
import com.xtext.ravornyo.xspice.xSpice.SubCircuitDefinition;
import com.xtext.ravornyo.xspice.xSpice.TransientSimulation;
import com.xtext.ravornyo.xspice.xSpice.VSource;
import com.xtext.ravornyo.xspice.xSpice.VoltageExport;
import com.xtext.ravornyo.xspice.xSpice.VoltageSwitch;
import com.xtext.ravornyo.xspice.xSpice.VoltageSwitchModel;
import com.xtext.ravornyo.xspice.xSpice.Waveform;
import com.xtext.ravornyo.xspice.xSpice.XSpiceFactory;
import com.xtext.ravornyo.xspice.xSpice.XSpicePackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XSpicePackageImpl extends EPackageImpl implements XSpicePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compilationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass entityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass componentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subCircuitDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subCircuitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass resistorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass resistorModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass capacitorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass capacitorModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inductorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mutualInductanceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass voltageSwitchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass voltageSwitchModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass currentSwitchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass currentSwitchModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diodeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diodeModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mosfetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mosfetModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bjtEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bjtModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jfetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jfetModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vSourceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass currentSourceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vcvsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vccsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cccsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ccvsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass geometericSweepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass linearSweepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass octaveSweepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass decadeSweepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterSweepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simulationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass acSimulationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dcSimulationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass noiseSimulationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass transientSimulationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass printEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass plotEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass exportEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass voltageExportEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass currentExportEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass waveformEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pulseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pwlEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sffmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass amEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass optionsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeSetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initialConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass nodeSetEntryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum prtypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum integrationMethodEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see com.xtext.ravornyo.xspice.xSpice.XSpicePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private XSpicePackageImpl()
  {
    super(eNS_URI, XSpiceFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link XSpicePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static XSpicePackage init()
  {
    if (isInited) return (XSpicePackage)EPackage.Registry.INSTANCE.getEPackage(XSpicePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredXSpicePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    XSpicePackageImpl theXSpicePackage = registeredXSpicePackage instanceof XSpicePackageImpl ? (XSpicePackageImpl)registeredXSpicePackage : new XSpicePackageImpl();

    isInited = true;

    // Create package meta-data objects
    theXSpicePackage.createPackageContents();

    // Initialize created meta-data
    theXSpicePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theXSpicePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(XSpicePackage.eNS_URI, theXSpicePackage);
    return theXSpicePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCompilation()
  {
    return compilationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Definitions()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Entities()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Simulations()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Outputs()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Options()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Ic()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompilation_Nodeset()
  {
    return (EReference)compilationEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEntity()
  {
    return entityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEntity_Name()
  {
    return (EAttribute)entityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComponent()
  {
    return componentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getComponent_Nodes()
  {
    return (EAttribute)componentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSubCircuitDefinition()
  {
    return subCircuitDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSubCircuitDefinition_Name()
  {
    return (EAttribute)subCircuitDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSubCircuitDefinition_Pins()
  {
    return (EAttribute)subCircuitDefinitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubCircuitDefinition_Definitions()
  {
    return (EReference)subCircuitDefinitionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubCircuitDefinition_Entities()
  {
    return (EReference)subCircuitDefinitionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSubCircuit()
  {
    return subCircuitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSubCircuit_Nodes()
  {
    return (EAttribute)subCircuitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubCircuit_Definition()
  {
    return (EReference)subCircuitEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getResistor()
  {
    return resistorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistor_Resistance()
  {
    return (EAttribute)resistorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistor_Model()
  {
    return (EAttribute)resistorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistor_Length()
  {
    return (EAttribute)resistorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistor_Width()
  {
    return (EAttribute)resistorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistor_Temp()
  {
    return (EAttribute)resistorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getResistorModel()
  {
    return resistorModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistorModel_SheetResistance()
  {
    return (EAttribute)resistorModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistorModel_DefaultWidth()
  {
    return (EAttribute)resistorModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistorModel_Narrow()
  {
    return (EAttribute)resistorModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistorModel_TemperatureCoefficient1()
  {
    return (EAttribute)resistorModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistorModel_TemperatureCoefficient2()
  {
    return (EAttribute)resistorModelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResistorModel_NominalTemperature()
  {
    return (EAttribute)resistorModelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCapacitor()
  {
    return capacitorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitor_Capacitance()
  {
    return (EAttribute)capacitorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitor_Model()
  {
    return (EAttribute)capacitorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitor_Length()
  {
    return (EAttribute)capacitorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitor_Width()
  {
    return (EAttribute)capacitorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitor_InitialCondition()
  {
    return (EAttribute)capacitorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCapacitorModel()
  {
    return capacitorModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_JunctionCap()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_JunctionCapSidewall()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_DefaultWidth()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_Narrow()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_TemperatureCoefficient1()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_TemperatureCoefficient2()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCapacitorModel_NominalTemperature()
  {
    return (EAttribute)capacitorModelEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInductor()
  {
    return inductorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInductor_Inductance()
  {
    return (EAttribute)inductorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInductor_InitialCondition()
  {
    return (EAttribute)inductorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMutualInductance()
  {
    return mutualInductanceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMutualInductance_Inductor1()
  {
    return (EAttribute)mutualInductanceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMutualInductance_Inductor2()
  {
    return (EAttribute)mutualInductanceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMutualInductance_Coupling()
  {
    return (EAttribute)mutualInductanceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVoltageSwitch()
  {
    return voltageSwitchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVoltageSwitch_Model()
  {
    return (EAttribute)voltageSwitchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVoltageSwitch_ZeroState()
  {
    return (EAttribute)voltageSwitchEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVoltageSwitchModel()
  {
    return voltageSwitchModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVoltageSwitchModel_Threshold()
  {
    return (EAttribute)voltageSwitchModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVoltageSwitchModel_Hysteresis()
  {
    return (EAttribute)voltageSwitchModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVoltageSwitchModel_OnResistance()
  {
    return (EAttribute)voltageSwitchModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVoltageSwitchModel_OffResistance()
  {
    return (EAttribute)voltageSwitchModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCurrentSwitch()
  {
    return currentSwitchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitch_ControllingSource()
  {
    return (EAttribute)currentSwitchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitch_Model()
  {
    return (EAttribute)currentSwitchEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitch_ZeroState()
  {
    return (EAttribute)currentSwitchEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCurrentSwitchModel()
  {
    return currentSwitchModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitchModel_Threshold()
  {
    return (EAttribute)currentSwitchModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitchModel_Hysteresis()
  {
    return (EAttribute)currentSwitchModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitchModel_OnResistance()
  {
    return (EAttribute)currentSwitchModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSwitchModel_OffResistance()
  {
    return (EAttribute)currentSwitchModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiode()
  {
    return diodeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiode_Model()
  {
    return (EAttribute)diodeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiode_Area()
  {
    return (EAttribute)diodeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiode_Off()
  {
    return (EAttribute)diodeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiode_Ic()
  {
    return (EAttribute)diodeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiode_Temp()
  {
    return (EAttribute)diodeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiodeModel()
  {
    return diodeModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_SaturationCurrent()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_Resistance()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_EmissionCoefficient()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_TransitTime()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_JunctionCap()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_JunctionPotential()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_GradingCoefficient()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_ActivationEnergy()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_SaturationCurrentExp()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_FlickerNoiseCoefficient()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_FlickerNoiseExponent()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_DepletionCapCoefficient()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_BreakdownVoltage()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_BreakdownCurrent()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiodeModel_NominalTemperature()
  {
    return (EAttribute)diodeModelEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMOSFET()
  {
    return mosfetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_Model()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_Length()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_Width()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_DrainArea()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_SourceArea()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_DrainPerimeter()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_SourcePerimeter()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_DrainSquares()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_SourceSquares()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_Off()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_Ic()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFET_Temp()
  {
    return (EAttribute)mosfetEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMOSFETModel()
  {
    return mosfetModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Level()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Vt0()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Transconductance()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Gamma()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Phi()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Lambda()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_DrainResistance()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_SourceResistance()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_CapBd()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_CapBs()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_JunctionSatCur()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_BulkJunctionPotential()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_GateSourceOverlapCapFactor()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_GateDrainOverlapCapFactor()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_GateBulkOverlapCapFactor()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_SheetResistance()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_BulkCapFactor()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_BulkJunctionBotGradingCoefficient()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_SidewallCapFactor()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(18);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_BulkJunctionSideGradingCoefficient()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(19);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_JunctionSatCurDensity()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(20);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_OxideThickness()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(21);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_SubstrateDoping()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(22);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_SurfaceStateDensity()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(23);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Nfs()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(24);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_GateType()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(25);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_Xj()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(26);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_LateralDiffusion()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(27);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_SurfaceMobility()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(28);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_FlickerNoiseCoefficient()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(29);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_FlickerNoiseExponent()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(30);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_ForwardCapDepletionCoefficient()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(31);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMOSFETModel_NominalTemperature()
  {
    return (EAttribute)mosfetModelEClass.getEStructuralFeatures().get(32);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBJT()
  {
    return bjtEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJT_Model()
  {
    return (EAttribute)bjtEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJT_Area()
  {
    return (EAttribute)bjtEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJT_Off()
  {
    return (EAttribute)bjtEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJT_Ic()
  {
    return (EAttribute)bjtEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJT_Temp()
  {
    return (EAttribute)bjtEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBJTModel()
  {
    return bjtModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_SaturationCurrent()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_BetaF()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_EmissionCoefficientForward()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_EarlyVoltageForward()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_RollOffForward()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_LeakBeCurrent()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_LeakBeEmissionCoefficient()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_BetaR()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_EmissionCoefficientReverse()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_EarlyVoltageReverse()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_RollOffReverse()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_LeakBcCurrent()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_LeakBcEmissionCoefficient()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_BaseResist()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_BaseCurrentHalfResist()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_MinimumBaseResistance()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_EmitterResistance()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_CollectorResistance()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_DepletionCapBe()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(18);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_PotentialBe()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(19);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_JunctionExpBe()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(20);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_TransitTimeForward()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(21);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_TransitTimeBiasCoefficientForward()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(22);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_TransitTimeForwardVoltageBc()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(23);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_TransitTimeHighCurrentForward()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(24);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_ExcessPhase()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(25);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_DepletionCapBc()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(26);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_PotentialBc()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(27);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_JunctionExpBc()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(28);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_BaseFractionBcCap()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(29);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_TransitTimeReverse()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(30);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_CapCs()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(31);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_PotentialSubstrate()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(32);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_ExponentialSubstrate()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(33);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_BetaExponent()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(34);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_EnergyGap()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(35);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_TempExpIs()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(36);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_FlickerNoiseCoefficient()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(37);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_FlickerNoiseExponent()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(38);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_DepletionCapCoefficient()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(39);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBJTModel_NominalTemperature()
  {
    return (EAttribute)bjtModelEClass.getEStructuralFeatures().get(40);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJFET()
  {
    return jfetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFET_Model()
  {
    return (EAttribute)jfetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFET_Area()
  {
    return (EAttribute)jfetEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFET_Off()
  {
    return (EAttribute)jfetEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFET_Ic()
  {
    return (EAttribute)jfetEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFET_Temp()
  {
    return (EAttribute)jfetEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJFETModel()
  {
    return jfetModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_Threshold()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_Beta()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_Lambda()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_DrainResistance()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_SourceResistance()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_CapGs()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_CapGd()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_GatePotential()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_GateSaturationCurrent()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_B()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_FlickerNoiseCoefficient()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_FlickerNoiseExponent()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_DepletionCapCoefficient()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJFETModel_NominalTemperature()
  {
    return (EAttribute)jfetModelEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVSource()
  {
    return vSourceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVSource_Dc()
  {
    return (EAttribute)vSourceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVSource_Ac()
  {
    return (EAttribute)vSourceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVSource_Waveform()
  {
    return (EReference)vSourceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCurrentSource()
  {
    return currentSourceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSource_Dc()
  {
    return (EAttribute)currentSourceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCurrentSource_Ac()
  {
    return (EAttribute)currentSourceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCurrentSource_Waveform()
  {
    return (EReference)currentSourceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVCVS()
  {
    return vcvsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVCVS_Gain()
  {
    return (EAttribute)vcvsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVCCS()
  {
    return vccsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVCCS_Transconductance()
  {
    return (EAttribute)vccsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCCCS()
  {
    return cccsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCCCS_Controller()
  {
    return (EAttribute)cccsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCCCS_Gain()
  {
    return (EAttribute)cccsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCCVS()
  {
    return ccvsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCCVS_Controller()
  {
    return (EAttribute)ccvsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCCVS_Transresistance()
  {
    return (EAttribute)ccvsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGeometericSweep()
  {
    return geometericSweepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeometericSweep_Initial()
  {
    return (EAttribute)geometericSweepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getGeometericSweep_Final()
  {
    return (EAttribute)geometericSweepEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLinearSweep()
  {
    return linearSweepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLinearSweep_Delta()
  {
    return (EAttribute)linearSweepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOctaveSweep()
  {
    return octaveSweepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOctaveSweep_PointsPerOctave()
  {
    return (EAttribute)octaveSweepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDecadeSweep()
  {
    return decadeSweepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDecadeSweep_PointsPerDecade()
  {
    return (EAttribute)decadeSweepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParameterSweep()
  {
    return parameterSweepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParameterSweep_Source()
  {
    return (EAttribute)parameterSweepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getParameterSweep_Sweep()
  {
    return (EReference)parameterSweepEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimulation()
  {
    return simulationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getACSimulation()
  {
    return acSimulationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getACSimulation_Sweep()
  {
    return (EReference)acSimulationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDCSimulation()
  {
    return dcSimulationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDCSimulation_Sweeps()
  {
    return (EReference)dcSimulationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNoiseSimulation()
  {
    return noiseSimulationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNoiseSimulation_Output()
  {
    return (EReference)noiseSimulationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNoiseSimulation_InputSource()
  {
    return (EAttribute)noiseSimulationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNoiseSimulation_Isweep()
  {
    return (EReference)noiseSimulationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTransientSimulation()
  {
    return transientSimulationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTransientSimulation_Args()
  {
    return (EAttribute)transientSimulationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTransientSimulation_Uic()
  {
    return (EAttribute)transientSimulationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOutput()
  {
    return outputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOutput_Prtype()
  {
    return (EAttribute)outputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOutput_Exports()
  {
    return (EReference)outputEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPrint()
  {
    return printEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPlot()
  {
    return plotEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExport()
  {
    return exportEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExport_Prefix()
  {
    return (EAttribute)exportEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExport_Nodes()
  {
    return (EAttribute)exportEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVoltageExport()
  {
    return voltageExportEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCurrentExport()
  {
    return currentExportEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getWaveform()
  {
    return waveformEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getWaveform_Args()
  {
    return (EAttribute)waveformEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExp()
  {
    return expEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSine()
  {
    return sineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPulse()
  {
    return pulseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPWL()
  {
    return pwlEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSFFM()
  {
    return sffmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAM()
  {
    return amEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOptions()
  {
    return optionsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Abstol()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Badmos3()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Chgtol()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Defad()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Defas()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Defl()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_DefaultWidth()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Gmin()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Itl1()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Itl2()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Itl3()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Itl4()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Itl5()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Keepopinfo()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Method()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Pivrel()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Reltol()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Temp()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_NominalTemperature()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(18);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Trtol()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(19);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOptions_Vntol()
  {
    return (EAttribute)optionsEClass.getEStructuralFeatures().get(20);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNodeSet()
  {
    return nodeSetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNodeSet_Entries()
  {
    return (EReference)nodeSetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInitialCondition()
  {
    return initialConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitialCondition_Entries()
  {
    return (EReference)initialConditionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNodeSetEntry()
  {
    return nodeSetEntryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNodeSetEntry_Node()
  {
    return (EAttribute)nodeSetEntryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNodeSetEntry_Value()
  {
    return (EAttribute)nodeSetEntryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPRTYPE()
  {
    return prtypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getIntegrationMethod()
  {
    return integrationMethodEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSpiceFactory getXSpiceFactory()
  {
    return (XSpiceFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    compilationEClass = createEClass(COMPILATION);
    createEReference(compilationEClass, COMPILATION__DEFINITIONS);
    createEReference(compilationEClass, COMPILATION__ENTITIES);
    createEReference(compilationEClass, COMPILATION__SIMULATIONS);
    createEReference(compilationEClass, COMPILATION__OUTPUTS);
    createEReference(compilationEClass, COMPILATION__OPTIONS);
    createEReference(compilationEClass, COMPILATION__IC);
    createEReference(compilationEClass, COMPILATION__NODESET);

    entityEClass = createEClass(ENTITY);
    createEAttribute(entityEClass, ENTITY__NAME);

    componentEClass = createEClass(COMPONENT);
    createEAttribute(componentEClass, COMPONENT__NODES);

    subCircuitDefinitionEClass = createEClass(SUB_CIRCUIT_DEFINITION);
    createEAttribute(subCircuitDefinitionEClass, SUB_CIRCUIT_DEFINITION__NAME);
    createEAttribute(subCircuitDefinitionEClass, SUB_CIRCUIT_DEFINITION__PINS);
    createEReference(subCircuitDefinitionEClass, SUB_CIRCUIT_DEFINITION__DEFINITIONS);
    createEReference(subCircuitDefinitionEClass, SUB_CIRCUIT_DEFINITION__ENTITIES);

    subCircuitEClass = createEClass(SUB_CIRCUIT);
    createEAttribute(subCircuitEClass, SUB_CIRCUIT__NODES);
    createEReference(subCircuitEClass, SUB_CIRCUIT__DEFINITION);

    resistorEClass = createEClass(RESISTOR);
    createEAttribute(resistorEClass, RESISTOR__RESISTANCE);
    createEAttribute(resistorEClass, RESISTOR__MODEL);
    createEAttribute(resistorEClass, RESISTOR__LENGTH);
    createEAttribute(resistorEClass, RESISTOR__WIDTH);
    createEAttribute(resistorEClass, RESISTOR__TEMP);

    resistorModelEClass = createEClass(RESISTOR_MODEL);
    createEAttribute(resistorModelEClass, RESISTOR_MODEL__SHEET_RESISTANCE);
    createEAttribute(resistorModelEClass, RESISTOR_MODEL__DEFAULT_WIDTH);
    createEAttribute(resistorModelEClass, RESISTOR_MODEL__NARROW);
    createEAttribute(resistorModelEClass, RESISTOR_MODEL__TEMPERATURE_COEFFICIENT1);
    createEAttribute(resistorModelEClass, RESISTOR_MODEL__TEMPERATURE_COEFFICIENT2);
    createEAttribute(resistorModelEClass, RESISTOR_MODEL__NOMINAL_TEMPERATURE);

    capacitorEClass = createEClass(CAPACITOR);
    createEAttribute(capacitorEClass, CAPACITOR__CAPACITANCE);
    createEAttribute(capacitorEClass, CAPACITOR__MODEL);
    createEAttribute(capacitorEClass, CAPACITOR__LENGTH);
    createEAttribute(capacitorEClass, CAPACITOR__WIDTH);
    createEAttribute(capacitorEClass, CAPACITOR__INITIAL_CONDITION);

    capacitorModelEClass = createEClass(CAPACITOR_MODEL);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__JUNCTION_CAP);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__JUNCTION_CAP_SIDEWALL);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__DEFAULT_WIDTH);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__NARROW);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT1);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__TEMPERATURE_COEFFICIENT2);
    createEAttribute(capacitorModelEClass, CAPACITOR_MODEL__NOMINAL_TEMPERATURE);

    inductorEClass = createEClass(INDUCTOR);
    createEAttribute(inductorEClass, INDUCTOR__INDUCTANCE);
    createEAttribute(inductorEClass, INDUCTOR__INITIAL_CONDITION);

    mutualInductanceEClass = createEClass(MUTUAL_INDUCTANCE);
    createEAttribute(mutualInductanceEClass, MUTUAL_INDUCTANCE__INDUCTOR1);
    createEAttribute(mutualInductanceEClass, MUTUAL_INDUCTANCE__INDUCTOR2);
    createEAttribute(mutualInductanceEClass, MUTUAL_INDUCTANCE__COUPLING);

    voltageSwitchEClass = createEClass(VOLTAGE_SWITCH);
    createEAttribute(voltageSwitchEClass, VOLTAGE_SWITCH__MODEL);
    createEAttribute(voltageSwitchEClass, VOLTAGE_SWITCH__ZERO_STATE);

    voltageSwitchModelEClass = createEClass(VOLTAGE_SWITCH_MODEL);
    createEAttribute(voltageSwitchModelEClass, VOLTAGE_SWITCH_MODEL__THRESHOLD);
    createEAttribute(voltageSwitchModelEClass, VOLTAGE_SWITCH_MODEL__HYSTERESIS);
    createEAttribute(voltageSwitchModelEClass, VOLTAGE_SWITCH_MODEL__ON_RESISTANCE);
    createEAttribute(voltageSwitchModelEClass, VOLTAGE_SWITCH_MODEL__OFF_RESISTANCE);

    currentSwitchEClass = createEClass(CURRENT_SWITCH);
    createEAttribute(currentSwitchEClass, CURRENT_SWITCH__CONTROLLING_SOURCE);
    createEAttribute(currentSwitchEClass, CURRENT_SWITCH__MODEL);
    createEAttribute(currentSwitchEClass, CURRENT_SWITCH__ZERO_STATE);

    currentSwitchModelEClass = createEClass(CURRENT_SWITCH_MODEL);
    createEAttribute(currentSwitchModelEClass, CURRENT_SWITCH_MODEL__THRESHOLD);
    createEAttribute(currentSwitchModelEClass, CURRENT_SWITCH_MODEL__HYSTERESIS);
    createEAttribute(currentSwitchModelEClass, CURRENT_SWITCH_MODEL__ON_RESISTANCE);
    createEAttribute(currentSwitchModelEClass, CURRENT_SWITCH_MODEL__OFF_RESISTANCE);

    diodeEClass = createEClass(DIODE);
    createEAttribute(diodeEClass, DIODE__MODEL);
    createEAttribute(diodeEClass, DIODE__AREA);
    createEAttribute(diodeEClass, DIODE__OFF);
    createEAttribute(diodeEClass, DIODE__IC);
    createEAttribute(diodeEClass, DIODE__TEMP);

    diodeModelEClass = createEClass(DIODE_MODEL);
    createEAttribute(diodeModelEClass, DIODE_MODEL__SATURATION_CURRENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__RESISTANCE);
    createEAttribute(diodeModelEClass, DIODE_MODEL__EMISSION_COEFFICIENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__TRANSIT_TIME);
    createEAttribute(diodeModelEClass, DIODE_MODEL__JUNCTION_CAP);
    createEAttribute(diodeModelEClass, DIODE_MODEL__JUNCTION_POTENTIAL);
    createEAttribute(diodeModelEClass, DIODE_MODEL__GRADING_COEFFICIENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__ACTIVATION_ENERGY);
    createEAttribute(diodeModelEClass, DIODE_MODEL__SATURATION_CURRENT_EXP);
    createEAttribute(diodeModelEClass, DIODE_MODEL__FLICKER_NOISE_COEFFICIENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__FLICKER_NOISE_EXPONENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__DEPLETION_CAP_COEFFICIENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__BREAKDOWN_VOLTAGE);
    createEAttribute(diodeModelEClass, DIODE_MODEL__BREAKDOWN_CURRENT);
    createEAttribute(diodeModelEClass, DIODE_MODEL__NOMINAL_TEMPERATURE);

    mosfetEClass = createEClass(MOSFET);
    createEAttribute(mosfetEClass, MOSFET__MODEL);
    createEAttribute(mosfetEClass, MOSFET__LENGTH);
    createEAttribute(mosfetEClass, MOSFET__WIDTH);
    createEAttribute(mosfetEClass, MOSFET__DRAIN_AREA);
    createEAttribute(mosfetEClass, MOSFET__SOURCE_AREA);
    createEAttribute(mosfetEClass, MOSFET__DRAIN_PERIMETER);
    createEAttribute(mosfetEClass, MOSFET__SOURCE_PERIMETER);
    createEAttribute(mosfetEClass, MOSFET__DRAIN_SQUARES);
    createEAttribute(mosfetEClass, MOSFET__SOURCE_SQUARES);
    createEAttribute(mosfetEClass, MOSFET__OFF);
    createEAttribute(mosfetEClass, MOSFET__IC);
    createEAttribute(mosfetEClass, MOSFET__TEMP);

    mosfetModelEClass = createEClass(MOSFET_MODEL);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__LEVEL);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__VT0);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__TRANSCONDUCTANCE);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__GAMMA);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__PHI);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__LAMBDA);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__DRAIN_RESISTANCE);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__SOURCE_RESISTANCE);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__CAP_BD);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__CAP_BS);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__JUNCTION_SAT_CUR);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__BULK_JUNCTION_POTENTIAL);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__GATE_SOURCE_OVERLAP_CAP_FACTOR);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__GATE_DRAIN_OVERLAP_CAP_FACTOR);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__GATE_BULK_OVERLAP_CAP_FACTOR);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__SHEET_RESISTANCE);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__BULK_CAP_FACTOR);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__BULK_JUNCTION_BOT_GRADING_COEFFICIENT);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__SIDEWALL_CAP_FACTOR);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__BULK_JUNCTION_SIDE_GRADING_COEFFICIENT);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__JUNCTION_SAT_CUR_DENSITY);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__OXIDE_THICKNESS);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__SUBSTRATE_DOPING);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__SURFACE_STATE_DENSITY);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__NFS);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__GATE_TYPE);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__XJ);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__LATERAL_DIFFUSION);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__SURFACE_MOBILITY);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__FLICKER_NOISE_COEFFICIENT);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__FLICKER_NOISE_EXPONENT);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__FORWARD_CAP_DEPLETION_COEFFICIENT);
    createEAttribute(mosfetModelEClass, MOSFET_MODEL__NOMINAL_TEMPERATURE);

    bjtEClass = createEClass(BJT);
    createEAttribute(bjtEClass, BJT__MODEL);
    createEAttribute(bjtEClass, BJT__AREA);
    createEAttribute(bjtEClass, BJT__OFF);
    createEAttribute(bjtEClass, BJT__IC);
    createEAttribute(bjtEClass, BJT__TEMP);

    bjtModelEClass = createEClass(BJT_MODEL);
    createEAttribute(bjtModelEClass, BJT_MODEL__SATURATION_CURRENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__BETA_F);
    createEAttribute(bjtModelEClass, BJT_MODEL__EMISSION_COEFFICIENT_FORWARD);
    createEAttribute(bjtModelEClass, BJT_MODEL__EARLY_VOLTAGE_FORWARD);
    createEAttribute(bjtModelEClass, BJT_MODEL__ROLL_OFF_FORWARD);
    createEAttribute(bjtModelEClass, BJT_MODEL__LEAK_BE_CURRENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__LEAK_BE_EMISSION_COEFFICIENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__BETA_R);
    createEAttribute(bjtModelEClass, BJT_MODEL__EMISSION_COEFFICIENT_REVERSE);
    createEAttribute(bjtModelEClass, BJT_MODEL__EARLY_VOLTAGE_REVERSE);
    createEAttribute(bjtModelEClass, BJT_MODEL__ROLL_OFF_REVERSE);
    createEAttribute(bjtModelEClass, BJT_MODEL__LEAK_BC_CURRENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__LEAK_BC_EMISSION_COEFFICIENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__BASE_RESIST);
    createEAttribute(bjtModelEClass, BJT_MODEL__BASE_CURRENT_HALF_RESIST);
    createEAttribute(bjtModelEClass, BJT_MODEL__MINIMUM_BASE_RESISTANCE);
    createEAttribute(bjtModelEClass, BJT_MODEL__EMITTER_RESISTANCE);
    createEAttribute(bjtModelEClass, BJT_MODEL__COLLECTOR_RESISTANCE);
    createEAttribute(bjtModelEClass, BJT_MODEL__DEPLETION_CAP_BE);
    createEAttribute(bjtModelEClass, BJT_MODEL__POTENTIAL_BE);
    createEAttribute(bjtModelEClass, BJT_MODEL__JUNCTION_EXP_BE);
    createEAttribute(bjtModelEClass, BJT_MODEL__TRANSIT_TIME_FORWARD);
    createEAttribute(bjtModelEClass, BJT_MODEL__TRANSIT_TIME_BIAS_COEFFICIENT_FORWARD);
    createEAttribute(bjtModelEClass, BJT_MODEL__TRANSIT_TIME_FORWARD_VOLTAGE_BC);
    createEAttribute(bjtModelEClass, BJT_MODEL__TRANSIT_TIME_HIGH_CURRENT_FORWARD);
    createEAttribute(bjtModelEClass, BJT_MODEL__EXCESS_PHASE);
    createEAttribute(bjtModelEClass, BJT_MODEL__DEPLETION_CAP_BC);
    createEAttribute(bjtModelEClass, BJT_MODEL__POTENTIAL_BC);
    createEAttribute(bjtModelEClass, BJT_MODEL__JUNCTION_EXP_BC);
    createEAttribute(bjtModelEClass, BJT_MODEL__BASE_FRACTION_BC_CAP);
    createEAttribute(bjtModelEClass, BJT_MODEL__TRANSIT_TIME_REVERSE);
    createEAttribute(bjtModelEClass, BJT_MODEL__CAP_CS);
    createEAttribute(bjtModelEClass, BJT_MODEL__POTENTIAL_SUBSTRATE);
    createEAttribute(bjtModelEClass, BJT_MODEL__EXPONENTIAL_SUBSTRATE);
    createEAttribute(bjtModelEClass, BJT_MODEL__BETA_EXPONENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__ENERGY_GAP);
    createEAttribute(bjtModelEClass, BJT_MODEL__TEMP_EXP_IS);
    createEAttribute(bjtModelEClass, BJT_MODEL__FLICKER_NOISE_COEFFICIENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__FLICKER_NOISE_EXPONENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__DEPLETION_CAP_COEFFICIENT);
    createEAttribute(bjtModelEClass, BJT_MODEL__NOMINAL_TEMPERATURE);

    jfetEClass = createEClass(JFET);
    createEAttribute(jfetEClass, JFET__MODEL);
    createEAttribute(jfetEClass, JFET__AREA);
    createEAttribute(jfetEClass, JFET__OFF);
    createEAttribute(jfetEClass, JFET__IC);
    createEAttribute(jfetEClass, JFET__TEMP);

    jfetModelEClass = createEClass(JFET_MODEL);
    createEAttribute(jfetModelEClass, JFET_MODEL__THRESHOLD);
    createEAttribute(jfetModelEClass, JFET_MODEL__BETA);
    createEAttribute(jfetModelEClass, JFET_MODEL__LAMBDA);
    createEAttribute(jfetModelEClass, JFET_MODEL__DRAIN_RESISTANCE);
    createEAttribute(jfetModelEClass, JFET_MODEL__SOURCE_RESISTANCE);
    createEAttribute(jfetModelEClass, JFET_MODEL__CAP_GS);
    createEAttribute(jfetModelEClass, JFET_MODEL__CAP_GD);
    createEAttribute(jfetModelEClass, JFET_MODEL__GATE_POTENTIAL);
    createEAttribute(jfetModelEClass, JFET_MODEL__GATE_SATURATION_CURRENT);
    createEAttribute(jfetModelEClass, JFET_MODEL__B);
    createEAttribute(jfetModelEClass, JFET_MODEL__FLICKER_NOISE_COEFFICIENT);
    createEAttribute(jfetModelEClass, JFET_MODEL__FLICKER_NOISE_EXPONENT);
    createEAttribute(jfetModelEClass, JFET_MODEL__DEPLETION_CAP_COEFFICIENT);
    createEAttribute(jfetModelEClass, JFET_MODEL__NOMINAL_TEMPERATURE);

    vSourceEClass = createEClass(VSOURCE);
    createEAttribute(vSourceEClass, VSOURCE__DC);
    createEAttribute(vSourceEClass, VSOURCE__AC);
    createEReference(vSourceEClass, VSOURCE__WAVEFORM);

    currentSourceEClass = createEClass(CURRENT_SOURCE);
    createEAttribute(currentSourceEClass, CURRENT_SOURCE__DC);
    createEAttribute(currentSourceEClass, CURRENT_SOURCE__AC);
    createEReference(currentSourceEClass, CURRENT_SOURCE__WAVEFORM);

    vcvsEClass = createEClass(VCVS);
    createEAttribute(vcvsEClass, VCVS__GAIN);

    vccsEClass = createEClass(VCCS);
    createEAttribute(vccsEClass, VCCS__TRANSCONDUCTANCE);

    cccsEClass = createEClass(CCCS);
    createEAttribute(cccsEClass, CCCS__CONTROLLER);
    createEAttribute(cccsEClass, CCCS__GAIN);

    ccvsEClass = createEClass(CCVS);
    createEAttribute(ccvsEClass, CCVS__CONTROLLER);
    createEAttribute(ccvsEClass, CCVS__TRANSRESISTANCE);

    geometericSweepEClass = createEClass(GEOMETERIC_SWEEP);
    createEAttribute(geometericSweepEClass, GEOMETERIC_SWEEP__INITIAL);
    createEAttribute(geometericSweepEClass, GEOMETERIC_SWEEP__FINAL);

    linearSweepEClass = createEClass(LINEAR_SWEEP);
    createEAttribute(linearSweepEClass, LINEAR_SWEEP__DELTA);

    octaveSweepEClass = createEClass(OCTAVE_SWEEP);
    createEAttribute(octaveSweepEClass, OCTAVE_SWEEP__POINTS_PER_OCTAVE);

    decadeSweepEClass = createEClass(DECADE_SWEEP);
    createEAttribute(decadeSweepEClass, DECADE_SWEEP__POINTS_PER_DECADE);

    parameterSweepEClass = createEClass(PARAMETER_SWEEP);
    createEAttribute(parameterSweepEClass, PARAMETER_SWEEP__SOURCE);
    createEReference(parameterSweepEClass, PARAMETER_SWEEP__SWEEP);

    simulationEClass = createEClass(SIMULATION);

    acSimulationEClass = createEClass(AC_SIMULATION);
    createEReference(acSimulationEClass, AC_SIMULATION__SWEEP);

    dcSimulationEClass = createEClass(DC_SIMULATION);
    createEReference(dcSimulationEClass, DC_SIMULATION__SWEEPS);

    noiseSimulationEClass = createEClass(NOISE_SIMULATION);
    createEReference(noiseSimulationEClass, NOISE_SIMULATION__OUTPUT);
    createEAttribute(noiseSimulationEClass, NOISE_SIMULATION__INPUT_SOURCE);
    createEReference(noiseSimulationEClass, NOISE_SIMULATION__ISWEEP);

    transientSimulationEClass = createEClass(TRANSIENT_SIMULATION);
    createEAttribute(transientSimulationEClass, TRANSIENT_SIMULATION__ARGS);
    createEAttribute(transientSimulationEClass, TRANSIENT_SIMULATION__UIC);

    outputEClass = createEClass(OUTPUT);
    createEAttribute(outputEClass, OUTPUT__PRTYPE);
    createEReference(outputEClass, OUTPUT__EXPORTS);

    printEClass = createEClass(PRINT);

    plotEClass = createEClass(PLOT);

    exportEClass = createEClass(EXPORT);
    createEAttribute(exportEClass, EXPORT__PREFIX);
    createEAttribute(exportEClass, EXPORT__NODES);

    voltageExportEClass = createEClass(VOLTAGE_EXPORT);

    currentExportEClass = createEClass(CURRENT_EXPORT);

    waveformEClass = createEClass(WAVEFORM);
    createEAttribute(waveformEClass, WAVEFORM__ARGS);

    expEClass = createEClass(EXP);

    sineEClass = createEClass(SINE);

    pulseEClass = createEClass(PULSE);

    pwlEClass = createEClass(PWL);

    sffmEClass = createEClass(SFFM);

    amEClass = createEClass(AM);

    optionsEClass = createEClass(OPTIONS);
    createEAttribute(optionsEClass, OPTIONS__ABSTOL);
    createEAttribute(optionsEClass, OPTIONS__BADMOS3);
    createEAttribute(optionsEClass, OPTIONS__CHGTOL);
    createEAttribute(optionsEClass, OPTIONS__DEFAD);
    createEAttribute(optionsEClass, OPTIONS__DEFAS);
    createEAttribute(optionsEClass, OPTIONS__DEFL);
    createEAttribute(optionsEClass, OPTIONS__DEFAULT_WIDTH);
    createEAttribute(optionsEClass, OPTIONS__GMIN);
    createEAttribute(optionsEClass, OPTIONS__ITL1);
    createEAttribute(optionsEClass, OPTIONS__ITL2);
    createEAttribute(optionsEClass, OPTIONS__ITL3);
    createEAttribute(optionsEClass, OPTIONS__ITL4);
    createEAttribute(optionsEClass, OPTIONS__ITL5);
    createEAttribute(optionsEClass, OPTIONS__KEEPOPINFO);
    createEAttribute(optionsEClass, OPTIONS__METHOD);
    createEAttribute(optionsEClass, OPTIONS__PIVREL);
    createEAttribute(optionsEClass, OPTIONS__RELTOL);
    createEAttribute(optionsEClass, OPTIONS__TEMP);
    createEAttribute(optionsEClass, OPTIONS__NOMINAL_TEMPERATURE);
    createEAttribute(optionsEClass, OPTIONS__TRTOL);
    createEAttribute(optionsEClass, OPTIONS__VNTOL);

    nodeSetEClass = createEClass(NODE_SET);
    createEReference(nodeSetEClass, NODE_SET__ENTRIES);

    initialConditionEClass = createEClass(INITIAL_CONDITION);
    createEReference(initialConditionEClass, INITIAL_CONDITION__ENTRIES);

    nodeSetEntryEClass = createEClass(NODE_SET_ENTRY);
    createEAttribute(nodeSetEntryEClass, NODE_SET_ENTRY__NODE);
    createEAttribute(nodeSetEntryEClass, NODE_SET_ENTRY__VALUE);

    // Create enums
    prtypeEEnum = createEEnum(PRTYPE);
    integrationMethodEEnum = createEEnum(INTEGRATION_METHOD);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    componentEClass.getESuperTypes().add(this.getEntity());
    subCircuitEClass.getESuperTypes().add(this.getEntity());
    resistorEClass.getESuperTypes().add(this.getComponent());
    resistorModelEClass.getESuperTypes().add(this.getEntity());
    capacitorEClass.getESuperTypes().add(this.getComponent());
    capacitorModelEClass.getESuperTypes().add(this.getEntity());
    inductorEClass.getESuperTypes().add(this.getComponent());
    mutualInductanceEClass.getESuperTypes().add(this.getEntity());
    voltageSwitchEClass.getESuperTypes().add(this.getComponent());
    voltageSwitchModelEClass.getESuperTypes().add(this.getEntity());
    currentSwitchEClass.getESuperTypes().add(this.getComponent());
    currentSwitchModelEClass.getESuperTypes().add(this.getEntity());
    diodeEClass.getESuperTypes().add(this.getComponent());
    diodeModelEClass.getESuperTypes().add(this.getEntity());
    mosfetEClass.getESuperTypes().add(this.getComponent());
    mosfetModelEClass.getESuperTypes().add(this.getEntity());
    bjtEClass.getESuperTypes().add(this.getComponent());
    bjtModelEClass.getESuperTypes().add(this.getEntity());
    jfetEClass.getESuperTypes().add(this.getComponent());
    jfetModelEClass.getESuperTypes().add(this.getEntity());
    vSourceEClass.getESuperTypes().add(this.getComponent());
    currentSourceEClass.getESuperTypes().add(this.getComponent());
    vcvsEClass.getESuperTypes().add(this.getComponent());
    vccsEClass.getESuperTypes().add(this.getComponent());
    cccsEClass.getESuperTypes().add(this.getComponent());
    ccvsEClass.getESuperTypes().add(this.getComponent());
    linearSweepEClass.getESuperTypes().add(this.getGeometericSweep());
    octaveSweepEClass.getESuperTypes().add(this.getGeometericSweep());
    decadeSweepEClass.getESuperTypes().add(this.getGeometericSweep());
    acSimulationEClass.getESuperTypes().add(this.getSimulation());
    dcSimulationEClass.getESuperTypes().add(this.getSimulation());
    noiseSimulationEClass.getESuperTypes().add(this.getSimulation());
    transientSimulationEClass.getESuperTypes().add(this.getSimulation());
    printEClass.getESuperTypes().add(this.getOutput());
    plotEClass.getESuperTypes().add(this.getOutput());
    voltageExportEClass.getESuperTypes().add(this.getExport());
    currentExportEClass.getESuperTypes().add(this.getExport());
    expEClass.getESuperTypes().add(this.getWaveform());
    sineEClass.getESuperTypes().add(this.getWaveform());
    pulseEClass.getESuperTypes().add(this.getWaveform());
    pwlEClass.getESuperTypes().add(this.getWaveform());
    sffmEClass.getESuperTypes().add(this.getWaveform());
    amEClass.getESuperTypes().add(this.getWaveform());

    // Initialize classes and features; add operations and parameters
    initEClass(compilationEClass, Compilation.class, "Compilation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCompilation_Definitions(), this.getSubCircuitDefinition(), null, "definitions", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompilation_Entities(), this.getEntity(), null, "entities", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompilation_Simulations(), this.getSimulation(), null, "simulations", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompilation_Outputs(), this.getOutput(), null, "outputs", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompilation_Options(), this.getOptions(), null, "options", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompilation_Ic(), this.getInitialCondition(), null, "ic", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompilation_Nodeset(), this.getNodeSet(), null, "nodeset", null, 0, -1, Compilation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(entityEClass, Entity.class, "Entity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEntity_Name(), ecorePackage.getEString(), "name", null, 0, 1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(componentEClass, Component.class, "Component", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getComponent_Nodes(), ecorePackage.getEString(), "nodes", null, 0, -1, Component.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subCircuitDefinitionEClass, SubCircuitDefinition.class, "SubCircuitDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSubCircuitDefinition_Name(), ecorePackage.getEString(), "name", null, 0, 1, SubCircuitDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSubCircuitDefinition_Pins(), ecorePackage.getEString(), "pins", null, 0, -1, SubCircuitDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSubCircuitDefinition_Definitions(), this.getSubCircuitDefinition(), null, "definitions", null, 0, -1, SubCircuitDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSubCircuitDefinition_Entities(), this.getEntity(), null, "entities", null, 0, -1, SubCircuitDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subCircuitEClass, SubCircuit.class, "SubCircuit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSubCircuit_Nodes(), ecorePackage.getEString(), "nodes", null, 0, -1, SubCircuit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSubCircuit_Definition(), this.getSubCircuitDefinition(), null, "definition", null, 0, 1, SubCircuit.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(resistorEClass, Resistor.class, "Resistor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getResistor_Resistance(), ecorePackage.getEBigDecimal(), "resistance", null, 0, 1, Resistor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistor_Model(), ecorePackage.getEString(), "model", null, 0, 1, Resistor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistor_Length(), ecorePackage.getEBigDecimal(), "length", null, 0, 1, Resistor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistor_Width(), ecorePackage.getEBigDecimal(), "width", null, 0, 1, Resistor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistor_Temp(), ecorePackage.getEBigDecimal(), "temp", null, 0, 1, Resistor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(resistorModelEClass, ResistorModel.class, "ResistorModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getResistorModel_SheetResistance(), ecorePackage.getEBigDecimal(), "sheetResistance", null, 0, 1, ResistorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistorModel_DefaultWidth(), ecorePackage.getEBigDecimal(), "defaultWidth", null, 0, 1, ResistorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistorModel_Narrow(), ecorePackage.getEBigDecimal(), "narrow", null, 0, 1, ResistorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistorModel_TemperatureCoefficient1(), ecorePackage.getEBigDecimal(), "temperatureCoefficient1", null, 0, 1, ResistorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistorModel_TemperatureCoefficient2(), ecorePackage.getEBigDecimal(), "temperatureCoefficient2", null, 0, 1, ResistorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getResistorModel_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, ResistorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(capacitorEClass, Capacitor.class, "Capacitor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCapacitor_Capacitance(), ecorePackage.getEBigDecimal(), "capacitance", null, 0, 1, Capacitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitor_Model(), ecorePackage.getEString(), "model", null, 0, 1, Capacitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitor_Length(), ecorePackage.getEBigDecimal(), "length", null, 0, 1, Capacitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitor_Width(), ecorePackage.getEBigDecimal(), "width", null, 0, 1, Capacitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitor_InitialCondition(), ecorePackage.getEBigDecimal(), "initialCondition", null, 0, 1, Capacitor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(capacitorModelEClass, CapacitorModel.class, "CapacitorModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCapacitorModel_JunctionCap(), ecorePackage.getEBigDecimal(), "junctionCap", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitorModel_JunctionCapSidewall(), ecorePackage.getEBigDecimal(), "junctionCapSidewall", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitorModel_DefaultWidth(), ecorePackage.getEBigDecimal(), "defaultWidth", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitorModel_Narrow(), ecorePackage.getEBigDecimal(), "narrow", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitorModel_TemperatureCoefficient1(), ecorePackage.getEBigDecimal(), "temperatureCoefficient1", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitorModel_TemperatureCoefficient2(), ecorePackage.getEBigDecimal(), "temperatureCoefficient2", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCapacitorModel_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, CapacitorModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inductorEClass, Inductor.class, "Inductor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInductor_Inductance(), ecorePackage.getEBigDecimal(), "inductance", null, 0, 1, Inductor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInductor_InitialCondition(), ecorePackage.getEBigDecimal(), "initialCondition", null, 0, 1, Inductor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mutualInductanceEClass, MutualInductance.class, "MutualInductance", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMutualInductance_Inductor1(), ecorePackage.getEString(), "inductor1", null, 0, 1, MutualInductance.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMutualInductance_Inductor2(), ecorePackage.getEString(), "inductor2", null, 0, 1, MutualInductance.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMutualInductance_Coupling(), ecorePackage.getEBigDecimal(), "coupling", null, 0, 1, MutualInductance.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(voltageSwitchEClass, VoltageSwitch.class, "VoltageSwitch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVoltageSwitch_Model(), ecorePackage.getEString(), "model", null, 0, 1, VoltageSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVoltageSwitch_ZeroState(), ecorePackage.getEBoolean(), "zeroState", null, 0, 1, VoltageSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(voltageSwitchModelEClass, VoltageSwitchModel.class, "VoltageSwitchModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVoltageSwitchModel_Threshold(), ecorePackage.getEBigDecimal(), "threshold", null, 0, 1, VoltageSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVoltageSwitchModel_Hysteresis(), ecorePackage.getEBigDecimal(), "hysteresis", null, 0, 1, VoltageSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVoltageSwitchModel_OnResistance(), ecorePackage.getEBigDecimal(), "onResistance", null, 0, 1, VoltageSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVoltageSwitchModel_OffResistance(), ecorePackage.getEBigDecimal(), "offResistance", null, 0, 1, VoltageSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(currentSwitchEClass, CurrentSwitch.class, "CurrentSwitch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCurrentSwitch_ControllingSource(), ecorePackage.getEString(), "controllingSource", null, 0, 1, CurrentSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCurrentSwitch_Model(), ecorePackage.getEString(), "model", null, 0, 1, CurrentSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCurrentSwitch_ZeroState(), ecorePackage.getEBoolean(), "zeroState", null, 0, 1, CurrentSwitch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(currentSwitchModelEClass, CurrentSwitchModel.class, "CurrentSwitchModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCurrentSwitchModel_Threshold(), ecorePackage.getEBigDecimal(), "threshold", null, 0, 1, CurrentSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCurrentSwitchModel_Hysteresis(), ecorePackage.getEBigDecimal(), "hysteresis", null, 0, 1, CurrentSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCurrentSwitchModel_OnResistance(), ecorePackage.getEBigDecimal(), "onResistance", null, 0, 1, CurrentSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCurrentSwitchModel_OffResistance(), ecorePackage.getEBigDecimal(), "offResistance", null, 0, 1, CurrentSwitchModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diodeEClass, Diode.class, "Diode", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiode_Model(), ecorePackage.getEString(), "model", null, 0, 1, Diode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiode_Area(), ecorePackage.getEBigDecimal(), "area", null, 0, 1, Diode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiode_Off(), ecorePackage.getEBoolean(), "off", null, 0, 1, Diode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiode_Ic(), ecorePackage.getEBigDecimal(), "ic", null, 0, 1, Diode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiode_Temp(), ecorePackage.getEBigDecimal(), "temp", null, 0, 1, Diode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(diodeModelEClass, DiodeModel.class, "DiodeModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiodeModel_SaturationCurrent(), ecorePackage.getEBigDecimal(), "saturationCurrent", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_Resistance(), ecorePackage.getEBigDecimal(), "resistance", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_EmissionCoefficient(), ecorePackage.getEBigDecimal(), "emissionCoefficient", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_TransitTime(), ecorePackage.getEBigDecimal(), "transitTime", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_JunctionCap(), ecorePackage.getEBigDecimal(), "junctionCap", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_JunctionPotential(), ecorePackage.getEBigDecimal(), "junctionPotential", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_GradingCoefficient(), ecorePackage.getEBigDecimal(), "gradingCoefficient", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_ActivationEnergy(), ecorePackage.getEBigDecimal(), "activationEnergy", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_SaturationCurrentExp(), ecorePackage.getEBigDecimal(), "saturationCurrentExp", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_FlickerNoiseCoefficient(), ecorePackage.getEBigDecimal(), "flickerNoiseCoefficient", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_FlickerNoiseExponent(), ecorePackage.getEBigDecimal(), "flickerNoiseExponent", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_DepletionCapCoefficient(), ecorePackage.getEBigDecimal(), "depletionCapCoefficient", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_BreakdownVoltage(), ecorePackage.getEBigDecimal(), "breakdownVoltage", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_BreakdownCurrent(), ecorePackage.getEBigDecimal(), "breakdownCurrent", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDiodeModel_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, DiodeModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mosfetEClass, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, "MOSFET", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMOSFET_Model(), ecorePackage.getEString(), "model", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_Length(), ecorePackage.getEBigDecimal(), "length", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_Width(), ecorePackage.getEBigDecimal(), "width", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_DrainArea(), ecorePackage.getEBigDecimal(), "drainArea", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_SourceArea(), ecorePackage.getEBigDecimal(), "sourceArea", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_DrainPerimeter(), ecorePackage.getEBigDecimal(), "drainPerimeter", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_SourcePerimeter(), ecorePackage.getEBigDecimal(), "sourcePerimeter", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_DrainSquares(), ecorePackage.getEBigDecimal(), "drainSquares", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_SourceSquares(), ecorePackage.getEBigDecimal(), "sourceSquares", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_Off(), ecorePackage.getEBoolean(), "off", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_Ic(), ecorePackage.getEBigDecimal(), "ic", null, 0, -1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFET_Temp(), ecorePackage.getEBigDecimal(), "temp", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.MOSFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mosfetModelEClass, MOSFETModel.class, "MOSFETModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMOSFETModel_Level(), ecorePackage.getEInt(), "level", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Vt0(), ecorePackage.getEBigDecimal(), "vt0", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Transconductance(), ecorePackage.getEBigDecimal(), "transconductance", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Gamma(), ecorePackage.getEBigDecimal(), "gamma", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Phi(), ecorePackage.getEBigDecimal(), "phi", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Lambda(), ecorePackage.getEBigDecimal(), "lambda", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_DrainResistance(), ecorePackage.getEBigDecimal(), "drainResistance", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_SourceResistance(), ecorePackage.getEBigDecimal(), "sourceResistance", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_CapBd(), ecorePackage.getEBigDecimal(), "capBd", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_CapBs(), ecorePackage.getEBigDecimal(), "capBs", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_JunctionSatCur(), ecorePackage.getEBigDecimal(), "junctionSatCur", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_BulkJunctionPotential(), ecorePackage.getEBigDecimal(), "bulkJunctionPotential", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_GateSourceOverlapCapFactor(), ecorePackage.getEBigDecimal(), "gateSourceOverlapCapFactor", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_GateDrainOverlapCapFactor(), ecorePackage.getEBigDecimal(), "gateDrainOverlapCapFactor", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_GateBulkOverlapCapFactor(), ecorePackage.getEBigDecimal(), "gateBulkOverlapCapFactor", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_SheetResistance(), ecorePackage.getEBigDecimal(), "sheetResistance", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_BulkCapFactor(), ecorePackage.getEBigDecimal(), "bulkCapFactor", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_BulkJunctionBotGradingCoefficient(), ecorePackage.getEBigDecimal(), "bulkJunctionBotGradingCoefficient", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_SidewallCapFactor(), ecorePackage.getEBigDecimal(), "sidewallCapFactor", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_BulkJunctionSideGradingCoefficient(), ecorePackage.getEBigDecimal(), "bulkJunctionSideGradingCoefficient", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_JunctionSatCurDensity(), ecorePackage.getEBigDecimal(), "junctionSatCurDensity", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_OxideThickness(), ecorePackage.getEBigDecimal(), "oxideThickness", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_SubstrateDoping(), ecorePackage.getEBigDecimal(), "substrateDoping", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_SurfaceStateDensity(), ecorePackage.getEBigDecimal(), "surfaceStateDensity", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Nfs(), ecorePackage.getEBigDecimal(), "nfs", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_GateType(), ecorePackage.getEString(), "gateType", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_Xj(), ecorePackage.getEBigDecimal(), "xj", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_LateralDiffusion(), ecorePackage.getEBigDecimal(), "lateralDiffusion", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_SurfaceMobility(), ecorePackage.getEBigDecimal(), "surfaceMobility", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_FlickerNoiseCoefficient(), ecorePackage.getEBigDecimal(), "flickerNoiseCoefficient", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_FlickerNoiseExponent(), ecorePackage.getEBigDecimal(), "flickerNoiseExponent", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_ForwardCapDepletionCoefficient(), ecorePackage.getEBigDecimal(), "forwardCapDepletionCoefficient", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMOSFETModel_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, MOSFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bjtEClass, com.xtext.ravornyo.xspice.xSpice.BJT.class, "BJT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBJT_Model(), ecorePackage.getEString(), "model", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.BJT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJT_Area(), ecorePackage.getEBigDecimal(), "area", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.BJT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJT_Off(), ecorePackage.getEBoolean(), "off", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.BJT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJT_Ic(), ecorePackage.getEBigDecimal(), "ic", null, 0, -1, com.xtext.ravornyo.xspice.xSpice.BJT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJT_Temp(), ecorePackage.getEBigDecimal(), "temp", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.BJT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bjtModelEClass, BJTModel.class, "BJTModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBJTModel_SaturationCurrent(), ecorePackage.getEBigDecimal(), "saturationCurrent", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_BetaF(), ecorePackage.getEBigDecimal(), "betaF", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_EmissionCoefficientForward(), ecorePackage.getEBigDecimal(), "emissionCoefficientForward", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_EarlyVoltageForward(), ecorePackage.getEBigDecimal(), "earlyVoltageForward", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_RollOffForward(), ecorePackage.getEBigDecimal(), "rollOffForward", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_LeakBeCurrent(), ecorePackage.getEBigDecimal(), "leakBeCurrent", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_LeakBeEmissionCoefficient(), ecorePackage.getEBigDecimal(), "leakBeEmissionCoefficient", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_BetaR(), ecorePackage.getEBigDecimal(), "betaR", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_EmissionCoefficientReverse(), ecorePackage.getEBigDecimal(), "emissionCoefficientReverse", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_EarlyVoltageReverse(), ecorePackage.getEBigDecimal(), "earlyVoltageReverse", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_RollOffReverse(), ecorePackage.getEBigDecimal(), "rollOffReverse", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_LeakBcCurrent(), ecorePackage.getEBigDecimal(), "leakBcCurrent", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_LeakBcEmissionCoefficient(), ecorePackage.getEBigDecimal(), "leakBcEmissionCoefficient", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_BaseResist(), ecorePackage.getEBigDecimal(), "baseResist", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_BaseCurrentHalfResist(), ecorePackage.getEBigDecimal(), "baseCurrentHalfResist", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_MinimumBaseResistance(), ecorePackage.getEBigDecimal(), "minimumBaseResistance", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_EmitterResistance(), ecorePackage.getEBigDecimal(), "emitterResistance", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_CollectorResistance(), ecorePackage.getEBigDecimal(), "collectorResistance", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_DepletionCapBe(), ecorePackage.getEBigDecimal(), "depletionCapBe", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_PotentialBe(), ecorePackage.getEBigDecimal(), "potentialBe", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_JunctionExpBe(), ecorePackage.getEBigDecimal(), "junctionExpBe", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_TransitTimeForward(), ecorePackage.getEBigDecimal(), "transitTimeForward", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_TransitTimeBiasCoefficientForward(), ecorePackage.getEBigDecimal(), "transitTimeBiasCoefficientForward", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_TransitTimeForwardVoltageBc(), ecorePackage.getEBigDecimal(), "transitTimeForwardVoltageBc", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_TransitTimeHighCurrentForward(), ecorePackage.getEBigDecimal(), "transitTimeHighCurrentForward", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_ExcessPhase(), ecorePackage.getEBigDecimal(), "excessPhase", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_DepletionCapBc(), ecorePackage.getEBigDecimal(), "depletionCapBc", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_PotentialBc(), ecorePackage.getEBigDecimal(), "potentialBc", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_JunctionExpBc(), ecorePackage.getEBigDecimal(), "junctionExpBc", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_BaseFractionBcCap(), ecorePackage.getEBigDecimal(), "baseFractionBcCap", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_TransitTimeReverse(), ecorePackage.getEBigDecimal(), "transitTimeReverse", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_CapCs(), ecorePackage.getEBigDecimal(), "capCs", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_PotentialSubstrate(), ecorePackage.getEBigDecimal(), "potentialSubstrate", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_ExponentialSubstrate(), ecorePackage.getEBigDecimal(), "exponentialSubstrate", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_BetaExponent(), ecorePackage.getEBigDecimal(), "betaExponent", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_EnergyGap(), ecorePackage.getEBigDecimal(), "energyGap", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_TempExpIs(), ecorePackage.getEBigDecimal(), "tempExpIs", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_FlickerNoiseCoefficient(), ecorePackage.getEBigDecimal(), "flickerNoiseCoefficient", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_FlickerNoiseExponent(), ecorePackage.getEBigDecimal(), "flickerNoiseExponent", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_DepletionCapCoefficient(), ecorePackage.getEBigDecimal(), "depletionCapCoefficient", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBJTModel_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, BJTModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jfetEClass, com.xtext.ravornyo.xspice.xSpice.JFET.class, "JFET", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJFET_Model(), ecorePackage.getEString(), "model", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.JFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFET_Area(), ecorePackage.getEBigDecimal(), "area", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.JFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFET_Off(), ecorePackage.getEBoolean(), "off", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.JFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFET_Ic(), ecorePackage.getEBigDecimal(), "ic", null, 0, -1, com.xtext.ravornyo.xspice.xSpice.JFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFET_Temp(), ecorePackage.getEBigDecimal(), "temp", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.JFET.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jfetModelEClass, JFETModel.class, "JFETModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJFETModel_Threshold(), ecorePackage.getEBigDecimal(), "threshold", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_Beta(), ecorePackage.getEBigDecimal(), "beta", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_Lambda(), ecorePackage.getEBigDecimal(), "lambda", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_DrainResistance(), ecorePackage.getEBigDecimal(), "drainResistance", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_SourceResistance(), ecorePackage.getEBigDecimal(), "sourceResistance", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_CapGs(), ecorePackage.getEBigDecimal(), "capGs", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_CapGd(), ecorePackage.getEBigDecimal(), "capGd", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_GatePotential(), ecorePackage.getEBigDecimal(), "gatePotential", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_GateSaturationCurrent(), ecorePackage.getEBigDecimal(), "gateSaturationCurrent", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_B(), ecorePackage.getEBigDecimal(), "b", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_FlickerNoiseCoefficient(), ecorePackage.getEBigDecimal(), "flickerNoiseCoefficient", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_FlickerNoiseExponent(), ecorePackage.getEBigDecimal(), "flickerNoiseExponent", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_DepletionCapCoefficient(), ecorePackage.getEBigDecimal(), "depletionCapCoefficient", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJFETModel_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, JFETModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vSourceEClass, VSource.class, "VSource", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVSource_Dc(), ecorePackage.getEBigDecimal(), "dc", null, 0, 1, VSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVSource_Ac(), ecorePackage.getEBigDecimal(), "ac", null, 0, -1, VSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVSource_Waveform(), this.getWaveform(), null, "waveform", null, 0, 1, VSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(currentSourceEClass, CurrentSource.class, "CurrentSource", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCurrentSource_Dc(), ecorePackage.getEBigDecimal(), "dc", null, 0, 1, CurrentSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCurrentSource_Ac(), ecorePackage.getEBigDecimal(), "ac", null, 0, -1, CurrentSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCurrentSource_Waveform(), this.getWaveform(), null, "waveform", null, 0, 1, CurrentSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vcvsEClass, com.xtext.ravornyo.xspice.xSpice.VCVS.class, "VCVS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVCVS_Gain(), ecorePackage.getEBigDecimal(), "gain", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.VCVS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vccsEClass, com.xtext.ravornyo.xspice.xSpice.VCCS.class, "VCCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVCCS_Transconductance(), ecorePackage.getEBigDecimal(), "transconductance", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.VCCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cccsEClass, com.xtext.ravornyo.xspice.xSpice.CCCS.class, "CCCS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCCCS_Controller(), ecorePackage.getEString(), "controller", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.CCCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCCCS_Gain(), ecorePackage.getEBigDecimal(), "gain", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.CCCS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ccvsEClass, com.xtext.ravornyo.xspice.xSpice.CCVS.class, "CCVS", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCCVS_Controller(), ecorePackage.getEString(), "controller", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.CCVS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCCVS_Transresistance(), ecorePackage.getEBigDecimal(), "transresistance", null, 0, 1, com.xtext.ravornyo.xspice.xSpice.CCVS.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(geometericSweepEClass, GeometericSweep.class, "GeometericSweep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getGeometericSweep_Initial(), ecorePackage.getEBigDecimal(), "initial", null, 0, 1, GeometericSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getGeometericSweep_Final(), ecorePackage.getEBigDecimal(), "final", null, 0, 1, GeometericSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(linearSweepEClass, LinearSweep.class, "LinearSweep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLinearSweep_Delta(), ecorePackage.getEBigDecimal(), "delta", null, 0, 1, LinearSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(octaveSweepEClass, OctaveSweep.class, "OctaveSweep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOctaveSweep_PointsPerOctave(), ecorePackage.getEBigDecimal(), "pointsPerOctave", null, 0, 1, OctaveSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(decadeSweepEClass, DecadeSweep.class, "DecadeSweep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDecadeSweep_PointsPerDecade(), ecorePackage.getEBigDecimal(), "pointsPerDecade", null, 0, 1, DecadeSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterSweepEClass, ParameterSweep.class, "ParameterSweep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameterSweep_Source(), ecorePackage.getEString(), "source", null, 0, 1, ParameterSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameterSweep_Sweep(), this.getGeometericSweep(), null, "sweep", null, 0, 1, ParameterSweep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(simulationEClass, Simulation.class, "Simulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(acSimulationEClass, ACSimulation.class, "ACSimulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getACSimulation_Sweep(), this.getGeometericSweep(), null, "sweep", null, 0, 1, ACSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dcSimulationEClass, DCSimulation.class, "DCSimulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDCSimulation_Sweeps(), this.getParameterSweep(), null, "sweeps", null, 0, -1, DCSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(noiseSimulationEClass, NoiseSimulation.class, "NoiseSimulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNoiseSimulation_Output(), this.getExport(), null, "output", null, 0, -1, NoiseSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNoiseSimulation_InputSource(), ecorePackage.getEString(), "inputSource", null, 0, 1, NoiseSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getNoiseSimulation_Isweep(), this.getGeometericSweep(), null, "isweep", null, 0, 1, NoiseSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(transientSimulationEClass, TransientSimulation.class, "TransientSimulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTransientSimulation_Args(), ecorePackage.getEBigDecimal(), "args", null, 0, -1, TransientSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTransientSimulation_Uic(), ecorePackage.getEBoolean(), "uic", null, 0, 1, TransientSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outputEClass, Output.class, "Output", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOutput_Prtype(), this.getPRTYPE(), "prtype", null, 0, 1, Output.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutput_Exports(), this.getExport(), null, "exports", null, 0, -1, Output.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(printEClass, Print.class, "Print", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(plotEClass, Plot.class, "Plot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(exportEClass, Export.class, "Export", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExport_Prefix(), ecorePackage.getEString(), "prefix", null, 0, 1, Export.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExport_Nodes(), ecorePackage.getEString(), "nodes", null, 0, -1, Export.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(voltageExportEClass, VoltageExport.class, "VoltageExport", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(currentExportEClass, CurrentExport.class, "CurrentExport", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(waveformEClass, Waveform.class, "Waveform", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWaveform_Args(), ecorePackage.getEBigDecimal(), "args", null, 0, -1, Waveform.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(expEClass, Exp.class, "Exp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sineEClass, Sine.class, "Sine", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(pulseEClass, Pulse.class, "Pulse", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(pwlEClass, com.xtext.ravornyo.xspice.xSpice.PWL.class, "PWL", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sffmEClass, com.xtext.ravornyo.xspice.xSpice.SFFM.class, "SFFM", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(amEClass, com.xtext.ravornyo.xspice.xSpice.AM.class, "AM", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(optionsEClass, Options.class, "Options", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOptions_Abstol(), ecorePackage.getEBigDecimal(), "abstol", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Badmos3(), ecorePackage.getEBigDecimal(), "badmos3", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Chgtol(), ecorePackage.getEBigDecimal(), "chgtol", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Defad(), ecorePackage.getEBigDecimal(), "defad", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Defas(), ecorePackage.getEBigDecimal(), "defas", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Defl(), ecorePackage.getEBigDecimal(), "defl", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_DefaultWidth(), ecorePackage.getEBigDecimal(), "defaultWidth", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Gmin(), ecorePackage.getEBigDecimal(), "gmin", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Itl1(), ecorePackage.getEBigDecimal(), "itl1", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Itl2(), ecorePackage.getEBigDecimal(), "itl2", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Itl3(), ecorePackage.getEBigDecimal(), "itl3", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Itl4(), ecorePackage.getEBigDecimal(), "itl4", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Itl5(), ecorePackage.getEBigDecimal(), "itl5", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Keepopinfo(), ecorePackage.getEBigDecimal(), "keepopinfo", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Method(), this.getIntegrationMethod(), "method", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Pivrel(), ecorePackage.getEBigDecimal(), "pivrel", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Reltol(), ecorePackage.getEBigDecimal(), "reltol", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Temp(), ecorePackage.getEBigDecimal(), "temp", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_NominalTemperature(), ecorePackage.getEBigDecimal(), "nominalTemperature", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Trtol(), ecorePackage.getEBigDecimal(), "trtol", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOptions_Vntol(), ecorePackage.getEBigDecimal(), "vntol", null, 0, 1, Options.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeSetEClass, NodeSet.class, "NodeSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNodeSet_Entries(), this.getNodeSetEntry(), null, "entries", null, 0, -1, NodeSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(initialConditionEClass, InitialCondition.class, "InitialCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInitialCondition_Entries(), this.getNodeSetEntry(), null, "entries", null, 0, -1, InitialCondition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(nodeSetEntryEClass, NodeSetEntry.class, "NodeSetEntry", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNodeSetEntry_Node(), ecorePackage.getEString(), "node", null, 0, -1, NodeSetEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getNodeSetEntry_Value(), ecorePackage.getEBigDecimal(), "value", null, 0, 1, NodeSetEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(prtypeEEnum, com.xtext.ravornyo.xspice.xSpice.PRTYPE.class, "PRTYPE");
    addEEnumLiteral(prtypeEEnum, com.xtext.ravornyo.xspice.xSpice.PRTYPE.DC);
    addEEnumLiteral(prtypeEEnum, com.xtext.ravornyo.xspice.xSpice.PRTYPE.AC);
    addEEnumLiteral(prtypeEEnum, com.xtext.ravornyo.xspice.xSpice.PRTYPE.TRAN);
    addEEnumLiteral(prtypeEEnum, com.xtext.ravornyo.xspice.xSpice.PRTYPE.NOISE);

    initEEnum(integrationMethodEEnum, IntegrationMethod.class, "IntegrationMethod");
    addEEnumLiteral(integrationMethodEEnum, IntegrationMethod.GEAR);
    addEEnumLiteral(integrationMethodEEnum, IntegrationMethod.TRAPEZOIDAL);
    addEEnumLiteral(integrationMethodEEnum, IntegrationMethod.EULER);

    // Create resource
    createResource(eNS_URI);
  }

} //XSpicePackageImpl
